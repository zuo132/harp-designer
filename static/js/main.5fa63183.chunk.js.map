{"version":3,"sources":["utils.js","reducers/stringReducer.js","data.js","reducers/soundboardReducer.js","reducers/pillarReducer.js","reducers/neckReducer.js","reducers/settingsReducer.js","store.js","components/Overview.js","actions/stringActions.js","actions/soundboardActions.js","components/SoundboardOptions.js","components/PillarOptions.js","actions/pillarActions.js","actions/neckActions.js","components/NeckOptions.js","components/TuningOptions.js","components/StringMaterialOptions.js","stringGaugeData.js","components/StringOptions.js","components/OptionsPanel.js","components/Body.js","components/Pillar.js","components/Neck.js","components/String.js","components/Measurements.js","components/Harp.js","actions/settingsActions.js","App.js","reportWebVitals.js","index.js"],"names":["stringX","index","stringSpacing","stringY","scale","height","getQBezierValue","t","p1","p2","p3","iT","calculateTension","frequency","length","diameter","p","linearMassDensity","mu","Math","PI","inchToMeter","value","getFrequency","note","octave","keyNumber","charAt","indexOf","slice","pow","addNoteName","strings","lowestNote","tuning","cMajorNotes","eFlatMajorNotes","aFlatMajorNotes","notes","lowestNoteName","lowestNoteNumber","parseInt","offset","charCodeAt","stringsWithNoteName","map","string","floor","calculateTensileStress","width","tension","calculateStraightPillarCrossSectionArea","calculateDPillarCrossSectionArea","thickness","id","reverse","array","x","materialDensity","initialState","defaultStringLengths","selectedString","yOffset","stringNumber","totalLoad","reduce","acc","stringReducer","createReducer","SELECT_STRING","state","payload","find","stringId","UPDATE_STRING","stringToUpdate","Object","keys","params","forEach","key","UPDATE_STRING_MATERIAL_DENSITY","density","UPDATE_TUNING","UPDATE_STRING_NUMBER","updatedStrings","updatedDefaultStringLengths","difference","newStrings","i","newString","push","abs","UPDATE_LOWEST_NOTE","UPDATE_Y_OFFSET","soundboardReducer","angle","control","stringBandThickness","UPDATE_SOUNDBOARD_ANGLE","UPDATE_CONTROL_POSITION","position","UPDATE_STRING_BAND_THICKNESS","UPDATE_SOUNDBOARD_LENGTH","pillarReducer","shape","pillarDiameter","pillarWidth","pillarThickness","neckJointWidth","UPDATE_PILLAR_SHAPE","UPDATE_PILLAR_DIAMETER","UPDATE_PILLAR_WIDTH","UPDATE_PILLAR_THICKNESS","UPDATE_NECK_JOINT_WIDTH","neckReducer","neckThickness","tuningPinLength","frontNeckThickness","backNeckThickness","frontNeckTuningPostLength","backNeckTuningPostLength","neckStyle","UPDATE_NECK_THICKNESS","UPDATE_TUNING_PIN_LENGTH","UPDATE_PARAGUAYAN_PARAMS","UPDATE_NECK_STYLE","style","settingsReducer","backgroundColor","UPDATE_BACKGROUND_COLOR","color","reducers","combineReducers","soundboard","pillar","neck","settings","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Overview","dispatch","useDispatch","useSelector","totalTension","useState","numberOfStrings","setNumberOfStrings","setNote","toFixed","Form","onSubmit","e","preventDefault","a","createAction","updateLowestNote","updateStringNumber","FormContainer","Group","className","Label","Control","type","onChange","target","Button","variant","styled","div","updateControlPosition","updateSoundboardLength","SoundboardOptions","soundboardAngle","setSoundboardAngle","bandThickness","setBandThickness","updateSoundboardAngle","InputGroup","InputGroupText","Text","PillarOptions","setDiameter","setWidth","setThickness","neckJoint","setNeckJoint","updateShape","updatePillarShape","StyledButton","onClick","updatePillarDiameter","disabled","updatePillarWidth","updatePillarThickness","updateNeckJointWidth","Range","max","min","updateNeckStyle","NeckOptions","tuningPinLen","setTuningPinLen","frontThickness","setFrontThickness","frontTuningPostLength","setFrontTuningPostLength","backThickness","setBackThickness","backTuningPostLength","setBackTuningPostLength","frontNeckLoad","useMemo","load","backNeckLoad","torqueImbalance","updateNeckThickness","parseFloat","OverlayTrigger","placement","overlay","Tooltip","BlockSpan","span","TuningOptions","updateStringTuning","updateTuning","StringMaterialOptions","setDensity","updateMaterial","updateStringMaterialDensity","ApplyButton","stringGaugeData","name","StringOptions","setFrequency","setLength","setTension","material","setMaterial","lmd","setLmd","stringGauge","setStringGauge","selectedField","setSelectField","useEffect","newFrequency","newLength","newDiameter","newTension","sqrt","calculateFrequency","calculateLength","calculateDiameter","updateString","RadioContainer","Check","checked","Select","gauge","OptionsPanel","MainContainer","OptionsContainer","Container","Body","start","end","useRef","cachedEnd","setCachedEnd","current","y","stroke","strokeWidth","lineJoin","sceneFunc","context","beginPath","moveTo","quadraticCurveTo","lineTo","closePath","fillStrokeShape","ref","radius","fill","draggable","onMouseEnter","document","body","cursor","this","onMouseLeave","onDragMove","onDragEnd","Pillar","dStart","dEnd","lineCap","points","closed","Neck","harpHeight","topNeckPoints","bottomNeckPoints","neckPoints","stringLengths","yPos","defaultPoints","samples","point","lengthDifference","flat","String","listening","Measurements","highestStringY","stringHeight","pointerDirection","pointerWidth","pointerHeight","text","round","fontSize","padding","Harp","setHeight","tooltip","updateYOffset","radians","tan","calculateYOffset","evt","layerX","layerY","attrs","getText","show","onMouseOver","onMouseOut","hide","Number","opacity","visible","offsetY","updateBackgroundColor","App","AppContainer","Navbar","bg","Brand","NavDropdown","title","DropdownTitle","NavItemContainer","ColorIndicator","Row","Col","md","CanvasContainer","props","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"sOAAaA,EAAU,SAACC,EAAOC,GAC7B,OAAOD,EAAQC,EAAgB,KAGpBC,EAAU,SAACF,EAAOG,GAAyB,IAAlBC,EAAiB,uDAAR,IAC7C,OAAOA,EAASJ,EAAQG,GAGnB,SAASE,EAAgBC,EAAGC,EAAIC,EAAIC,GACzC,IAAIC,EAAK,EAAIJ,EACb,OAAOI,EAAKA,EAAKH,EAAK,EAAIG,EAAKJ,EAAIE,EAAKF,EAAIA,EAAIG,EAG3C,I,sCAAME,EAAmB,SAACC,EAAWC,EAAQC,GAA+C,IAArCC,EAAoC,uDAAhC,KAAMC,EAA0B,uDAAN,EACpFC,EAAKD,GAAwC,SAACF,EAAW,EAAM,GAAII,KAAKC,GAAKJ,EAAI,IACvF,OAAQ,SAAC,EAAIF,EAASD,EAAc,GAAIK,EAAM,OAkBnCG,EAAc,SAACC,GAC1B,OAAgB,KAARA,EAAgB,KAGbC,EAAe,SAAUC,GACpC,IACIC,EAAQC,EAiBZ,OAdED,EADkB,IAAhBD,EAAKV,OACEU,EAAKG,OAAO,GAEZH,EAAKG,OAAO,GAMrBD,GAHFA,EATc,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,MASxDE,QAAQJ,EAAKK,MAAM,GAAI,KAEzB,EACFH,EAAY,GAAoB,IAAdD,EAAS,GAAU,EAErCC,EAA2B,IAAdD,EAAS,GAAU,EAIvC,IAAMN,KAAKW,IAAI,GAAIJ,EAAY,IAAM,KAGjCK,EAAc,SAACC,GAAoD,IAA3CC,EAA0C,uDAA7B,KAAMC,EAAuB,uDAAd,UACzDC,EAAc,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7CC,EAAkB,CAAC,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,MACnDC,EAAkB,CAAC,IAAK,KAAM,KAAM,IAAK,IAAK,KAAM,MAEpDC,EACO,YAAXJ,EACIC,EACW,iBAAXD,EACAE,EACAC,EAEAE,EAAiBN,EAAWN,OAAO,GACnCa,EAAmBC,SAASR,EAAWN,OAAOM,EAAWnB,OAAS,IAClE4B,EAASH,EAAeI,WAAW,GAAK,IAAIA,WAAW,GAEvDC,EAAsBZ,EAAQa,KAAI,SAACC,EAAQ7C,GAC/C,IAAMuB,EACJc,GAAOrC,EAAQyC,GAAU,IAAMF,EAAmBrB,KAAK4B,OAAO9C,EAAQyC,GAAU,IAClF,OAAO,2BAAKI,GAAZ,IAAoBtB,OAAMX,UAAWU,EAAaC,QAGpD,OAAOoB,GAGII,EAAyB,SAAClC,EAAQmC,EAAOC,GACpD,OAAOA,GAAWpC,EAASmC,IAGhBE,EAA0C,SAACpC,GACtD,OAAO,SAACA,EAAW,IAAO,EAAM,GAAII,KAAKC,IAG9BgC,EAAmC,SAACH,EAAOI,GACtD,OAAQJ,EAAQ,KAASI,EAAY,MCzFjCrB,EAAUD,ECJU,CACxB,CACEuB,GAAI,IACJzC,UAAW,SACXC,OAAQ,GACRoC,QAAS,MACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,KACXC,OAAQ,IACRoC,QAAS,MACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,SACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,SACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,SACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,SACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,IACJzC,UAAW,IACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,MACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,OACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,IACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,KAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,IACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,KAEZ,CACEuC,GAAI,KACJzC,UAAW,QACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,IACXC,OAAQ,IACRoC,QAAS,MACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,OACXC,OAAQ,IACRoC,QAAS,OACTnC,SAAU,KAEZ,CACEuC,GAAI,KACJzC,UAAW,OACXC,OAAQ,KACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,OACXC,OAAQ,KACRoC,QAAS,GACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,OACXC,OAAQ,KACRoC,QAAS,OACTnC,SAAU,MAEZ,CACEuC,GAAI,KACJzC,UAAW,OACXC,OAAQ,KACRoC,QAAS,OACTnC,SAAU,IAEZ,CACEuC,GAAI,KACJzC,UAAW,MACXC,OAAQ,KACRoC,QAAS,OACTnC,SAAU,KDvPyBwC,WAAWV,KAAI,SAACC,EAAQ7C,EAAOuD,GACpE,IAAMC,EAAID,EAAM1C,OAASb,EAAQ,EAC3Ba,EAAS,aAAO2C,EAAK,GAAI,EAAIA,EAAI,IAEvC,OAAO,2BACFX,GADL,IAEEhC,SACAC,SAAyC,IAA/BM,EAAYyB,EAAO/B,UAC7BmC,QAAStC,EAAiBE,EAAS,IAAMgC,EAAOjC,UAAWQ,EAAYyB,EAAO/B,WAC9E2C,gBAAiB,KACjBzC,kBAAmB,OAIjB0C,EAAe,CACnB3B,UACA4B,qBAAsB5B,EAAQa,KAAI,SAACC,GAAD,OAAYA,EAAOhC,UACrD+C,eAAgB,KAChB3D,cAAe,GACf4D,QAAS,EACTJ,gBAAiB,KACjBxB,OAAQ,UACR6B,aAAc,GACd9B,WAAY,KACZ+B,UAAWhC,EAAQiC,QAAO,SAACC,EAAKpB,GAAN,OAAiBoB,EAAMpB,EAAOI,UAAS,IA8JpDiB,EA3JOC,YAAcT,EAAc,CAChDU,cAAe,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjBV,EAAiBS,EAAMtC,QAAQwC,MAAK,SAAC1B,GAAD,OAAYA,EAAOQ,KAAOiB,EAAQE,YAC5E,OAAO,2BAAKH,GAAZ,IAAmBT,oBAGrBa,cAAe,SAACJ,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjBI,EAAiBL,EAAMtC,QAAQwC,MAAK,SAAC1B,GAAD,OAAYA,EAAOQ,KAAOiB,EAAQE,YAE5EG,OAAOC,KAAKN,EAAQO,QAAQC,SAAQ,SAACC,GACnCL,EAAeK,GAAOT,EAAQO,OAAOE,MAGvCV,EAAMT,eAAiBc,EACvBL,EAAMN,UAAYM,EAAMtC,QAAQiC,QAAO,SAACC,EAAKpB,GAAN,OAAiBoB,EAAMpB,EAAOI,UAAS,IAGhF+B,+BAAgC,SAACX,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACxCD,EAAMtC,QAAQ+C,SAAQ,SAACjC,GACrBA,EAAOI,QAAUtC,EACfkC,EAAOhC,OAAS,IAChBgC,EAAOjC,UACPiC,EAAO/B,SAAW,IAClBwD,EAAQW,SAGVpC,EAAOY,gBAAkBa,EAAQW,WAGnCZ,EAAMZ,gBAAkBa,EAAQW,QAC5BZ,EAAMT,iBACRS,EAAMT,eAAiBS,EAAMtC,QAAQwC,MAAK,SAAC1B,GAAD,OAAYA,EAAOQ,KAAOgB,EAAMT,eAAeP,OAE3FgB,EAAMN,UAAYM,EAAMtC,QAAQiC,QAAO,SAACC,EAAKpB,GAAN,OAAiBoB,EAAMpB,EAAOI,UAAS,IAGhFiC,cAAe,SAACb,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACvBD,EAAMtC,QAAUD,EAAYuC,EAAMtC,QAASsC,EAAMrC,WAAYsC,EAAQrC,QACrEoC,EAAMtC,QAAQ+C,SAAQ,SAACjC,GACrBA,EAAOI,QAAUtC,EACfkC,EAAOhC,OAAS,IAChBgC,EAAOjC,UACPiC,EAAO/B,SAAW,IAClB+B,EAAOY,gBACPZ,EAAOY,iBAAmB,EAAI,EAAIZ,EAAO7B,sBAG7CqD,EAAMpC,OAASqC,EAAQrC,OACnBoC,EAAMT,iBACRS,EAAMT,eAAiBS,EAAMtC,QAAQwC,MAAK,SAAC1B,GAAD,OAAYA,EAAOQ,KAAOgB,EAAMT,eAAeP,OAE3FgB,EAAMN,UAAYM,EAAMtC,QAAQiC,QAAO,SAACC,EAAKpB,GAAN,OAAiBoB,EAAMpB,EAAOI,UAAS,IAGhFkC,qBAAsB,SAACd,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC1Bc,EAAiBf,EAAMtC,QACvBsD,EAA8B,GAE5BC,EAAahB,EAAQR,aAAeO,EAAMP,aAChD,GAAIwB,EAAa,EAAG,CAGlB,IAFA,IAAMC,EAAa,GAEVC,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CACnC,IAAMhC,EAAIa,EAAMtC,QAAQlB,OAAS2E,EAC3BC,EAAY,CAChBpC,GAAIG,EAAI,EAAI,GACZ3C,OAAQ,aAAO2C,EAAK,GAAI,EAAIA,EAAI,IAChC1C,SAAUuD,EAAMtC,QAAQ,GAAGjB,SAC3B2C,gBAAiBY,EAAMZ,iBAEzB8B,EAAWG,KAAKD,GASlBL,GANAA,EAAiBtD,EAAY,GAAD,mBACtByD,EAAWjC,WADW,YACGe,EAAMtC,UACnCsC,EAAMrC,WACNqC,EAAMpC,SAGwBW,KAAI,SAACC,GACnC,IAAMI,EAAUtC,EACdkC,EAAOhC,OAAS,IAChBgC,EAAOjC,UACPiC,EAAO/B,SAAW,IAClB+B,EAAOY,gBACPZ,EAAOY,iBAAmB,EAAI,EAAIZ,EAAO7B,mBAG3C,OAAO,2BAAK6B,GAAZ,IAAoBI,eAGtBoC,EAA2B,sBACtBE,EAAW3C,KAAI,SAACC,GAAD,OAAYA,EAAOhC,WADZ,YAEtBwD,EAAMV,4BAEF2B,EAAa,IACtBF,EAAiBtD,EACfuC,EAAMtC,QAAQH,MAAMV,KAAKyE,IAAIL,IAC7BjB,EAAMrC,WACNqC,EAAMpC,QACNW,KAAI,SAACC,GACL,IAAMI,EAAUtC,EACdkC,EAAOhC,OAAS,IAChBgC,EAAOjC,UACPiC,EAAO/B,SAAW,IAClB+B,EAAOY,gBACPZ,EAAOY,iBAAmB,EAAI,EAAIZ,EAAO7B,mBAG3C,OAAO,2BAAK6B,GAAZ,IAAoBI,eAGtBoC,EAA8BhB,EAAMV,qBAAqB/B,MAAMV,KAAKyE,IAAIL,KAG1E,OAAO,2BACFjB,GADL,IAEEP,aAAcQ,EAAQR,aACtB/B,QAASqD,EACTzB,qBAAsB0B,EACtBtB,UAAWM,EAAMtC,QAAQiC,QAAO,SAACC,EAAKpB,GAAN,OAAiBoB,EAAMpB,EAAOI,UAAS,GACvEW,eAAgB,QAIpBgC,mBAAoB,SAACvB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACxBc,EAAiBtD,EAAYuC,EAAMtC,QAASuC,EAAQtC,WAAYqC,EAAMpC,QAa1E,OAZAmD,EAAiBA,EAAexC,KAAI,SAACC,GACnC,IAAMI,EAAUtC,EACdkC,EAAOhC,OAAS,IAChBgC,EAAOjC,UACPiC,EAAO/B,SAAW,IAClB+B,EAAOY,gBACPZ,EAAOY,iBAAmB,EAAI,EAAIZ,EAAO7B,mBAG3C,OAAO,2BAAK6B,GAAZ,IAAoBI,eAGf,2BACFoB,GADL,IAEErC,WAAYsC,EAAQtC,WACpBD,QAASqD,EACTrB,UAAWqB,EAAepB,QAAO,SAACC,EAAKpB,GAAN,OAAiBoB,EAAMpB,EAAOI,UAAS,GACxEW,eACES,EAAMT,gBACNwB,EAAeb,MAAK,SAAC1B,GAAD,OAAYA,EAAOQ,KAAOgB,EAAMT,eAAeP,SAIzEwC,gBAAiB,SAACxB,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACzB,OAAO,2BAAKD,GAAZ,IAAmBR,QAASS,EAAQT,aEhKzBiC,EAlBW3B,YAFL,CAAE4B,MAAO,GAAIC,QAAS,KAAMC,oBAAqB,GAAIpF,OAAQ,GAE5B,CACpDqF,wBAAyB,SAAC7B,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjC,OAAO,2BAAKD,GAAZ,IAAmB0B,MAAOzB,EAAQyB,SAGpCI,wBAAyB,SAAC9B,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjC,OAAO,2BAAKD,GAAZ,IAAmB2B,QAAS1B,EAAQ8B,YAGtCC,6BAA8B,SAAChC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACtC,OAAO,2BAAKD,GAAZ,IAAmB4B,oBAAqB3B,EAAQlB,aAGlDkD,yBAA0B,SAACjC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAClC,OAAO,2BAAKD,GAAZ,IAAmBxD,OAAQyD,EAAQzD,YCcxB0F,EAtBOpC,YARD,CACnBqC,MAAO,WACPC,eAAgB,GAChBC,YAAa,GACbC,gBAAiB,GACjBC,eAAgB,GAGgC,CAChDC,oBAAqB,SAACxC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,2BAAKD,GAAZ,IAAmBmC,MAAOlC,EAAQkC,SAGpCM,uBAAwB,SAACzC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAChC,OAAO,2BAAKD,GAAZ,IAAmBoC,eAAgBnC,EAAQxD,YAG7CiG,oBAAqB,SAAC1C,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,2BAAKD,GAAZ,IAAmBqC,YAAapC,EAAQtB,SAG1CgE,wBAAyB,SAAC3C,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjC,OAAO,2BAAKD,GAAZ,IAAmBsC,gBAAiBrC,EAAQlB,aAG9C6D,wBAAyB,SAAC5C,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjC,OAAO,2BAAKD,GAAZ,IAAmBuC,eAAgBtC,EAAQtB,WCIhCkE,EApBK/C,YAVC,CACnBgD,cAAe,GACfC,gBAAiB,GACjBC,mBAAoB,GACpBC,kBAAmB,GACnBC,0BAA2B,GAC3BC,yBAA0B,GAC1BC,UAAW,YAGmC,CAC9CC,sBAAuB,SAACrD,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC/B,OAAO,2BAAKD,GAAZ,IAAmB8C,cAAe7C,EAAQlB,aAG5CuE,yBAA0B,SAACtD,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAClC,OAAO,2BAAKD,GAAZ,IAAmB+C,gBAAiB9C,EAAQzD,UAG9C+G,yBAA0B,SAACvD,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAClCK,OAAOC,KAAKN,EAAQO,QAAQC,SAAQ,SAACC,GACnCV,EAAMU,GAAOT,EAAQO,OAAOE,OAIhC8C,kBAAmB,SAACxD,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC3B,OAAO,2BAAKD,GAAZ,IAAmBoD,UAAWnD,EAAQwD,WClB3BC,EANS5D,YAFH,CAAE6D,gBAAiB,aAEY,CAClDC,wBAAyB,SAAC5D,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACjC,OAAO,2BAAKD,GAAZ,IAAmB2D,gBAAiB1D,EAAQ4D,WCG1CC,EAAWC,0BAAgB,CAC/BvF,OAAQqB,EACRmE,WAAYvC,EACZwC,OAAQ/B,EACRgC,KAAMrB,EACNsB,SAAUT,IAKNU,EAAa,CAACC,KAQLC,EANDC,sBACZT,EALmB,GAOnBU,8BAAoBC,kBAAe,WAAf,EAAmBL,K,iICwC1BM,GA1DE,WACf,IAAMC,EAAWC,cACjB,EAA8CC,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAAnEd,EAAR,EAAQA,QAAS+B,EAAjB,EAAiBA,aAAc9B,EAA/B,EAA+BA,WAC3BmH,EAAe,EACnBpH,EAAQ+C,SAAQ,SAACjC,GACfsG,GAAgBtG,EAAOI,WAGzB,MAA8CmG,mBAAStF,GAAvD,oBAAOuF,EAAP,KAAwBC,EAAxB,KACA,EAAwBF,mBAASpH,GAAjC,oBAAOT,EAAP,KAAagI,EAAb,KAUA,OACE,uCACE,2CAEA,oDACiB,6BAAIJ,EAAaK,QAAQ,KAD1C,SAGA,uBAEA,gBAACC,GAAA,EAAD,CAAMC,SAjBW,SAACC,GACpBA,EAAEC,iBACErI,IAASS,GAAYgH,ECGG,SAAChH,GAAD,gDAAgB,WAAOgH,GAAP,UAAAa,EAAA,sDAC9Cb,EAASc,YAAa,qBAAbA,CAAmC,CAAE9H,gBADA,2CAAhB,sDDHM+H,CAAiBxI,IAC/CiB,SAAS6G,KAAqBvF,GAChCkF,ECH4B,SAAClF,GAAD,gDAAkB,WAAOkF,GAAP,UAAAa,EAAA,sDAClDb,EAASc,YAAa,uBAAbA,CAAqC,CAAEhG,kBADE,2CAAlB,sDDGnBkG,CAAmBxH,SAAS6G,MAarC,UACE,gBAACY,GAAD,WACE,gBAACR,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,gCAEA,eAACX,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAOgI,EACPkB,SAAU,SAACZ,GAAD,OAAOL,EAAmBK,EAAEa,OAAOnJ,aAIjD,gBAACoI,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,0BACA,eAACX,GAAA,EAAKY,QAAN,CACEC,KAAK,OACLjJ,MAAOE,EACPgJ,SAAU,SAACZ,GAAD,OAAOJ,EAAQI,EAAEa,OAAOnJ,gBAKxC,eAACoJ,GAAA,EAAD,CAAQN,UAAU,SAASG,KAAK,SAASI,QAAQ,YAAjD,0BAUFT,GAAgBU,KAAOC,IAAV,iF,UE5DNC,GAAwB,SAACzE,GAAD,gDAAc,WAAO4C,GAAP,UAAAa,EAAA,sDACjDb,EAASc,YAAa,0BAAbA,CAAwC,CAAE1D,cADF,2CAAd,uDAQxB0E,GAAyB,SAACjK,GAAD,gDAAY,WAAOmI,GAAP,UAAAa,EAAA,sDAChDb,EAASc,YAAa,2BAAbA,CAAyC,CAAEjJ,YADJ,2CAAZ,uDC0DvBkK,GAjEW,WACxB,IAAM/B,EAAWC,cACTlF,EAAcmF,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAA3CkB,UACR,EAA+CmF,aAAY,SAAC7E,GAAD,OAAWA,EAAMgE,cAApEtC,EAAR,EAAQA,MAAOE,EAAf,EAAeA,oBAAqBpF,EAApC,EAAoCA,OAEpC,EAA8CuI,mBAASrD,GAAvD,oBAAOiF,EAAP,KAAwBC,EAAxB,KACA,EAA0C7B,mBAASnD,GAAnD,oBAAOiF,EAAP,KAAsBC,EAAtB,KAUA,OACE,gBAAC1B,GAAA,EAAD,CAAMC,SATa,SAACC,GDLiB,IAACvG,ECMtCuG,EAAEC,iBACEoB,GAAmBA,IAAoBjF,GACzCiD,EDhB+B,SAACjD,GAAD,gDAAW,WAAOiD,GAAP,UAAAa,EAAA,sDAC9Cb,EAASc,YAAa,0BAAbA,CAAwC,CAAE/D,WADL,2CAAX,sDCgBtBqF,CAAsB5I,SAASwI,KACtCE,GAAiBA,IAAkBjF,GACrC+C,GDVoC5F,ECUD8H,EDVA,yCAAe,WAAOlC,GAAP,UAAAa,EAAA,sDACtDb,EAASc,YAAa,+BAAbA,CAA6C,CAAE1G,eADF,2CAAf,yDCcrC,UACE,6CAEA,gBAACqG,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,+BACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO2J,EACPT,SAAU,SAACZ,GAAD,OAAOsB,EAAmBtB,EAAEa,OAAOnJ,UAE/C,eAACiK,GAAD,yBAIJ,iDACkB,IAChB,8BAEIvI,EACElC,EAAS,IACToF,EAAsB,IACV,GAAZlC,EAAkB,OAChB,KACJyF,QAAQ,KACP,IAVP,SAcA,gBAACC,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,oCACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO6J,EACPX,SAAU,SAACZ,GAAD,OAAOwB,EAAiBxB,EAAEa,OAAOnJ,UAE7C,eAACiK,GAAD,uBAIJ,eAACb,GAAA,EAAD,CAAQN,UAAU,SAASG,KAAK,SAASI,QAAQ,YAAjD,uBASAY,GAAiBX,aAAOU,KAAWE,KAAlBZ,CAAH,iGCiELa,GA3HO,WACpB,IAAMxC,EAAWC,cAETlF,EAAcmF,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAA3CkB,UACR,EAAgFmF,aAC9E,SAAC7E,GAAD,OAAWA,EAAMiE,UADX9B,EAAR,EAAQA,MAAOC,EAAf,EAAeA,eAAgBC,EAA/B,EAA+BA,YAAaC,EAA5C,EAA4CA,gBAAiBC,EAA7D,EAA6DA,eAI7D,EAAgCwC,mBAAS3C,GAAzC,oBAAO3F,EAAP,KAAiB2K,EAAjB,KACA,EAA0BrC,mBAAS1C,GAAnC,oBAAO1D,EAAP,KAAc0I,EAAd,KACA,EAAkCtC,mBAASzC,GAA3C,oBAAOvD,EAAP,KAAkBuI,EAAlB,KACA,EAAkCvC,mBAASxC,GAA3C,oBAAOgF,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,SAACtF,GACnBwC,EC5B6B,SAACxC,GAAD,gDAAW,WAAOwC,GAAP,UAAAa,EAAA,sDAC1Cb,EAASc,YAAa,sBAAbA,CAAoC,CAAEtD,WADL,2CAAX,sDD4BpBuF,CAAkBvF,KAwB7B,OACE,uCACE,yCAEA,eAACwF,GAAD,CACEtB,QAAmB,aAAVlE,EAAuB,UAAY,YAC5CyF,QAAS,kBAAMH,EAAY,aAF7B,sBAMA,eAACE,GAAD,CACEtB,QAAmB,YAAVlE,EAAsB,UAAY,YAC3CyF,QAAS,kBAAMH,EAAY,YAF7B,qBAOA,oDACqB,IACnB,8BAAkB,GAAZ/H,EAAkB,OA1Bd,aAAVyC,EACKtD,EAAwCuD,GAExCtD,EAAiCuD,EAAaC,IAuBY,KAAS6C,QAAQ,KAFlF,UAKW,aAAVhD,EACC,gBAACiD,GAAA,EAAD,CAAMC,SA5CW,SAACC,GACtBA,EAAEC,iBACFZ,EC7BgC,SAAClI,GAAD,gDAAc,WAAOkI,GAAP,UAAAa,EAAA,sDAChDb,EAASc,YAAa,yBAAbA,CAAuC,CAAEhJ,cADF,2CAAd,sDD6BvBoL,CAAqBpL,KA0C1B,UACE,gBAAC2I,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,8BACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAOP,EACPyJ,SAAU,SAACZ,GAAD,OAAO8B,EAAY9B,EAAEa,OAAOnJ,UAExC,eAAC,GAAD,uBAIJ,eAACoJ,GAAA,EAAD,CAAQN,UAAU,SAASG,KAAK,SAASI,QAAQ,YAAYyB,UAAWrL,EAAxE,sBAKF,gBAAC2I,GAAA,EAAD,CAAMC,SAzDoB,SAACC,GAC/BA,EAAEC,iBACE5G,GAASA,IAAU0D,GAAasC,EC9BP,SAAChG,GAAD,gDAAW,WAAOgG,GAAP,UAAAa,EAAA,sDAC1Cb,EAASc,YAAa,sBAAbA,CAAoC,CAAE9G,WADL,2CAAX,sDD8BgBoJ,CAAkBpJ,IAC3DI,GAAaA,IAAcuD,GAAiBqC,EC3Bf,SAAC5F,GAAD,gDAAe,WAAO4F,GAAP,UAAAa,EAAA,sDAClDb,EAASc,YAAa,0BAAbA,CAAwC,CAAE1G,eADD,2CAAf,sDD2BwBiJ,CAAsBjJ,IAC3EwI,GAAaA,IAAchF,GAC7BoC,ECzB8B,SAAChG,GAAD,gDAAW,WAAOgG,GAAP,UAAAa,EAAA,sDAC7Cb,EAASc,YAAa,0BAAbA,CAAwC,CAAE9G,WADN,2CAAX,sDDyBrBsJ,CAAqB9J,SAASoJ,MAoDrC,UACE,gBAACnC,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,2BACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO2B,EACPuH,SAAU,SAACZ,GAAD,OAAO+B,EAAS/B,EAAEa,OAAOnJ,UAErC,eAAC,GAAD,uBAIJ,gBAACoI,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,+BACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO+B,EACPmH,SAAU,SAACZ,GAAD,OAAOgC,EAAahC,EAAEa,OAAOnJ,UAEzC,eAAC,GAAD,uBAIJ,gBAACoI,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,+BACA,eAACX,GAAA,EAAK8C,MAAN,CACEC,IAAK,EACLC,IAAK,EACLpL,MAAOuK,EACPrB,SAAU,SAACZ,GAAD,OAAOkC,EAAalC,EAAEa,OAAOnJ,aAI3C,eAACoJ,GAAA,EAAD,CAAQN,UAAU,SAASG,KAAK,SAASI,QAAQ,YAAjD,0BAWJsB,GAAerB,aAAOF,KAAPE,CAAH,sDAIZW,GAAiBX,aAAOU,KAAWE,KAAlBZ,CAAH,iG,oBEnIP+B,GAAkB,SAAC5E,GAAD,gDAAW,WAAOkB,GAAP,UAAAa,EAAA,sDACxCb,EAASc,YAAa,oBAAbA,CAAkC,CAAEhC,WADL,2CAAX,uDCuPhB6E,GAzPK,WAClB,IAAM3D,EAAWC,cACjB,EAA4DC,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAAjFd,EAAR,EAAQA,QAAS9B,EAAjB,EAAiBA,cAAe6D,EAAhC,EAAgCA,aAAcC,EAA9C,EAA8CA,UAC9C,EAQImF,aAAY,SAAC7E,GAAD,OAAWA,EAAMkE,QAP/BpB,EADF,EACEA,cACAC,EAFF,EAEEA,gBACAC,EAHF,EAGEA,mBACAE,EAJF,EAIEA,0BACAD,EALF,EAKEA,kBACAE,EANF,EAMEA,yBACAC,EAPF,EAOEA,UAGF,EAAkC2B,mBAASjC,GAA3C,oBAAO/D,EAAP,KAAkBuI,EAAlB,KACA,EAAwCvC,mBAAShC,GAAjD,oBAAOwF,EAAP,KAAqBC,EAArB,KACA,EAA4CzD,mBAAS/B,GAArD,oBAAOyF,EAAP,KAAuBC,EAAvB,KACA,EAA0D3D,mBAAS7B,GAAnE,oBAAOyF,EAAP,KAA8BC,EAA9B,KACA,EAA0C7D,mBAAS9B,GAAnD,oBAAO4F,EAAP,KAAsBC,EAAtB,KACA,EAAwD/D,mBAAS5B,GAAjE,oBAAO4F,EAAP,KAA6BC,EAA7B,KAEMC,EAAgBC,mBAAQ,WAC5B,IAAIC,EAAO,EAKX,OAJA,YAAIzL,GAASuB,UAAUwB,SAAQ,SAACjC,EAAQ7C,GAClCA,EAAQ,IAAM,IAAGwN,GAAQ3K,EAAOI,YAG/BuK,IACN,CAACzL,IAEE0L,EAAeF,mBAAQ,WAC3B,IAAIC,EAAO,EAKX,OAJA,YAAIzL,GAASuB,UAAUwB,SAAQ,SAACjC,EAAQ7C,GAClCA,EAAQ,IAAM,IAAGwN,GAAQ3K,EAAOI,YAG/BuK,IACN,CAACzL,IAEE2L,EAAkBH,mBAAQ,WAK9B,OAHGhG,EAA4B,IAAQ+F,EAAgB,MACpD9F,EAA2B,IAAQiG,EAAe,QAGpD,CAAClG,EAA2BC,EAA0B8F,EAAeG,IAmBxE,OACE,uCACE,uCAEA,eAAC,GAAD,CACE/C,QAAuB,aAAdjD,EAA2B,UAAY,YAChDwE,QAAS,iBAAoB,aAAdxE,GAA4BuB,EAAS0D,GAAgB,cAFtE,sBAMA,eAAC,GAAD,CACEhC,QAAuB,eAAdjD,EAA6B,UAAY,YAClDwE,QAAS,iBAAoB,eAAdxE,GAA8BuB,EAAS0D,GAAgB,gBAFxE,wBAOA,gBAACjD,GAAA,EAAD,CAAMC,SAlCW,SAACC,GDhDc,IAAC9E,EAJDhE,ECqDlC8I,EAAEC,iBACgB,aAAdnC,GACFuB,ED3D6B,SAAC5F,GAAD,gDAAe,WAAO4F,GAAP,UAAAa,EAAA,sDAChDb,EAASc,YAAa,wBAAbA,CAAsC,CAAE1G,eADD,2CAAf,sDC2DpBuK,CAAoBC,WAAWxK,KACxC4F,GDxDgCnI,ECwDD+M,WAAWhB,GDxDX,yCAAY,WAAO5D,GAAP,UAAAa,EAAA,sDAC/Cb,EAASc,YAAa,2BAAbA,CAAyC,CAAEjJ,YADL,2CAAZ,yDCyDR,eAAd4G,GACTuB,GDtDiCnE,ECuDR,CACrBwC,mBAAoByF,EACpBvF,0BAA2ByF,EAC3B1F,kBAAmB4F,EACnB1F,yBAA0B4F,GD3DE,yCAAY,WAAOpE,GAAP,UAAAa,EAAA,sDAChDb,EAASc,YAAa,2BAAbA,CAAyC,CAAEjF,YADJ,2CAAZ,yDCkFhC,UACiB,aAAd4C,GACC,uCACE,iDACkB,IAChB,8BAEI1E,GACGhD,EAAQ+D,EAAe,EAAG7D,GACzB,IACCF,GAAS,EAAGE,GAAiB,KAC9B,GACA,IACFkH,EAAgB,IACJ,MAAZpD,GACE,KACJyF,QAAQ,KACP,IAdP,SAkBA,0CACU,8BAAMpC,EAAkB,IAAQrD,EAAY,OAAOyF,QAAQ,KADrE,UAIA,gBAACC,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,6BACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO+B,EACPmH,SAAU,SAACZ,GAAD,OAAOgC,EAAahC,EAAEa,OAAOnJ,UAEzC,eAAC,GAAD,uBAIJ,gBAACoI,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,gCACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAOuL,EACPrC,SAAU,SAACZ,GAAD,OAAOkD,EAAgBlD,EAAEa,OAAOnJ,UAE5C,eAAC,GAAD,0BAMO,eAAdoG,GACC,uCACE,eAACoG,GAAA,EAAD,CACEC,UAAU,QACVC,QACE,gBAACC,GAAA,EAAD,CAAS3K,GAAG,2BAAZ,kCACwBnC,KAAKyE,IAAI+H,GAAiBlE,QAAQ,GAD1D,MACiE,IAC9DkE,EAAkB,EAAI,UAAY,OAFrC,4BAHJ,SASE,gBAACO,GAAD,+BACmB,6BAAIP,EAAgBlE,QAAQ,KAD/C,YAKF,6BACE,8CAGF,iDACkB,IAChB,8BAEIzG,GACGhD,EAAQ+D,EAAe,EAAG7D,GACzB,IACCF,GAAS,EAAGE,GAAiB,KAC9B,GACA,IACFoH,EAAqB,IACpBiG,EAAgB,EAAK,OACpB,KACJ9D,QAAQ,KACP,IAdP,SAkBA,gBAACC,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,6BACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAOyL,EACPvC,SAAU,SAACZ,GAAD,OAAOoD,EAAkBpD,EAAEa,OAAOnJ,UAE9C,eAAC,GAAD,uBAIJ,gBAACoI,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,iCACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO2L,EACPzC,SAAU,SAACZ,GAAD,OAAOsD,EAAyBtD,EAAEa,OAAOnJ,UAErD,eAAC,GAAD,uBAIJ,6BACE,6CAGF,iDACkB,IAChB,8BAEI0B,GACGhD,EAAQ+D,EAAe,EAAG7D,GACzB,IACCF,GAAS,EAAGE,GAAiB,KAC9B,GACA,IACFqH,EAAoB,IACnBmG,EAAe,EAAK,OACnB,KACJjE,QAAQ,KACP,IAdP,SAkBA,gBAACC,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,6BACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO6L,EACP3C,SAAU,SAACZ,GAAD,OAAOwD,EAAiBxD,EAAEa,OAAOnJ,UAE7C,eAAC,GAAD,uBAIJ,gBAACoI,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,iCACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO+L,EACP7C,SAAU,SAACZ,GAAD,OAAO0D,EAAwB1D,EAAEa,OAAOnJ,UAEpD,eAAC,GAAD,0BAMR,eAACoJ,GAAA,EAAD,CAAQN,UAAU,SAASG,KAAK,SAASI,QAAQ,YAAjD,0BAUFY,GAAiBX,aAAOU,KAAWE,KAAlBZ,CAAH,iGAMdqB,GAAerB,aAAOF,KAAPE,CAAH,sDAIZsD,GAAYtD,KAAOuD,KAAV,8ECtOAC,GArCO,WACpB,IAAMnF,EAAWC,cAEThH,EAAWiH,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAAxCZ,OAEFmM,EAAqB,SAACnM,GAC1B+G,EPEwB,SAAC/G,GAAD,gDAAY,WAAO+G,GAAP,UAAAa,EAAA,sDACtCb,EAASc,YAAa,gBAAbA,CAA8B,CAAE7H,YADH,2CAAZ,sDOFfoM,CAAapM,KAGxB,OACE,uCACE,yCAEA,eAAC,GAAD,CACEyI,QAAoB,YAAXzI,EAAuB,UAAY,YAC5CgK,QAAS,kBAAMmC,EAAmB,YAFpC,qBAOA,eAAC,GAAD,CACE1D,QAAoB,iBAAXzI,EAA4B,UAAY,YACjDgK,QAAS,kBAAMmC,EAAmB,iBAFpC,4BAOA,eAAC,GAAD,CACE1D,QAAoB,iBAAXzI,EAA4B,UAAY,YACjDgK,QAAS,kBAAMmC,EAAmB,iBAFpC,gCAYApC,GAAerB,aAAOF,KAAPE,CAAH,6EC8BH2D,GArEe,WAC5B,IAAMtF,EAAWC,cAETxF,EAAoByF,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAAjDY,gBAER,EAA8B2F,mBAAS3F,GAAvC,oBAAOwB,EAAP,KAAgBsJ,EAAhB,KAEMC,EAAiB,SAACvJ,GACtB+D,ERJuC,SAAC/D,GAAD,gDAAa,WAAO+D,GAAP,UAAAa,EAAA,sDACtDb,EAASc,YAAa,iCAAbA,CAA+C,CAAE7E,aADJ,2CAAb,sDQI9BwJ,CAA4BxJ,KAGvC,OACE,uCACE,8BACE,eAAC4I,GAAA,EAAD,CACEC,UAAU,QACVC,QAAS,eAACC,GAAA,EAAD,kDAFX,SAIE,iEAIJ,eAAC,GAAD,CACEtD,QAAqB,OAAZzF,EAAmB,UAAgC,OAApBxB,EAA2B,OAAS,YAC5EwI,QAAS,kBAAMsC,EAAW,OAF5B,mBAOA,eAAC,GAAD,CACE7D,QAAqB,OAAZzF,EAAmB,UAAgC,OAApBxB,EAA2B,OAAS,YAC5EwI,QAAS,kBAAMsC,EAAW,OAF5B,mBAOA,eAAC,GAAD,CACE7D,QAAqB,MAAZzF,EAAkB,UAAgC,MAApBxB,EAA0B,OAAS,YAC1EwI,QAAS,kBAAMsC,EAAW,MAF5B,mBAOA,eAAC,GAAD,CACE7D,QAAqB,OAAZzF,EAAmB,UAAgC,OAApBxB,EAA2B,OAAS,YAC5EwI,QAAS,kBAAMsC,EAAW,OAF5B,oBAOA,eAAC,GAAD,CACE7D,QAAqB,OAAZzF,EAAmB,UAAgC,OAApBxB,EAA2B,OAAS,YAC5EwI,QAAS,kBAAMsC,EAAW,OAF5B,6BAOA,eAACG,GAAD,CACEvE,UAAU,cACVO,QAAQ,YACRuB,QAAS,kBAAMuC,EAAevJ,IAC9BkH,SAAU1I,IAAoBwB,EAJhC,uBAcA+G,GAAerB,aAAOF,KAAPE,CAAH,6EAKZ+D,GAAc/D,aAAOF,KAAPE,CAAH,+CClFJgE,GAAkB,CAC7B,CACEC,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,OAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,OAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,IACVE,kBAAmB,OAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,QAErB,CACE4N,KAAM,8BACN9N,SAAU,KACVE,kBAAmB,SCmHR6N,GAtPO,WACpB,IAAM7F,EAAWC,cACTrF,EAAmBsF,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAAhDe,eAER,EAAkCwF,mBAAS,GAA3C,oBAAOxI,EAAP,KAAkBkO,EAAlB,KACA,EAA4B1F,mBAAS,GAArC,oBAAOvI,EAAP,KAAekO,EAAf,KACA,EAAgC3F,mBAAS,GAAzC,oBAAOtI,EAAP,KAAiB2K,EAAjB,KACA,EAA8BrC,mBAAS,GAAvC,oBAAOnG,EAAP,KAAgB+L,EAAhB,KACA,EAAgC5F,mBAAS,GAAzC,oBAAO6F,EAAP,KAAiBC,EAAjB,KACA,EAAsB9F,mBAAS,GAA/B,oBAAO+F,EAAP,KAAYC,EAAZ,KACA,EAAsChG,mBAAS,QAA/C,oBAAOiG,EAAP,KAAoBC,EAApB,KACA,EAAwClG,mBAAS,WAAjD,oBAAOmG,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACJ7L,IACFkL,EAAalL,EAAehD,WAC5BmO,EAAUnL,EAAe/C,QACzB4K,EAAY7H,EAAe9C,UAC3BkO,EAAWpL,EAAeX,SAC1BiM,EAAYtL,EAAeH,iBAC3B2L,EAAOxL,EAAe5C,sBAEvB,CAAC4C,IA2DJ,OAAKA,EAGH,gBAAC6F,GAAA,EAAD,CAAMC,SA5Da,SAACC,GACpBA,EAAEC,iBAEF,IAAI8F,EAAe9B,WAAWhN,GAC5B+O,EAAY/B,WAAW/M,GACvB+O,EAAchC,WAAW9M,GACzB+O,EAAajC,WAAW3K,GAE1B,OAAQsM,GACN,IAAK,YACHG,EnBxB0B,SAAC7O,EAAQoC,EAASnC,GAA+C,IAArCC,EAAoC,uDAAhC,KAC1DE,GAD0F,uDAAN,IACvC,SAACH,EAAW,EAAM,GAAII,KAAKC,GAAKJ,EAAI,IACvF,OAAOG,KAAK4O,KAAgB,MAAV7M,EAAmBhC,IAAO,EAAIJ,GmBsB3BkP,CACblP,EAAS,IACToC,EACAnC,EAAW,IACXmO,EACa,IAAbA,EAAiBE,GAAoB,IAAdF,EAAkBI,EAAc,GAEzD,MACF,IAAK,SACHM,EAOM,InBnCiB,SAAC/O,EAAWqC,EAASnC,GAA+C,IAArCC,EAAoC,uDAAhC,KAC1DE,GAD0F,uDAAN,IACvC,SAACH,EAAW,EAAM,GAAII,KAAKC,GAAKJ,EAAI,IAEvF,OAAOG,KAAK4O,KAAgB,MAAV7M,EAAmBhC,IAAO,EAAIL,GmB0BxCoP,CACEpP,EACAqC,EACAnC,EAAW,IACXmO,EACa,IAAbA,EAAiBE,GAAoB,IAAdF,EAAkBI,EAAc,GAE3D,MACF,IAAK,WACHO,EAA+E,InBhCtD,SAAChP,EAAWC,EAAQoC,GAAuB,IAAdlC,EAAa,uDAAT,KAChE,OAA+F,EAAxFG,KAAK4O,KAAgB,MAAV7M,GAAoB,SAAC,EAAIpC,EAASD,EAAc,IAAKM,KAAKC,GAAKJ,EAAI,OmB+BjEkP,CAAkBrP,EAAWC,EAAS,IAAMoC,EAASgM,GACnE,MACF,IAAK,UACHY,EAAalP,EACXC,EACAC,EAAS,IACTC,EAAW,IACXmO,EACa,IAAbA,EAAiBE,GAAoB,IAAdF,EAAkBI,EAAc,GAM7D,IAAIxK,EAAS,CACXjE,UAAW8O,EACX7O,OAAQ8O,EACR7O,SAAU8O,EACV3M,QAAS4M,EACTpM,gBAAiBwL,GAGF,IAAbA,IAAgBpK,EAAM,2BAAQA,GAAR,IAAgB7D,kBAAmB4M,WAAWuB,OACtD,IAAdF,IAAiBpK,EAAM,2BAAQA,GAAR,IAAgB7D,kBAAmBqO,KAE9DrG,EVhFwB,SAACxE,EAAUK,GAAX,gDAAsB,WAAOmE,GAAP,UAAAa,EAAA,sDAChDb,EAASc,YAAa,gBAAbA,CAA8B,CAAEtF,WAAUK,YADH,2CAAtB,sDUgFfqL,CAAatM,EAAeP,GAAIwB,KAMzC,UACE,2CAAajB,EAAerC,KAA5B,OAEA,gBAACkI,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,wBACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAOT,EACP2J,SAAU,SAACZ,GAAD,OAAOmF,EAAanF,EAAEa,OAAOnJ,QACvC8K,SAA4B,cAAlBoD,IAEZ,eAAC,GAAD,iBACA,eAACY,GAAD,UACE,eAAC1G,GAAA,EAAK2G,MAAN,CACE9F,KAAK,QACL+F,QAA2B,cAAlBd,EACThF,SAAU,kBAAMiF,EAAe,cAC/BZ,KAAK,wBAMb,gBAACnF,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,qBACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAOR,EACP0J,SAAU,SAACZ,GAAD,OAAOoF,EAAUpF,EAAEa,OAAOnJ,QACpC8K,SAA4B,WAAlBoD,IAEZ,eAAC,GAAD,iBACA,eAACY,GAAD,UACE,eAAC1G,GAAA,EAAK2G,MAAN,CACE9F,KAAK,QACL+F,QAA2B,WAAlBd,EACThF,SAAU,kBAAMiF,EAAe,WAC/BZ,KAAK,wBAMZK,EAAW,GACV,gBAACxF,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,uBACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAOP,EACPyJ,SAAU,SAACZ,GAAD,OAAO8B,EAAY9B,EAAEa,OAAOnJ,QACtC8K,SAA4B,aAAlBoD,IAEZ,eAAC,GAAD,iBACA,eAACY,GAAD,UACE,eAAC1G,GAAA,EAAK2G,MAAN,CACE9F,KAAK,QACL+F,QAA2B,aAAlBd,EACThF,SAAU,kBAAMiF,EAAe,aAC/BZ,KAAK,wBAOf,gBAACnF,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,sBACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CACEC,KAAK,SACLjJ,MAAO4B,EACPsH,SAAU,SAACZ,GAAD,OAAOqF,EAAWrF,EAAEa,OAAOnJ,QACrC8K,SAA4B,YAAlBoD,IAEZ,eAAC,GAAD,iBACA,eAACY,GAAD,UACE,eAAC1G,GAAA,EAAK2G,MAAN,CACE9F,KAAK,QACL+F,QAA2B,YAAlBd,EACThF,SAAU,kBAAMiF,EAAe,YAC/BZ,KAAK,wBAMb,gBAACnF,GAAA,EAAKS,MAAN,CAAYC,UAAwB,IAAb8E,IAAgC,IAAdA,EAAkB,OAAS,OAApE,UACE,eAACxF,GAAA,EAAKW,MAAN,uBACA,gBAACX,GAAA,EAAK6G,OAAN,CACEjP,MAAO4N,EACP1E,SAAU,SAACZ,GAEa,MAAnBA,EAAEa,OAAOnJ,OAAoC,OAAnBsI,EAAEa,OAAOnJ,OAClB,aAAlBkO,GAEAC,EAAe,WAEjBN,EAAYtB,WAAWjE,EAAEa,OAAOnJ,SATpC,UAYE,yBAAQA,MAAO,KAAf,mBACA,yBAAQA,MAAO,KAAf,mBACA,yBAAQA,MAAO,IAAf,mBACA,yBAAQA,MAAO,KAAf,oBACA,yBAAQA,MAAO,KAAf,6BACA,yBAAQA,OAAQ,EAAhB,mCACA,yBAAQA,MAAO,EAAf,0BAIW,IAAd4N,GACC,gBAACxF,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,2BACA,eAACX,GAAA,EAAK6G,OAAN,CACEjP,MAAOgO,EACP9E,SAAU,SAACZ,GACT2F,EAAe1B,WAAWjE,EAAEa,OAAOnJ,SAHvC,SAMGsN,GAAgB/L,KAAI,SAAC2N,GACpB,OACE,yBAA6BlP,MAAOkP,EAAMvP,kBAA1C,SACGuP,EAAM3B,MADI2B,EAAMzP,kBASf,IAAbmO,GACC,gBAACxF,GAAA,EAAKS,MAAN,CAAYC,UAAU,OAAtB,UACE,eAACV,GAAA,EAAKW,MAAN,gDACA,gBAACiB,GAAA,EAAD,WACE,eAAC5B,GAAA,EAAKY,QAAN,CAAcC,KAAK,SAASjJ,MAAO8N,EAAK5E,SAAU,SAACZ,GAAD,OAAOyF,EAAOzF,EAAEa,OAAOnJ,UACzE,eAAC,GAAD,yBAKN,eAACoJ,GAAA,EAAD,CACEN,UAAU,SACVG,KAAK,SACLI,QAAQ,YACRyB,YAEKvL,GAA+B,cAAlB2O,KACb1O,GAA4B,WAAlB0O,KACVzO,GAA8B,aAAlByO,KACZtM,GAA6B,YAAlBsM,IATlB,sBAlJwB,MAuKxBjE,GAAiBX,aAAOU,KAAWE,KAAlBZ,CAAH,iGAMdwF,GAAiBxF,KAAOC,IAAV,sHCzNL4F,GAlCM,WACnB,OACE,gBAACC,GAAD,WACE,eAACC,GAAD,UACE,eAAC,GAAD,MAGF,eAACA,GAAD,UACE,eAAC,GAAD,MAGF,eAACA,GAAD,UACE,eAAC,GAAD,MAGF,eAACA,GAAD,UACE,eAAC,GAAD,MAGF,eAACA,GAAD,UACE,eAAC,GAAD,MAGF,eAACA,GAAD,UACE,eAAC,GAAD,MAGF,eAACA,GAAD,UACE,eAAC,GAAD,UAQFD,GAAgB9F,aAAOgG,KAAPhG,CAAH,oEAKb+F,GAAmB/F,KAAOC,IAAV,sD,SC+BPgG,GA/EF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,IAAK9H,EAAe,EAAfA,SACpBhD,EAAU+K,iBAAO,MACvB,EAAkC3H,mBAAS0H,GAA3C,oBAAOE,EAAP,KAAkBC,EAAlB,KA2BA,OAzBAxB,qBAAU,WACRzG,EAAS6B,GAAsB,CAAErH,EAAGwC,EAAQkL,QAAQ1N,IAAK2N,EAAGnL,EAAQkL,QAAQC,SAC3E,CAACnL,EAASgD,IAEbyG,qBAAU,WACR,IAAM5O,EAAsE,GAA7DK,KAAK4O,KAAK,SAACgB,EAAItN,EAAIqN,EAAMrN,EAAM,GAArB,SAA0BsN,EAAIK,EAAIN,EAAMM,EAAM,IACvEnI,EAAS8B,GAAuBjK,MAC/B,IAEH4O,qBAAU,WACR,GAAIqB,EAAIK,IAAMH,EAAUG,EAAG,CACzB,IAAMtQ,EAAsE,GAA7DK,KAAK4O,KAAK,SAACgB,EAAItN,EAAIqN,EAAMrN,EAAM,GAArB,SAA0BsN,EAAIK,EAAIN,EAAMM,EAAM,IACvEnI,EAAS8B,GAAuBjK,IAEhCmI,EACE6B,GAAsB,CACpBrH,EAAGwC,EAAQkL,QAAQ1N,IACnB2N,EAAGnL,EAAQkL,QAAQC,OAIvBF,EAAaH,MAEd,CAAC9K,EAASgD,EAAU8H,IAGrB,uCACE,eAAC,KAAD,CACEM,OAAO,QACPC,YAAa,EACbC,SAAS,QACTC,UAAW,SAACC,EAAShL,GAAW,IAAD,IAC7BgL,EAAQC,YACRD,EAAQE,OAAOb,EAAMrN,EAAGqN,EAAMM,GAC9BK,EAAQG,iBAAR,UAAyB3L,EAAQkL,eAAjC,aAAyB,EAAiB1N,IAA1C,UAA+CwC,EAAQkL,eAAvD,aAA+C,EAAiBC,IAAKL,EAAItN,EAAGsN,EAAIK,GAChFK,EAAQI,OAAOd,EAAItN,EAAGsN,EAAIK,EAAI,IAC9BK,EAAQI,OAAOf,EAAMrN,EAAI,IAAKqN,EAAMM,GACpCK,EAAQK,YACRL,EAAQM,gBAAgBtL,MAI5B,eAAC,KAAD,CACEuL,IAAK/L,EACLxC,GAAIqN,EAAMrN,EAAIsN,EAAItN,GAAK,EACvB2N,GAAIN,EAAMM,EAAIL,EAAIK,GAAK,EACvBa,OAAQ,GACRZ,OAAO,OACPa,KAAK,OACLZ,YAAa,EACba,WAAS,EACTC,aAAc,WACZC,SAASC,KAAKvK,MAAMwK,OAAS,UAC7BC,KAAKlB,YAAY,IAEnBmB,aAAc,WACZJ,SAASC,KAAKvK,MAAMwK,OAAS,UAC7BC,KAAKlB,YAAY,IAEnBoB,WAAY,WACVF,KAAK/O,GAAGqN,EAAMrN,EAAIsN,EAAItN,GAAK,IAE7BkP,UAAW,WACT1J,EACE6B,GAAsB,CACpBrH,EAAG+O,KAAK/O,IACR2N,EAAGoB,KAAKpB,cCvBPwB,GA/CA,SAAC,GAA8C,IAA5C9B,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,IAAK8B,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,KAAuB,IAAjB7P,aAAiB,MAAT,GAAS,EAG3D,MAAc,YAFIkG,aAAY,SAAC7E,GAAD,OAAWA,EAAMiE,UAAvC9B,MAIJ,eAAC,KAAD,CACE4K,OAAO,QACPC,YAAa,EACbyB,QAAQ,QACRvB,UAAW,SAACC,EAAShL,GACnBgL,EAAQC,YACRD,EAAQE,OAAOb,EAAMrN,EAAGqN,EAAMM,GAC9BK,EAAQG,kBACLd,EAAMrN,EAAIsN,EAAItN,GAAK,EAAI,KACvBqN,EAAMM,EAAIL,EAAIK,GAAK,EACpBL,EAAItN,EACJsN,EAAIK,EAAI,IAEVK,EAAQE,OAAOkB,EAAOpP,EAAGoP,EAAOzB,GAChCK,EAAQG,kBACLiB,EAAOpP,EAAIqP,EAAKrP,GAAK,EAAI,KACzBoP,EAAOzB,EAAI0B,EAAK1B,GAAK,EACtB0B,EAAKrP,EACLqP,EAAK1B,EAAI,IAEXK,EAAQM,gBAAgBtL,IAE1B2D,UAAU,WAMd,eAAC,KAAD,CACE3G,EAAG,EACH2N,EAAG,EACH4B,OAAQ,CAAClC,EAAMrN,EAAGqN,EAAMM,EAAGL,EAAItN,EAAGsN,EAAIK,EAAGL,EAAItN,EAAIR,EAAO8N,EAAIK,EAAGN,EAAMrN,EAAIR,EAAO6N,EAAMM,GACtFC,OAAO,QACPC,YAAa,EACb2B,QAAM,EACN1B,SAAS,QACTwB,QAAQ,QACR3I,UAAU,YCgFD8I,GAzHF,SAAC,GAAyC,IAAvCpC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,IAAKjN,EAA0B,EAA1BA,QAASqP,EAAiB,EAAjBA,WACnC,EAAuEhK,aACrE,SAAC7E,GAAD,OAAWA,EAAMxB,UADXd,EAAR,EAAQA,QAAS4B,EAAjB,EAAiBA,qBAAsB1D,EAAvC,EAAuCA,cAAe6D,EAAtD,EAAsDA,aAG9CkC,EAAYkD,aAAY,SAAC7E,GAAD,OAAWA,EAAMgE,cAAzCrC,QACAQ,EAAU0C,aAAY,SAAC7E,GAAD,OAAWA,EAAMiE,UAAvC9B,MAER,OACE,qCACGR,GACC,qCACE,eAAC,KAAD,CACExC,EAAG,EACH2N,EAAG,EACHlO,QAAS,GACT8P,OAAM,CACJlC,EAAMrN,EACI,aAAVgD,EAAuBqK,EAAMM,EAAIN,EAAMM,EAAI,IAFvC,mBAGDgC,GACDpR,EACA4B,EACAzD,GAAS,EAAG2D,EAASqP,GACrBlN,EAAQmL,EACRL,EAAIK,EACJlR,GACC,GACD6D,IAXE,CAaJgN,EAAItN,EACJsN,EAAIK,EAAI,GACRL,EAAItN,EAAI,GACRsN,EAAIK,EACJL,EAAItN,EACJsN,EAAIK,EAAI,GACRL,EAAItN,EACJsN,EAAIK,GApBA,YAqBDiC,GACDrR,EACA4B,EACAzD,GAAS,EAAG2D,EAASqP,GACrBlN,EAAQmL,EACRL,EAAIK,EACJlR,EACA,GACA6D,IA7BE,CA+BJ+M,EAAMrN,EACNqN,EAAMM,EAAI,KAEZC,OAAO,QACPC,YAAa,EACbyB,QAAQ,QACR3I,UAAU,cAuEhBkJ,GAAa,SAACC,EAAezC,EAAO7K,EAAS8K,EAAK7Q,EAAewC,EAAQqB,GAM7E,OALewP,EAAc1Q,KAAI,SAAC/B,EAAQb,GACxC,IAAMuT,EAAOlT,GAAiBL,EAAQ,IAAM8D,EAAe,GAAI+M,EAAO7K,EAAS8K,GAC/E,MAAO,CAAC/Q,EAAQC,EAAOC,GAAgBsT,EAAgB,GAAT1S,EAAe4B,OAmB3D2Q,GAAmB,SACvBrR,EACAuR,EACAzC,EACA7K,EACA8K,EACA7Q,EACAwC,EACAqB,GAEA,IAAMiP,EAASM,GACbtR,EAAQa,KAAI,SAACC,GAAD,OAAYA,EAAOhC,UAC/BgQ,EACA7K,EACA8K,EACA7Q,EACAwC,EACAqB,GAEI0P,EAAgBH,GACpBC,EACAzC,EACA7K,EACA8K,EACA7Q,EACAwC,EACAqB,GAEI2P,EAAU,GAWhB,OATAV,EAAOjO,SAAQ,SAAC4O,EAAO1T,GACrB,IAAM2T,EAAmB5R,EAAQ/B,GAAOa,OAASyS,EAActT,GAC3DA,EAAQ,IAAM,GAAK2T,GAAoB,GACzCF,EAAQ/N,KAAK8N,EAAcxT,KAClBA,EAAQ,IAAM,GAAK2T,GAAoB,KAChDF,EAAQ/N,KAAKgO,MAIVD,EAAQnQ,UAAUsQ,QAGrBT,GAAgB,SACpBpR,EACAuR,EACAzC,EACA7K,EACA8K,EACA7Q,EACAwC,EACAqB,GAEA,IAAMiP,EAASM,GACbtR,EAAQa,KAAI,SAACC,GAAD,OAAYA,EAAOhC,UAC/BgQ,EACA7K,EACA8K,EACA7Q,EACAwC,EACAqB,GAEI0P,EAAgBH,GACpBC,EACAzC,EACA7K,EACA8K,EACA7Q,EACAwC,EACAqB,GAEI2P,EAAU,GAWhB,OATAV,EAAOjO,SAAQ,SAAC4O,EAAO1T,GACrB,IAAM2T,EAAmB5R,EAAQ/B,GAAOa,OAASyS,EAActT,GAC3DA,EAAQ,IAAM,GAAK2T,EAAmB,GACxCF,EAAQ/N,KAAK8N,EAAcxT,KAClBA,EAAQ,IAAM,GAAK2T,EAAmB,KAC/CF,EAAQ/N,KAAKgO,MAIVD,EAAQG,QC5MFC,GAvBA,SAAC,GAA8C,IAA5ChD,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,IAAKjO,EAA+B,EAA/BA,OAA+B,IAAvBuO,cAAuB,MAAd,QAAc,EACnDpJ,EAAoBkB,aAAY,SAAC7E,GAAD,OAAWA,EAAMmE,YAAjDR,gBAER,OACE,uCACE,eAAC,KAAD,CACEoJ,OAA4B,UAApBpJ,GAA0C,UAAXoJ,EAAqB,SAAWA,EACvEC,YAAa,EACbyB,QAAQ,QACRjQ,OAAQA,EACR0O,UAAW,SAACC,EAAShL,GACnBgL,EAAQC,YACRD,EAAQE,OAAOb,EAAMrN,EAAGqN,EAAMM,GAC9BK,EAAQI,OAAOd,EAAItN,EAAGsN,EAAIK,EAAI,IAC9BK,EAAQM,gBAAgBtL,MAG5B,eAAC,KAAD,CAAQhD,EAAGsN,EAAItN,EAAG2N,EAAGL,EAAIK,GAAK,EAAGC,OAAO,OAAOY,OAAQ,EAAG8B,WAAW,IACrE,eAAC,KAAD,CAAQtQ,EAAGsN,EAAItN,EAAG2N,EAAGL,EAAIK,EAAI,IAAM,EAAGC,OAAO,OAAOY,OAAQ,EAAG8B,WAAW,QCiGjEC,GAlHM,SAAC,GAAgC,IAA9BlQ,EAA6B,EAA7BA,QAASb,EAAoB,EAApBA,MAAO5C,EAAa,EAAbA,OACtC,EAAiD8I,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UAAtEd,EAAR,EAAQA,QAAS9B,EAAjB,EAAiBA,cAAe6D,EAAhC,EAAgCA,aACxBkC,EAAYkD,aAAY,SAAC7E,GAAD,OAAWA,EAAMgE,cAAzCrC,QAEFgO,EAAiBzG,mBAAQ,WAC7B,IAAIgG,EAAO,IAcX,OAZAxR,EAAQ+C,SAAQ,SAACjC,EAAQ7C,GACvB,IAOMiU,EAPmB5T,GACtBL,EAAQ,IAAM8D,EAAe,GAC9B5D,GAAS,EAAG2D,EAASzD,GAFiB,OAGtC4F,QAHsC,IAGtCA,OAHsC,EAGtCA,EAASmL,EACTjR,EAAQ4D,EAAe,EAAGD,EAASzD,IAGmB,GAAhByC,EAAOhC,OAC3CoT,EAAeV,IAAMA,EAAOU,MAG3BV,IACN,CAACxR,EAAS8B,EAASmC,EAASlC,EAAc1D,IAE7C,OACE,uCACE,eAAC,KAAD,CACE2S,OAAQ,CACNhT,GAAS,EAAGE,GAAiB,IAC5B+T,EAAiB9T,GAAS,EAAG2D,EAASzD,IAAW,EAAI,GACtDL,GAAS,EAAGE,GAAiB,GAC7B+T,EAAiB,IAEnB5C,OAAO,SAGT,eAAC,KAAD,CACE2B,OAAQ,CACNhT,GAAS,EAAGE,GAAiB,IAC5B+T,EAAiB9T,GAAS,EAAG2D,EAASzD,IAAW,EAAI,GACtDL,GAAS,EAAGE,GAAiB,GAC7BC,GAAS,EAAG2D,EAASzD,IAEvBgR,OAAO,SAGT,gBAAC,KAAD,CACE5N,EAAGzD,GAAS,EAAGE,GAAiB,GAChCkR,GAAI6C,EAAiB9T,GAAS,EAAG2D,EAASzD,IAAW,EAAI,GACzD0T,WAAW,EAHb,UAKE,eAAC,KAAD,CACE7B,KAAK,QACLiC,iBAAiB,KACjBC,aAAc,EACdC,cAAe,EACf9C,SAAS,UAEX,eAAC,KAAD,CACE+C,KAAMnT,KAAKoT,MAAOlU,EAAS,GAAO,KAAO,IAAM,MAC/CmU,SAAU,GACVC,QAAS,EACTvC,KAAK,aAIT,eAAC,KAAD,CACEc,OAAQ,CACNhT,GAAS,EAAGE,IACTF,EAAQ+D,EAAe,EAAG7D,GAAiBF,GAAS,EAAGE,IAAkB,EAC1E,GACF+T,EAAiB,GACjBjU,EAAQ+D,EAAe,EAAG7D,GAAiB,GAC3C+T,EAAiB,IAEnB5C,OAAO,SAGT,eAAC,KAAD,CACE2B,OAAQ,CACNhT,GAAS,EAAGE,IACTF,EAAQ+D,EAAe,EAAG7D,GAAiBF,GAAS,EAAGE,IAAkB,EAC1E,IACF+T,EAAiB,GACjBjU,GAAS,EAAGE,GAAiB,GAC7B+T,EAAiB,IAEnB5C,OAAO,SAGT,gBAAC,KAAD,CACE5N,EACEzD,GAAS,EAAGE,IACXF,EAAQ+D,EAAe,EAAG7D,GAAiBF,GAAS,EAAGE,IAAkB,EAE5EkR,EAAG6C,EAAiB,GACpBF,WAAW,EANb,UAQE,eAAC,KAAD,CACE7B,KAAK,QACLiC,iBAAiB,QACjBC,aAAc,EACdC,cAAe,EACf9C,SAAS,UAEX,eAAC,KAAD,CACE+C,KAAMnT,KAAKoT,MAAOtR,EAAQ,GAAO,KAAO,IAAM,MAC9CuR,SAAU,GACVC,QAAS,EACTvC,KAAK,iBC0OAwC,GAtUF,WACX,IAAMzL,EAAWC,cAEjB,EACEC,aAAY,SAAC7E,GAAD,OAAWA,EAAMxB,UADvBd,EAAR,EAAQA,QAAS4B,EAAjB,EAAiBA,qBAAsB1D,EAAvC,EAAuCA,cAAe6D,EAAtD,EAAsDA,aAAcC,EAApE,EAAoEA,UAAWF,EAA/E,EAA+EA,QAE/E,EAAwDqF,aAAY,SAAC7E,GAAD,OAAWA,EAAMgE,cAA7EtC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,oBAAqBpF,EAA7C,EAA6CA,OAC7C,EAAgFqI,aAC9E,SAAC7E,GAAD,OAAWA,EAAMiE,UADX1B,EAAR,EAAQA,eAAgBJ,EAAxB,EAAwBA,MAAOC,EAA/B,EAA+BA,eAAgBC,EAA/C,EAA+CA,YAAaC,EAA5D,EAA4DA,gBAG5D,EAQIuC,aAAY,SAAC7E,GAAD,OAAWA,EAAMkE,QAP/Bd,EADF,EACEA,UACAN,EAFF,EAEEA,cACAC,EAHF,EAGEA,gBACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,kBACAC,EANF,EAMEA,0BACAC,EAPF,EAOEA,yBAGF,EAA0B4B,mBACxBrJ,EAAQ+D,EAAe,EAAG7D,GAAiB,IAAMF,GAAS,EAAGE,GAAiB,KADhF,oBAAO+C,EAAP,KAAc0I,EAAd,KAGA,EAA4BtC,mBAAS,QAAU,KAA/C,oBAAOhJ,EAAP,KAAesU,EAAf,KAEMC,EAAU5D,iBAAO,MAEjBzD,EAAgBC,mBAAQ,WAC5B,IAAIC,EAAO,EAKX,OAJA,YAAIzL,GAASuB,UAAUwB,SAAQ,SAACjC,EAAQ7C,GAClCA,EAAQ,IAAM,IAAGwN,GAAQ3K,EAAOI,YAG/BuK,IACN,CAACzL,IAEE0L,EAAeF,mBAAQ,WAC3B,IAAIC,EAAO,EAKX,OAJA,YAAIzL,GAASuB,UAAUwB,SAAQ,SAACjC,EAAQ7C,GAClCA,EAAQ,IAAM,IAAGwN,GAAQ3K,EAAOI,YAG/BuK,IACN,CAACzL,IAEE2L,EAAkBH,mBAAQ,WAK9B,OAHGhG,EAA4B,IAAQ+F,EAAgB,MACpD9F,EAA2B,IAAQiG,EAAe,QAGpD,CAAClG,EAA2BC,EAA0B8F,EAAeG,IAcxE,OAZAgC,qBAAU,WACRzG,EjB/CyB,SAACnF,GAAD,gDAAa,WAAOmF,GAAP,UAAAa,EAAA,sDACxCb,EAASc,YAAa,kBAAbA,CAAgC,CAAEjG,aADH,2CAAb,sDiB+ChB+Q,C1BwBmB,SAAC7O,EAAO9F,GACtC,IAAM4U,EAAW9O,EAAQ7E,KAAKC,GAAM,IACpC,OAAOlB,EAAgBiB,KAAK4T,IAAID,G0B1BPE,CAAiBhP,EAAO9F,OAC9C,CAAC8F,EAAO9F,EAAe+I,IAE1ByG,qBAAU,WACR/D,EAAS3L,EAAQ+D,EAAe,EAAG7D,GAAiB,IAAMF,GAAS,EAAGE,GAAiB,OACtF,CAAC6D,EAAc7D,IAElBwP,qBAAU,WACRiF,EAAoC,IAA1B/Q,EAAqB,MAC9B,CAACA,IAGF,eAAC,KAAD,CAAOX,MAAOA,EAAQ,IAAK5C,OAAQA,EAAS,IAA5C,SACE,gBAAC,IAAD,CAAUuI,MAAOA,EAAjB,UACE,gBAAC,KAAD,CACEsD,QAAS,SAACtC,GACRgL,EAAQzD,QAAQ9K,SAAS,CACvB5C,EAAGmG,EAAEqL,IAAIC,OACT9D,EAAGxH,EAAEqL,IAAIE,OAAS,IAEa,SAA7BvL,EAAEa,OAAO2K,MAAMhL,UACC,aAAd1C,EACFkN,EAAQzD,QACLkE,UACAf,KAFH,8BAG2B5M,EAH3B,8BAIM1E,GACGhD,EAAQ+D,EAAe,EAAG7D,GACzB,IACCF,GAAS,EAAGE,GAAiB,KAC9B,GACA,IACFkH,EAAgB,IACJ,MAAZpD,GACE,KACJyF,QAAQ,GAbd,0BAcOpC,EAAkB,IACnBrD,EACA,OACAyF,QACA,GAlBN,iCAmB8BrC,EAnB9B,mCAmBsEC,EAnBtE,QAsBAuN,EAAQzD,QACLkE,UACAf,KAFH,8BAG2B5M,EAH3B,+BAG2DiG,EAAgBlE,QACrE,GAJN,gDAMMzG,GACGhD,EAAQ+D,EAAe,EAAG7D,GACzB,IACCF,GAAS,EAAGE,GAAiB,KAC9B,GACA,IACFoH,EAAqB,IACpBiG,EAAgB,EAAK,OACpB,KACJ9D,QACA,GAhBN,iCAiB8BnC,EAjB9B,oCAiB4EE,EAjB5E,8CAkBMxE,GACGhD,EAAQ+D,EAAe,EAAG7D,GACzB,IACCF,GAAS,EAAGE,GAAiB,KAC9B,GACA,IACFqH,EAAoB,IACnBmG,EAAe,EAAK,OACnB,KACJjE,QACA,GA5BN,iCA6B8BlC,EA7B9B,oCA6B2EE,EA7B3E,QAgCoC,WAA7BmC,EAAEa,OAAO2K,MAAMhL,YACV,aAAV3D,EACFmO,EAAQzD,QACLkE,UACAf,KAFH,wCAImB,GAAZtQ,EAAkB,MACnBb,EAAwCuD,GACxC,KACA+C,QAAQ,GAPd,kCAO0C/C,EAP1C,QAUAkO,EAAQzD,QACLkE,UACAf,KAFH,wCAImB,GAAZtQ,EAAkB,MACnBZ,EAAiCuD,EAAaC,GAC9C,KACA6C,QACA,GARN,+BAS4B9C,EAT5B,kCASiEC,EATjE,SAcJgO,EAAQzD,QAAQmE,QAElBC,YAAa,SAAC3L,GACZyI,SAASC,KAAKvK,MAAMwK,OAAS,UAC7B3I,EAAEa,OAAO6G,YAAY,IAEvBkE,WAAY,SAAC5L,GACXyI,SAASC,KAAKvK,MAAMwK,OAAS,UAC7B3I,EAAEa,OAAO6G,YAAY,GACrBsD,EAAQzD,QAAQsE,QAjGpB,UAoGE,eAAC,GAAD,CACE3E,MAAO,CAAErN,EAAGzD,GAAS,EAAGE,GAAgBkR,EAAGjR,GAAS,EAAG2D,EAASzD,IAChE0Q,IAAK,CACHtN,EAAGzD,GAAS,EAAGE,GACfkR,EAAGjR,GAAS,EAAG2D,EAASzD,GAAoC,IAA1BuD,EAAqB,IAEzDiP,OAAQ,CACNpP,EAAGzD,GAAS,EAAGE,GACfkR,EAAG9Q,EACD,GAAKyD,EAAe,GACpB5D,GAAS,EAAG2D,EAASzD,GAFL,OAGhB4F,QAHgB,IAGhBA,OAHgB,EAGhBA,EAASmL,EACTjR,EAAQ4D,EAAe,EAAGD,EAASzD,KAGvCyS,KAAM,CACJrP,EAAGzD,EAAQ6G,EAAgB3G,GAC3BkR,EACE9Q,GACG,EAAIuG,IAAmB9C,EAAe,GACvC5D,GAAS,EAAG2D,EAASzD,GAFR,OAGb4F,QAHa,IAGbA,OAHa,EAGbA,EAASmL,EACTjR,EAAQ4D,EAAe,EAAGD,EAASzD,IAEJ,GAAjC2B,EAAQ6E,GAAgB/F,UAI9B,eAAC,GAAD,CACEgQ,MAAO,CACLrN,EAAGzD,GAAS,EAAGE,GACfkR,EAAGjR,GAAS,EAAG2D,EAASzD,GAAoC,IAA1BuD,EAAqB,IAEzDmN,IAAK,CACHtN,EAAGzD,EAAQ+D,EAAe,EAAG7D,GAC7BkR,EAAGjR,EAAQ4D,EAAe,EAAGD,EAASzD,IAExCyD,QAASA,EACTqP,WAAY9S,OAIhB,eAAC,KAAD,CACE6L,QAAS,SAACtC,GjBpOQ,IAACnF,EiBqOjBwE,GjBrOiBxE,EiBqOKmF,EAAEa,OAAO2K,MAAMtS,OAAOQ,GjBrO5B,yCAAc,WAAO2F,GAAP,UAAAa,EAAA,sDACxCb,EAASc,YAAa,gBAAbA,CAA8B,CAAEtF,cADD,2CAAd,yDiBuOlB8Q,YAAa,SAAC3L,GACZ,IAAM9G,EAAS8G,EAAEa,OAAO2K,MAAMtS,OAC9BuP,SAASC,KAAKvK,MAAMwK,OAAS,UAC7B3I,EAAEa,OAAO6G,YAAY,GACrBsD,EAAQzD,QACLkE,UACAf,KAFH,qBAGkBxR,EAAOjC,UAHzB,wBAGkDiC,EAAOhC,OAHzD,0BAGiF4U,OAC3E5S,EAAO/B,UACP0I,QAAQ,GALd,yBAKiC3G,EAAOI,QAAQuG,QAAQ,GALxD,QAOAmL,EAAQzD,QAAQ9K,SAAS,CACvB5C,EAAGmG,EAAEqL,IAAIC,OACT9D,EAAGxH,EAAEqL,IAAIE,OAAS,IAEpBP,EAAQzD,QAAQmE,QAElBE,WAAY,SAAC5L,GACXyI,SAASC,KAAKvK,MAAMwK,OAAS,UAC7B3I,EAAEa,OAAO6G,YAAY,GACrBsD,EAAQzD,QAAQsE,QAxBpB,SA2BGzT,EAAQa,KAAI,SAACC,EAAQ7C,GACpB,IAAMuT,EAAOlT,GACVL,EAAQ,IAAM8D,EAAe,GAC9B5D,GAAS,EAAG2D,EAASzD,GAFK,OAG1B4F,QAH0B,IAG1BA,OAH0B,EAG1BA,EAASmL,EACTjR,EAAQ4D,EAAe,EAAGD,EAASzD,IAGrC,OACE,eAAC,GAAD,CAEEyQ,MAAO,CACLrN,EAAGzD,EAAQC,EAAOC,GAClBkR,EAAGoC,GAELzC,IAAK,CACHtN,EAAGzD,EAAQC,EAAOC,GAClBkR,EAAGoC,EAAuB,GAAhB1Q,EAAOhC,QAEnBgC,OAAQA,EACRuO,OAC4B,MAA1BvO,EAAOtB,KAAKG,OAAO,IAAqC,IAAvBmB,EAAOtB,KAAKV,OACzC,MAC0B,MAA1BgC,EAAOtB,KAAKG,OAAO,IAAqC,IAAvBmB,EAAOtB,KAAKV,OAC7C,OACA,SAfDgC,EAAOQ,SAsBpB,eAAC,KAAD,CACE4I,QAAS,SAACtC,GACRgL,EAAQzD,QAAQ9K,SAAS,CACvB5C,EAAGmG,EAAEqL,IAAIC,OACT9D,EAAGxH,EAAEqL,IAAIE,OAAS,IAEpBP,EAAQzD,QACLkE,UACAf,KAFH,oCAGiCtO,EAHjC,iDAIMhD,EACElC,EAAS,IACToF,EAAsB,IACV,GAAZlC,EAAkB,OAChB,KACJyF,QAAQ,GATd,wCASgDvD,EAThD,QAWA0O,EAAQzD,QAAQmE,QAElBC,YAAa,SAAC3L,GACZyI,SAASC,KAAKvK,MAAMwK,OAAS,UAC7B3I,EAAEa,OAAO6G,YAAY,IAEvBkE,WAAY,SAAC5L,GACXyI,SAASC,KAAKvK,MAAMwK,OAAS,UAC7B3I,EAAEa,OAAO6G,YAAY,GACrBsD,EAAQzD,QAAQsE,QA1BpB,SA6BE,eAAC,GAAD,CACE3E,MAAO,CAAErN,EAAGzD,GAAS,EAAGE,GAAgBkR,EAAGjR,GAAS,EAAG2D,EAASzD,IAChE0Q,IAAK,CACHtN,EAAGzD,EAAQ+D,EAAe,EAAG7D,GAC7BkR,EAAGjR,EAAQ4D,EAAe,EAAGD,EAASzD,IAExC4I,SAAUA,MAId,gBAAC,KAAD,WACE,eAAC,GAAD,CAAcnF,QAASA,EAASb,MAAOA,EAAO5C,OAAQA,IAEtD,gBAAC,KAAD,CAAOsV,QAAS,GAAKC,SAAS,EAAO7B,WAAW,EAAO/B,IAAK4C,EAASiB,QAAS,IAA9E,UACE,eAAC,KAAD,CACE3D,KAAK,QACLiC,iBAAiB,OACjBC,aAAc,GACdC,cAAe,GACf9C,SAAS,UAEX,eAAC,KAAD,CAAM+C,KAAK,GAAGE,SAAU,GAAIC,QAAS,EAAGvC,KAAK,sBChV5C4D,GAAwB,SAAC3N,GAAD,gDAAW,WAAOc,GAAP,UAAAa,EAAA,sDAC9Cb,EAASc,YAAa,0BAAbA,CAAwC,CAAE5B,WADL,2CAAX,uD,cCyCtB4N,OAhCf,WACE,IAAM9M,EAAWC,cAETjB,EAAoBkB,aAAY,SAAC7E,GAAD,OAAWA,EAAMmE,YAAjDR,gBAER,OACE,gBAAC+N,GAAD,CAAc5L,UAAU,MAAMnC,gBAAiBA,EAA/C,UACE,eAACgO,EAAA,EAAD,CAAQ7L,UAAU,OAAO8L,GAAG,OAAOvL,QAAQ,OAA3C,SACE,gBAACiG,GAAA,EAAD,WACE,eAACqF,EAAA,EAAOE,MAAR,4BACA,gBAACC,GAAA,EAAD,CAAaC,MAAO,eAACC,GAAD,+BAApB,UACE,eAACC,GAAD,CAAkBrK,QAAS,kBAAMjD,EAAS6M,GAAsB,eAAhE,SACE,eAACU,GAAD,CAAgBrO,MAAM,gBAExB,eAACoO,GAAD,CAAkBrK,QAAS,kBAAMjD,EAAS6M,GAAsB,WAAhE,SACE,eAACU,GAAD,CAAgBrO,MAAM,oBAK9B,gBAACsO,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAKC,GAAI,EAAT,SACE,eAAC,GAAD,MAEF,eAACC,GAAD,CAAiBD,GAAI,EAArB,SACE,eAAC,GAAD,aASJX,GAAepL,KAAOC,IAAV,sDACI,SAACgM,GAAD,OAAWA,EAAM5O,mBAGjCqO,GAAgB1L,KAAOuD,KAAV,6CAIboI,GAAmB3L,aAAOwL,KAAYU,KAAnBlM,CAAH,kGAMhB4L,GAAiB5L,KAAOC,IAAV,oIAKE,SAACgM,GAAD,OAAWA,EAAM1O,SAGjCyO,GAAkBhM,aAAO8L,KAAP9L,CAAH,iDCvDNmM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,eAAC,IAAD,CAAU7O,MAAOA,EAAjB,SACE,eAAC,GAAD,MAEFyJ,SAASqF,eAAe,SAM1BX,O","file":"static/js/main.5fa63183.chunk.js","sourcesContent":["export const stringX = (index, stringSpacing) => {\r\n  return index * stringSpacing + 200;\r\n};\r\n\r\nexport const stringY = (index, scale, height = 600) => {\r\n  return height - index * scale;\r\n};\r\n\r\nexport function getQBezierValue(t, p1, p2, p3) {\r\n  var iT = 1 - t;\r\n  return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;\r\n}\r\n\r\nexport const calculateTension = (frequency, length, diameter, p = 1.14, linearMassDensity = 0) => {\r\n  const mu = linearMassDensity ? linearMassDensity : (diameter / 2) ** 2 * Math.PI * p * 1000;\r\n  return ((2 * length * frequency) ** 2 * mu) / 9.807;\r\n};\r\n\r\nexport const calculateFrequency = (length, tension, diameter, p = 1.14, linearMassDensity = 0) => {\r\n  const mu = linearMassDensity ? linearMassDensity : (diameter / 2) ** 2 * Math.PI * p * 1000;\r\n  return Math.sqrt((tension * 9.807) / mu) / (2 * length);\r\n};\r\n\r\nexport const calculateLength = (frequency, tension, diameter, p = 1.14, linearMassDensity = 0) => {\r\n  const mu = linearMassDensity ? linearMassDensity : (diameter / 2) ** 2 * Math.PI * p * 1000;\r\n\r\n  return Math.sqrt((tension * 9.807) / mu) / (2 * frequency);\r\n};\r\n\r\nexport const calculateDiameter = (frequency, length, tension, p = 1.14) => {\r\n  return Math.sqrt((tension * 9.807) / ((2 * length * frequency) ** 2 * (Math.PI * p * 1000))) * 2;\r\n};\r\n\r\nexport const inchToMeter = (value) => {\r\n  return (value * 2.54) / 100;\r\n};\r\n\r\nexport const getFrequency = function (note) {\r\n  const notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'];\r\n  let octave, keyNumber;\r\n\r\n  if (note.length === 3) {\r\n    octave = note.charAt(2);\r\n  } else {\r\n    octave = note.charAt(1);\r\n  }\r\n\r\n  keyNumber = notes.indexOf(note.slice(0, -1));\r\n\r\n  if (keyNumber < 3) {\r\n    keyNumber = keyNumber + 12 + (octave - 1) * 12 + 1;\r\n  } else {\r\n    keyNumber = keyNumber + (octave - 1) * 12 + 1;\r\n  }\r\n\r\n  // Return frequency of note\r\n  return 440 * Math.pow(2, (keyNumber - 49) / 12);\r\n};\r\n\r\nexport const addNoteName = (strings, lowestNote = 'C2', tuning = 'C Major') => {\r\n  const cMajorNotes = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];\r\n  const eFlatMajorNotes = ['C', 'D', 'D#', 'F', 'G', 'G#', 'A#'];\r\n  const aFlatMajorNotes = ['C', 'C#', 'D#', 'F', 'G', 'G#', 'A#'];\r\n\r\n  const notes =\r\n    tuning === 'C Major'\r\n      ? cMajorNotes\r\n      : tuning === 'E Flat Major'\r\n      ? eFlatMajorNotes\r\n      : aFlatMajorNotes;\r\n\r\n  const lowestNoteName = lowestNote.charAt(0);\r\n  const lowestNoteNumber = parseInt(lowestNote.charAt(lowestNote.length - 1));\r\n  const offset = lowestNoteName.charCodeAt(0) - 'C'.charCodeAt(0);\r\n\r\n  const stringsWithNoteName = strings.map((string, index) => {\r\n    const note =\r\n      notes[(index + offset) % 7] + (lowestNoteNumber + Math.floor((index + offset) / 7));\r\n    return { ...string, note, frequency: getFrequency(note) };\r\n  });\r\n\r\n  return stringsWithNoteName;\r\n};\r\n\r\nexport const calculateTensileStress = (length, width, tension) => {\r\n  return tension / (length * width);\r\n};\r\n\r\nexport const calculateStraightPillarCrossSectionArea = (diameter) => {\r\n  return (diameter / 1000 / 2) ** 2 * Math.PI;\r\n};\r\n\r\nexport const calculateDPillarCrossSectionArea = (width, thickness) => {\r\n  return (width / 1000) * (thickness / 1000);\r\n};\r\n\r\n// Takes angle in degrees\r\nexport const calculateYOffset = (angle, stringSpacing) => {\r\n  const radians = (angle * Math.PI) / 180;\r\n  return stringSpacing * Math.tan(radians);\r\n};\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { stringData } from '../data';\r\nimport { inchToMeter, calculateTension, addNoteName } from '../utils';\r\n\r\nconst strings = addNoteName(stringData.reverse()).map((string, index, array) => {\r\n  const x = array.length - index - 1;\r\n  const length = 0.71 * x ** 2 + 7 * x + 100;\r\n\r\n  return {\r\n    ...string,\r\n    length,\r\n    diameter: inchToMeter(string.diameter) * 1000,\r\n    tension: calculateTension(length / 1000, string.frequency, inchToMeter(string.diameter)),\r\n    materialDensity: 1.14,\r\n    linearMassDensity: 0,\r\n  };\r\n});\r\n\r\nconst initialState = {\r\n  strings,\r\n  defaultStringLengths: strings.map((string) => string.length),\r\n  selectedString: null,\r\n  stringSpacing: 10,\r\n  yOffset: 0,\r\n  materialDensity: 1.14,\r\n  tuning: 'C Major',\r\n  stringNumber: 36,\r\n  lowestNote: 'C2',\r\n  totalLoad: strings.reduce((acc, string) => acc + string.tension, 0),\r\n};\r\n\r\nconst stringReducer = createReducer(initialState, {\r\n  SELECT_STRING: (state, { payload }) => {\r\n    const selectedString = state.strings.find((string) => string.id === payload.stringId);\r\n    return { ...state, selectedString };\r\n  },\r\n\r\n  UPDATE_STRING: (state, { payload }) => {\r\n    const stringToUpdate = state.strings.find((string) => string.id === payload.stringId);\r\n\r\n    Object.keys(payload.params).forEach((key) => {\r\n      stringToUpdate[key] = payload.params[key];\r\n    });\r\n\r\n    state.selectedString = stringToUpdate;\r\n    state.totalLoad = state.strings.reduce((acc, string) => acc + string.tension, 0);\r\n  },\r\n\r\n  UPDATE_STRING_MATERIAL_DENSITY: (state, { payload }) => {\r\n    state.strings.forEach((string) => {\r\n      string.tension = calculateTension(\r\n        string.length / 1000,\r\n        string.frequency,\r\n        string.diameter / 1000,\r\n        payload.density\r\n      );\r\n\r\n      string.materialDensity = payload.density;\r\n    });\r\n\r\n    state.materialDensity = payload.density;\r\n    if (state.selectedString)\r\n      state.selectedString = state.strings.find((string) => string.id === state.selectedString.id);\r\n\r\n    state.totalLoad = state.strings.reduce((acc, string) => acc + string.tension, 0);\r\n  },\r\n\r\n  UPDATE_TUNING: (state, { payload }) => {\r\n    state.strings = addNoteName(state.strings, state.lowestNote, payload.tuning);\r\n    state.strings.forEach((string) => {\r\n      string.tension = calculateTension(\r\n        string.length / 1000,\r\n        string.frequency,\r\n        string.diameter / 1000,\r\n        string.materialDensity,\r\n        string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n      );\r\n    });\r\n    state.tuning = payload.tuning;\r\n    if (state.selectedString)\r\n      state.selectedString = state.strings.find((string) => string.id === state.selectedString.id);\r\n\r\n    state.totalLoad = state.strings.reduce((acc, string) => acc + string.tension, 0);\r\n  },\r\n\r\n  UPDATE_STRING_NUMBER: (state, { payload }) => {\r\n    let updatedStrings = state.strings;\r\n    let updatedDefaultStringLengths = [];\r\n\r\n    const difference = payload.stringNumber - state.stringNumber;\r\n    if (difference > 0) {\r\n      const newStrings = [];\r\n\r\n      for (let i = 0; i < difference; i++) {\r\n        const x = state.strings.length + i;\r\n        const newString = {\r\n          id: x + 1 + '',\r\n          length: 0.71 * x ** 2 + 7 * x + 100,\r\n          diameter: state.strings[0].diameter,\r\n          materialDensity: state.materialDensity,\r\n        };\r\n        newStrings.push(newString);\r\n      }\r\n\r\n      updatedStrings = addNoteName(\r\n        [...newStrings.reverse(), ...state.strings],\r\n        state.lowestNote,\r\n        state.tuning\r\n      );\r\n\r\n      updatedStrings = updatedStrings.map((string) => {\r\n        const tension = calculateTension(\r\n          string.length / 1000,\r\n          string.frequency,\r\n          string.diameter / 1000,\r\n          string.materialDensity,\r\n          string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n        );\r\n\r\n        return { ...string, tension };\r\n      });\r\n\r\n      updatedDefaultStringLengths = [\r\n        ...newStrings.map((string) => string.length),\r\n        ...state.defaultStringLengths,\r\n      ];\r\n    } else if (difference < 0) {\r\n      updatedStrings = addNoteName(\r\n        state.strings.slice(Math.abs(difference)),\r\n        state.lowestNote,\r\n        state.tuning\r\n      ).map((string) => {\r\n        const tension = calculateTension(\r\n          string.length / 1000,\r\n          string.frequency,\r\n          string.diameter / 1000,\r\n          string.materialDensity,\r\n          string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n        );\r\n\r\n        return { ...string, tension };\r\n      });\r\n\r\n      updatedDefaultStringLengths = state.defaultStringLengths.slice(Math.abs(difference));\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      stringNumber: payload.stringNumber,\r\n      strings: updatedStrings,\r\n      defaultStringLengths: updatedDefaultStringLengths,\r\n      totalLoad: state.strings.reduce((acc, string) => acc + string.tension, 0),\r\n      selectedString: null,\r\n    };\r\n  },\r\n\r\n  UPDATE_LOWEST_NOTE: (state, { payload }) => {\r\n    let updatedStrings = addNoteName(state.strings, payload.lowestNote, state.tuning);\r\n    updatedStrings = updatedStrings.map((string) => {\r\n      const tension = calculateTension(\r\n        string.length / 1000,\r\n        string.frequency,\r\n        string.diameter / 1000,\r\n        string.materialDensity,\r\n        string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n      );\r\n\r\n      return { ...string, tension };\r\n    });\r\n\r\n    return {\r\n      ...state,\r\n      lowestNote: payload.lowestNote,\r\n      strings: updatedStrings,\r\n      totalLoad: updatedStrings.reduce((acc, string) => acc + string.tension, 0),\r\n      selectedString:\r\n        state.selectedString &&\r\n        updatedStrings.find((string) => string.id === state.selectedString.id),\r\n    };\r\n  },\r\n\r\n  UPDATE_Y_OFFSET: (state, { payload }) => {\r\n    return { ...state, yOffset: payload.yOffset };\r\n  },\r\n});\r\n\r\nexport default stringReducer;\r\n","export const stringData = [\r\n  {\r\n    id: '1',\r\n    frequency: 1864.655,\r\n    length: 80.0,\r\n    tension: 6.661,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '2',\r\n    frequency: 1760.0,\r\n    length: 100.0,\r\n    tension: 9.272,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '3',\r\n    frequency: 1567.982,\r\n    length: 123.0,\r\n    tension: 11.134,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '4',\r\n    frequency: 1396.913,\r\n    length: 145.0,\r\n    tension: 12.281,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '5',\r\n    frequency: 1318.51,\r\n    length: 165.0,\r\n    tension: 14.168,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '6',\r\n    frequency: 1174.659,\r\n    length: 175.0,\r\n    tension: 12.649,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '7',\r\n    frequency: 1046.502,\r\n    length: 190.0,\r\n    tension: 11.835,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '8',\r\n    frequency: 932.328,\r\n    length: 225.0,\r\n    tension: 16.524,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '9',\r\n    frequency: 880.0,\r\n    length: 240.0,\r\n    tension: 16.749,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '10',\r\n    frequency: 783.991,\r\n    length: 260.0,\r\n    tension: 15.602,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '11',\r\n    frequency: 698.456,\r\n    length: 275.0,\r\n    tension: 13.853,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '12',\r\n    frequency: 659.255,\r\n    length: 295.0,\r\n    tension: 18.55,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '13',\r\n    frequency: 587.33,\r\n    length: 315.0,\r\n    tension: 16.787,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '14',\r\n    frequency: 523.251,\r\n    length: 330.0,\r\n    tension: 14.623,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '15',\r\n    frequency: 466.164,\r\n    length: 348.0,\r\n    tension: 12.907,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '16',\r\n    frequency: 440.0,\r\n    length: 370.0,\r\n    tension: 12.999,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '17',\r\n    frequency: 391.995,\r\n    length: 390.0,\r\n    tension: 14.507,\r\n    diameter: 0.036,\r\n  },\r\n  {\r\n    id: '18',\r\n    frequency: 349.228,\r\n    length: 415.0,\r\n    tension: 13.038,\r\n    diameter: 0.036,\r\n  },\r\n  {\r\n    id: '19',\r\n    frequency: 329.628,\r\n    length: 445.0,\r\n    tension: 13.355,\r\n    diameter: 0.036,\r\n  },\r\n  {\r\n    id: '20',\r\n    frequency: 293.665,\r\n    length: 477.0,\r\n    tension: 15.036,\r\n    diameter: 0.04,\r\n  },\r\n  {\r\n    id: '21',\r\n    frequency: 261.626,\r\n    length: 510.0,\r\n    tension: 23.057,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '22',\r\n    frequency: 233.082,\r\n    length: 545.0,\r\n    tension: 20.898,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '23',\r\n    frequency: 220.0,\r\n    length: 585.0,\r\n    tension: 21.451,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '24',\r\n    frequency: 195.998,\r\n    length: 628.0,\r\n    tension: 19.621,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '25',\r\n    frequency: 174.614,\r\n    length: 675.0,\r\n    tension: 17.991,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '26',\r\n    frequency: 164.814,\r\n    length: 728.0,\r\n    tension: 18.644,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '27',\r\n    frequency: 146.832,\r\n    length: 785.0,\r\n    tension: 19.955,\r\n    diameter: 0.056,\r\n  },\r\n  {\r\n    id: '28',\r\n    frequency: 130.813,\r\n    length: 850.0,\r\n    tension: 21.317,\r\n    diameter: 0.06,\r\n  },\r\n  {\r\n    id: '29',\r\n    frequency: 116.541,\r\n    length: 900.0,\r\n    tension: 22.262,\r\n    diameter: 0.065,\r\n  },\r\n  {\r\n    id: '30',\r\n    frequency: 110.0,\r\n    length: 950.0,\r\n    tension: 30.21,\r\n    diameter: 0.076,\r\n  },\r\n  {\r\n    id: '31',\r\n    frequency: 97.999,\r\n    length: 1000.0,\r\n    tension: 29.438,\r\n    diameter: 0.08,\r\n  },\r\n  {\r\n    id: '32',\r\n    frequency: 87.307,\r\n    length: 1045.0,\r\n    tension: 28.804,\r\n    diameter: 0.085,\r\n  },\r\n  {\r\n    id: '33',\r\n    frequency: 82.407,\r\n    length: 1090.0,\r\n    tension: 32.0,\r\n    diameter: 0.091,\r\n  },\r\n  {\r\n    id: '34',\r\n    frequency: 73.416,\r\n    length: 1130.0,\r\n    tension: 30.378,\r\n    diameter: 0.096,\r\n  },\r\n  {\r\n    id: '35',\r\n    frequency: 65.406,\r\n    length: 1168.0,\r\n    tension: 27.952,\r\n    diameter: 0.1,\r\n  },\r\n  {\r\n    id: '36',\r\n    frequency: 58.27,\r\n    length: 1205.0,\r\n    tension: 23.613,\r\n    diameter: 0.1,\r\n  },\r\n];\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = { angle: 50, control: null, stringBandThickness: 20, length: 0 };\r\n\r\nconst soundboardReducer = createReducer(initialState, {\r\n  UPDATE_SOUNDBOARD_ANGLE: (state, { payload }) => {\r\n    return { ...state, angle: payload.angle };\r\n  },\r\n\r\n  UPDATE_CONTROL_POSITION: (state, { payload }) => {\r\n    return { ...state, control: payload.position };\r\n  },\r\n\r\n  UPDATE_STRING_BAND_THICKNESS: (state, { payload }) => {\r\n    return { ...state, stringBandThickness: payload.thickness };\r\n  },\r\n\r\n  UPDATE_SOUNDBOARD_LENGTH: (state, { payload }) => {\r\n    return { ...state, length: payload.length };\r\n  },\r\n});\r\n\r\nexport default soundboardReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  shape: 'Straight',\r\n  pillarDiameter: 30,\r\n  pillarWidth: 40,\r\n  pillarThickness: 20,\r\n  neckJointWidth: 2,\r\n};\r\n\r\nconst pillarReducer = createReducer(initialState, {\r\n  UPDATE_PILLAR_SHAPE: (state, { payload }) => {\r\n    return { ...state, shape: payload.shape };\r\n  },\r\n\r\n  UPDATE_PILLAR_DIAMETER: (state, { payload }) => {\r\n    return { ...state, pillarDiameter: payload.diameter };\r\n  },\r\n\r\n  UPDATE_PILLAR_WIDTH: (state, { payload }) => {\r\n    return { ...state, pillarWidth: payload.width };\r\n  },\r\n\r\n  UPDATE_PILLAR_THICKNESS: (state, { payload }) => {\r\n    return { ...state, pillarThickness: payload.thickness };\r\n  },\r\n\r\n  UPDATE_NECK_JOINT_WIDTH: (state, { payload }) => {\r\n    return { ...state, neckJointWidth: payload.width };\r\n  },\r\n});\r\n\r\nexport default pillarReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  neckThickness: 40,\r\n  tuningPinLength: 20,\r\n  frontNeckThickness: 15,\r\n  backNeckThickness: 15,\r\n  frontNeckTuningPostLength: 10,\r\n  backNeckTuningPostLength: 10,\r\n  neckStyle: 'Standard',\r\n};\r\n\r\nconst neckReducer = createReducer(initialState, {\r\n  UPDATE_NECK_THICKNESS: (state, { payload }) => {\r\n    return { ...state, neckThickness: payload.thickness };\r\n  },\r\n\r\n  UPDATE_TUNING_PIN_LENGTH: (state, { payload }) => {\r\n    return { ...state, tuningPinLength: payload.length };\r\n  },\r\n\r\n  UPDATE_PARAGUAYAN_PARAMS: (state, { payload }) => {\r\n    Object.keys(payload.params).forEach((key) => {\r\n      state[key] = payload.params[key];\r\n    });\r\n  },\r\n\r\n  UPDATE_NECK_STYLE: (state, { payload }) => {\r\n    return { ...state, neckStyle: payload.style };\r\n  },\r\n});\r\n\r\nexport default neckReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = { backgroundColor: 'burlywood' };\r\n\r\nconst settingsReducer = createReducer(initialState, {\r\n  UPDATE_BACKGROUND_COLOR: (state, { payload }) => {\r\n    return { ...state, backgroundColor: payload.color };\r\n  },\r\n});\r\n\r\nexport default settingsReducer;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport stringReducer from './reducers/stringReducer';\r\nimport soundboardReducer from './reducers/soundboardReducer';\r\nimport pillarReducer from './reducers/pillarReducer';\r\nimport neckReducer from './reducers/neckReducer';\r\nimport settingsReducer from './reducers/settingsReducer';\r\n\r\nconst reducers = combineReducers({\r\n  string: stringReducer,\r\n  soundboard: soundboardReducer,\r\n  pillar: pillarReducer,\r\n  neck: neckReducer,\r\n  settings: settingsReducer,\r\n});\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { updateLowestNote, updateStringNumber } from '../actions/stringActions';\r\n\r\nconst Overview = () => {\r\n  const dispatch = useDispatch();\r\n  const { strings, stringNumber, lowestNote } = useSelector((state) => state.string);\r\n  let totalTension = 0;\r\n  strings.forEach((string) => {\r\n    totalTension += string.tension;\r\n  });\r\n\r\n  const [numberOfStrings, setNumberOfStrings] = useState(stringNumber);\r\n  const [note, setNote] = useState(lowestNote);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (note !== lowestNote) dispatch(updateLowestNote(note));\r\n    if (parseInt(numberOfStrings) !== stringNumber) {\r\n      dispatch(updateStringNumber(parseInt(numberOfStrings)));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Overview</h5>\r\n\r\n      <span>\r\n        Total Tension: <b>{totalTension.toFixed(2)}</b> kg\r\n      </span>\r\n      <p></p>\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormContainer>\r\n          <Form.Group className='mb-3'>\r\n            <Form.Label>Number of Strings</Form.Label>\r\n\r\n            <Form.Control\r\n              type='number'\r\n              value={numberOfStrings}\r\n              onChange={(e) => setNumberOfStrings(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group className='mb-3'>\r\n            <Form.Label>Lowest Note</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              value={note}\r\n              onChange={(e) => setNote(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </FormContainer>\r\n\r\n        <Button className='btn-sm' type='submit' variant='secondary'>\r\n          Apply\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Overview;\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const selectString = (stringId) => async (dispatch) => {\r\n  dispatch(createAction('SELECT_STRING')({ stringId }));\r\n};\r\n\r\nexport const updateString = (stringId, params) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING')({ stringId, params }));\r\n};\r\n\r\nexport const updateStringMaterialDensity = (density) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING_MATERIAL_DENSITY')({ density }));\r\n};\r\n\r\nexport const updateTuning = (tuning) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_TUNING')({ tuning }));\r\n};\r\n\r\nexport const updateStringNumber = (stringNumber) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING_NUMBER')({ stringNumber }));\r\n};\r\n\r\nexport const updateLowestNote = (lowestNote) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_LOWEST_NOTE')({ lowestNote }));\r\n};\r\n\r\nexport const updateYOffset = (yOffset) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_Y_OFFSET')({ yOffset }));\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updateSoundboardAngle = (angle) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_SOUNDBOARD_ANGLE')({ angle }));\r\n};\r\n\r\nexport const updateControlPosition = (position) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_CONTROL_POSITION')({ position }));\r\n};\r\n\r\nexport const updateStringBandThickness = (thickness) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING_BAND_THICKNESS')({ thickness }));\r\n};\r\n\r\nexport const updateSoundboardLength = (length) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_SOUNDBOARD_LENGTH')({ length }));\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, InputGroup, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { updateSoundboardAngle, updateStringBandThickness } from '../actions/soundboardActions';\r\nimport { calculateTensileStress } from '../utils';\r\n\r\nconst SoundboardOptions = () => {\r\n  const dispatch = useDispatch();\r\n  const { totalLoad } = useSelector((state) => state.string);\r\n  const { angle, stringBandThickness, length } = useSelector((state) => state.soundboard);\r\n\r\n  const [soundboardAngle, setSoundboardAngle] = useState(angle);\r\n  const [bandThickness, setBandThickness] = useState(stringBandThickness);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (soundboardAngle && soundboardAngle !== angle)\r\n      dispatch(updateSoundboardAngle(parseInt(soundboardAngle)));\r\n    if (bandThickness && bandThickness !== stringBandThickness)\r\n      dispatch(updateStringBandThickness(bandThickness));\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <h5>Soundboard</h5>\r\n\r\n      <Form.Group className='mb-3'>\r\n        <Form.Label>Soundboard Angle</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={soundboardAngle}\r\n            onChange={(e) => setSoundboardAngle(e.target.value)}\r\n          ></Form.Control>\r\n          <InputGroupText>&#176;</InputGroupText>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <p>\r\n        Tensile Stress:{' '}\r\n        <b>\r\n          {(\r\n            calculateTensileStress(\r\n              length / 1000,\r\n              stringBandThickness / 1000,\r\n              totalLoad * 0.5 * 9.807\r\n            ) / 1000000\r\n          ).toFixed(6)}\r\n        </b>{' '}\r\n        MPa\r\n      </p>\r\n\r\n      <Form.Group className='mb-3'>\r\n        <Form.Label>String Band Thickness</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={bandThickness}\r\n            onChange={(e) => setBandThickness(e.target.value)}\r\n          ></Form.Control>\r\n          <InputGroupText>mm</InputGroupText>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Button className='btn-sm' type='submit' variant='secondary'>\r\n        Apply\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SoundboardOptions;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Button, Form, InputGroup } from 'react-bootstrap';\r\nimport {\r\n  updatePillarShape,\r\n  updatePillarDiameter,\r\n  updatePillarWidth,\r\n  updatePillarThickness,\r\n  updateNeckJointWidth,\r\n} from '../actions/pillarActions';\r\nimport {\r\n  calculateStraightPillarCrossSectionArea,\r\n  calculateDPillarCrossSectionArea,\r\n} from '../utils';\r\n\r\nconst PillarOptions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { totalLoad } = useSelector((state) => state.string);\r\n  const { shape, pillarDiameter, pillarWidth, pillarThickness, neckJointWidth } = useSelector(\r\n    (state) => state.pillar\r\n  );\r\n\r\n  const [diameter, setDiameter] = useState(pillarDiameter);\r\n  const [width, setWidth] = useState(pillarWidth);\r\n  const [thickness, setThickness] = useState(pillarThickness);\r\n  const [neckJoint, setNeckJoint] = useState(neckJointWidth);\r\n\r\n  const updateShape = (shape) => {\r\n    dispatch(updatePillarShape(shape));\r\n  };\r\n\r\n  const updateDiameter = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updatePillarDiameter(diameter));\r\n  };\r\n\r\n  const updateWidthAndThickness = (e) => {\r\n    e.preventDefault();\r\n    if (width && width !== pillarWidth) dispatch(updatePillarWidth(width));\r\n    if (thickness && thickness !== pillarThickness) dispatch(updatePillarThickness(thickness));\r\n    if (neckJoint && neckJoint !== neckJointWidth)\r\n      dispatch(updateNeckJointWidth(parseInt(neckJoint)));\r\n  };\r\n\r\n  const calculateCrossSectionArea = () => {\r\n    if (shape === 'Straight') {\r\n      return calculateStraightPillarCrossSectionArea(pillarDiameter);\r\n    } else {\r\n      return calculateDPillarCrossSectionArea(pillarWidth, pillarThickness);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Pillar</h5>\r\n\r\n      <StyledButton\r\n        variant={shape === 'Straight' ? 'primary' : 'secondary'}\r\n        onClick={() => updateShape('Straight')}\r\n      >\r\n        Straight\r\n      </StyledButton>\r\n      <StyledButton\r\n        variant={shape === 'D Shape' ? 'primary' : 'secondary'}\r\n        onClick={() => updateShape('D Shape')}\r\n      >\r\n        D Shape\r\n      </StyledButton>\r\n\r\n      <p>\r\n        Compresive Stress:{' '}\r\n        <b>{((totalLoad * 0.6 * 9.807) / calculateCrossSectionArea() / 1000000).toFixed(6)}</b> MPa\r\n      </p>\r\n\r\n      {shape === 'Straight' ? (\r\n        <Form onSubmit={updateDiameter}>\r\n          <Form.Group className='mb-3'>\r\n            <Form.Label>Pillar Diameter</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type='number'\r\n                value={diameter}\r\n                onChange={(e) => setDiameter(e.target.value)}\r\n              ></Form.Control>\r\n              <InputGroupText>mm</InputGroupText>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <Button className='btn-sm' type='submit' variant='secondary' disabled={!diameter}>\r\n            Apply\r\n          </Button>\r\n        </Form>\r\n      ) : (\r\n        <Form onSubmit={updateWidthAndThickness}>\r\n          <Form.Group className='mb-1'>\r\n            <Form.Label>Pillar Width</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type='number'\r\n                value={width}\r\n                onChange={(e) => setWidth(e.target.value)}\r\n              ></Form.Control>\r\n              <InputGroupText>mm</InputGroupText>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <Form.Group className='mb-1'>\r\n            <Form.Label>Pillar Thickness</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type='number'\r\n                value={thickness}\r\n                onChange={(e) => setThickness(e.target.value)}\r\n              ></Form.Control>\r\n              <InputGroupText>mm</InputGroupText>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <Form.Group className='mb-3'>\r\n            <Form.Label>Neck Joint Width</Form.Label>\r\n            <Form.Range\r\n              max={5}\r\n              min={1}\r\n              value={neckJoint}\r\n              onChange={(e) => setNeckJoint(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Button className='btn-sm' type='submit' variant='secondary'>\r\n            Apply\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PillarOptions;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin: 0 1rem 1rem 0;\r\n`;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updatePillarShape = (shape) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_SHAPE')({ shape }));\r\n};\r\n\r\nexport const updatePillarDiameter = (diameter) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_DIAMETER')({ diameter }));\r\n};\r\n\r\nexport const updatePillarWidth = (width) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_WIDTH')({ width }));\r\n};\r\n\r\nexport const updatePillarThickness = (thickness) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_THICKNESS')({ thickness }));\r\n};\r\n\r\nexport const updateNeckJointWidth = (width) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_NECK_JOINT_WIDTH')({ width }));\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updateNeckThickness = (thickness) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_NECK_THICKNESS')({ thickness }));\r\n};\r\n\r\nexport const updateTuningPinLength = (length) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_TUNING_PIN_LENGTH')({ length }));\r\n};\r\n\r\nexport const updateParaguayanParams = (params) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PARAGUAYAN_PARAMS')({ params }));\r\n};\r\n\r\nexport const updateNeckStyle = (style) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_NECK_STYLE')({ style }));\r\n};\r\n","import React, { useState, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, InputGroup, Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {\r\n  updateTuningPinLength,\r\n  updateNeckThickness,\r\n  updateParaguayanParams,\r\n  updateNeckStyle,\r\n} from '../actions/neckActions';\r\nimport { stringX, calculateTensileStress } from '../utils';\r\n\r\nconst NeckOptions = () => {\r\n  const dispatch = useDispatch();\r\n  const { strings, stringSpacing, stringNumber, totalLoad } = useSelector((state) => state.string);\r\n  const {\r\n    neckThickness,\r\n    tuningPinLength,\r\n    frontNeckThickness,\r\n    frontNeckTuningPostLength,\r\n    backNeckThickness,\r\n    backNeckTuningPostLength,\r\n    neckStyle,\r\n  } = useSelector((state) => state.neck);\r\n\r\n  const [thickness, setThickness] = useState(neckThickness);\r\n  const [tuningPinLen, setTuningPinLen] = useState(tuningPinLength);\r\n  const [frontThickness, setFrontThickness] = useState(frontNeckThickness);\r\n  const [frontTuningPostLength, setFrontTuningPostLength] = useState(frontNeckTuningPostLength);\r\n  const [backThickness, setBackThickness] = useState(backNeckThickness);\r\n  const [backTuningPostLength, setBackTuningPostLength] = useState(backNeckTuningPostLength);\r\n\r\n  const frontNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 0) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const backNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 1) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const torqueImbalance = useMemo(() => {\r\n    const imbalance =\r\n      (frontNeckTuningPostLength / 1000) * frontNeckLoad * 9.807 -\r\n      (backNeckTuningPostLength / 1000) * backNeckLoad * 9.807;\r\n\r\n    return imbalance;\r\n  }, [frontNeckTuningPostLength, backNeckTuningPostLength, frontNeckLoad, backNeckLoad]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (neckStyle === 'Standard') {\r\n      dispatch(updateNeckThickness(parseFloat(thickness)));\r\n      dispatch(updateTuningPinLength(parseFloat(tuningPinLen)));\r\n    } else if (neckStyle === 'Paraguayan') {\r\n      dispatch(\r\n        updateParaguayanParams({\r\n          frontNeckThickness: frontThickness,\r\n          frontNeckTuningPostLength: frontTuningPostLength,\r\n          backNeckThickness: backThickness,\r\n          backNeckTuningPostLength: backTuningPostLength,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Neck</h5>\r\n\r\n      <StyledButton\r\n        variant={neckStyle === 'Standard' ? 'primary' : 'secondary'}\r\n        onClick={() => neckStyle !== 'Standard' && dispatch(updateNeckStyle('Standard'))}\r\n      >\r\n        Standard\r\n      </StyledButton>\r\n      <StyledButton\r\n        variant={neckStyle === 'Paraguayan' ? 'primary' : 'secondary'}\r\n        onClick={() => neckStyle !== 'Paraguayan' && dispatch(updateNeckStyle('Paraguayan'))}\r\n      >\r\n        Paraguayan\r\n      </StyledButton>\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        {neckStyle === 'Standard' && (\r\n          <>\r\n            <p>\r\n              Tensile Stress:{' '}\r\n              <b>\r\n                {(\r\n                  calculateTensileStress(\r\n                    (stringX(stringNumber + 3, stringSpacing) +\r\n                      20 -\r\n                      (stringX(-4, stringSpacing) - 30)) /\r\n                      0.4 /\r\n                      1000,\r\n                    neckThickness / 1000,\r\n                    totalLoad * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)}\r\n              </b>{' '}\r\n              MPa\r\n            </p>\r\n\r\n            <p>\r\n              Torque: <b>{((tuningPinLength / 1000) * totalLoad * 9.807).toFixed(6)}</b> N m\r\n            </p>\r\n\r\n            <Form.Group className='mb-1'>\r\n              <Form.Label>Neck Thickness</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={thickness}\r\n                  onChange={(e) => setThickness(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group className='mb-3'>\r\n              <Form.Label>Tuning Pin Length</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={tuningPinLen}\r\n                  onChange={(e) => setTuningPinLen(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n          </>\r\n        )}\r\n\r\n        {neckStyle === 'Paraguayan' && (\r\n          <>\r\n            <OverlayTrigger\r\n              placement='right'\r\n              overlay={\r\n                <Tooltip id='torque-imbalance-tooltip'>\r\n                  Front neck torque is {Math.abs(torqueImbalance).toFixed(6)} Nm{' '}\r\n                  {torqueImbalance > 0 ? 'greater' : 'less'} than back neck torque\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <BlockSpan>\r\n                Torque Imbalance <b>{torqueImbalance.toFixed(6)}</b> N m\r\n              </BlockSpan>\r\n            </OverlayTrigger>\r\n\r\n            <p>\r\n              <b>Front Neck</b>\r\n            </p>\r\n\r\n            <p>\r\n              Tensile Stress:{' '}\r\n              <b>\r\n                {(\r\n                  calculateTensileStress(\r\n                    (stringX(stringNumber + 3, stringSpacing) +\r\n                      20 -\r\n                      (stringX(-4, stringSpacing) - 30)) /\r\n                      0.4 /\r\n                      1000,\r\n                    frontNeckThickness / 1000,\r\n                    (frontNeckLoad / 2) * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)}\r\n              </b>{' '}\r\n              MPa\r\n            </p>\r\n\r\n            <Form.Group className='mb-1'>\r\n              <Form.Label>Neck Thickness</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={frontThickness}\r\n                  onChange={(e) => setFrontThickness(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group className='mb-3'>\r\n              <Form.Label>Tuning Post Length</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={frontTuningPostLength}\r\n                  onChange={(e) => setFrontTuningPostLength(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <p>\r\n              <b>Back Neck</b>\r\n            </p>\r\n\r\n            <p>\r\n              Tensile Stress:{' '}\r\n              <b>\r\n                {(\r\n                  calculateTensileStress(\r\n                    (stringX(stringNumber + 3, stringSpacing) +\r\n                      20 -\r\n                      (stringX(-4, stringSpacing) - 30)) /\r\n                      0.4 /\r\n                      1000,\r\n                    backNeckThickness / 1000,\r\n                    (backNeckLoad / 2) * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)}\r\n              </b>{' '}\r\n              MPa\r\n            </p>\r\n\r\n            <Form.Group className='mb-1'>\r\n              <Form.Label>Neck Thickness</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={backThickness}\r\n                  onChange={(e) => setBackThickness(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group className='mb-3'>\r\n              <Form.Label>Tuning Post Length</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={backTuningPostLength}\r\n                  onChange={(e) => setBackTuningPostLength(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n          </>\r\n        )}\r\n\r\n        <Button className='btn-sm' type='submit' variant='secondary'>\r\n          Apply\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NeckOptions;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin: 0 1rem 1rem 0;\r\n`;\r\n\r\nconst BlockSpan = styled.span`\r\n  display: inline-block;\r\n  margin-bottom: 1rem;\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { updateTuning } from \"../actions/stringActions\";\r\n\r\nconst TuningOptions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { tuning } = useSelector((state) => state.string);\r\n\r\n  const updateStringTuning = (tuning) => {\r\n    dispatch(updateTuning(tuning));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Tuning</h5>\r\n\r\n      <StyledButton\r\n        variant={tuning === \"C Major\" ? \"primary\" : \"secondary\"}\r\n        onClick={() => updateStringTuning(\"C Major\")}\r\n      >\r\n        C Major\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={tuning === \"E Flat Major\" ? \"primary\" : \"secondary\"}\r\n        onClick={() => updateStringTuning(\"E Flat Major\")}\r\n      >\r\n        E &#9837; Major\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={tuning === \"A Flat Major\" ? \"primary\" : \"secondary\"}\r\n        onClick={() => updateStringTuning(\"A Flat Major\")}\r\n      >\r\n        A &#9837; Major\r\n      </StyledButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TuningOptions;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin-right: 1rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { updateStringMaterialDensity } from '../actions/stringActions';\r\n\r\nconst StringMaterialOptions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { materialDensity } = useSelector((state) => state.string);\r\n\r\n  const [density, setDensity] = useState(materialDensity);\r\n\r\n  const updateMaterial = (density) => {\r\n    dispatch(updateStringMaterialDensity(density));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>\r\n        <OverlayTrigger\r\n          placement='right'\r\n          overlay={<Tooltip>This setting applies to all strings</Tooltip>}\r\n        >\r\n          <span>String Material (global)</span>\r\n        </OverlayTrigger>\r\n      </h5>\r\n\r\n      <StyledButton\r\n        variant={density === 1.14 ? 'primary' : materialDensity === 1.14 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(1.14)}\r\n      >\r\n        Nylon\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 8.77 ? 'primary' : materialDensity === 8.77 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(8.77)}\r\n      >\r\n        Brass\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 7.8 ? 'primary' : materialDensity === 7.8 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(7.8)}\r\n      >\r\n        Steel\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 8.94 ? 'primary' : materialDensity === 8.94 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(8.94)}\r\n      >\r\n        Copper\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 8.85 ? 'primary' : materialDensity === 8.85 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(8.85)}\r\n      >\r\n        Phosphor Bronze\r\n      </StyledButton>\r\n\r\n      <ApplyButton\r\n        className='btn-sm mt-2'\r\n        variant='secondary'\r\n        onClick={() => updateMaterial(density)}\r\n        disabled={materialDensity === density}\r\n      >\r\n        Apply\r\n      </ApplyButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StringMaterialOptions;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin-right: 1rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst ApplyButton = styled(Button)`\r\n  display: block;\r\n`;\r\n","export const stringGaugeData = [\r\n  {\r\n    name: 'd’Addario PB020 0.51mm',\r\n    diameter: 0.51,\r\n    linearMassDensity: 0.00145,\r\n  },\r\n  {\r\n    name: 'd’Addario PB021 0.53mm',\r\n    diameter: 0.53,\r\n    linearMassDensity: 0.0016,\r\n  },\r\n  {\r\n    name: 'd’Addario PB022 0.56mm',\r\n    diameter: 0.56,\r\n    linearMassDensity: 0.00176,\r\n  },\r\n  {\r\n    name: 'd’Addario PB023 0.58mm',\r\n    diameter: 0.58,\r\n    linearMassDensity: 0.00193,\r\n  },\r\n  {\r\n    name: 'd’Addario PB024 0.61mm',\r\n    diameter: 0.61,\r\n    linearMassDensity: 0.00209,\r\n  },\r\n  {\r\n    name: 'd’Addario PB025 0.64mm',\r\n    diameter: 0.64,\r\n    linearMassDensity: 0.00227,\r\n  },\r\n  {\r\n    name: 'd’Addario PB026 0.66mm',\r\n    diameter: 0.66,\r\n    linearMassDensity: 0.00244,\r\n  },\r\n  {\r\n    name: 'd’Addario PB027 0.69mm',\r\n    diameter: 0.69,\r\n    linearMassDensity: 0.00265,\r\n  },\r\n  {\r\n    name: 'd’Addario PB029 0.74mm',\r\n    diameter: 0.74,\r\n    linearMassDensity: 0.0031,\r\n  },\r\n  {\r\n    name: 'd’Addario PB030 0.76mm',\r\n    diameter: 0.76,\r\n    linearMassDensity: 0.00333,\r\n  },\r\n  {\r\n    name: 'd’Addario PB032 0.81mm',\r\n    diameter: 0.81,\r\n    linearMassDensity: 0.00375,\r\n  },\r\n  {\r\n    name: 'd’Addario PB034 0.86mm',\r\n    diameter: 0.86,\r\n    linearMassDensity: 0.00427,\r\n  },\r\n  {\r\n    name: 'd’Addario PB035 0.89mm',\r\n    diameter: 0.89,\r\n    linearMassDensity: 0.00453,\r\n  },\r\n  {\r\n    name: 'd’Addario PB036 0.91mm',\r\n    diameter: 0.91,\r\n    linearMassDensity: 0.00479,\r\n  },\r\n  {\r\n    name: 'd’Addario PB039 0.99mm',\r\n    diameter: 0.99,\r\n    linearMassDensity: 0.00556,\r\n  },\r\n  {\r\n    name: 'd’Addario PB042 1.07mm',\r\n    diameter: 1.07,\r\n    linearMassDensity: 0.00656,\r\n  },\r\n  {\r\n    name: 'd’Addario PB045 1.14mm',\r\n    diameter: 1.14,\r\n    linearMassDensity: 0.00746,\r\n  },\r\n  {\r\n    name: 'd’Addario PB047 1.19mm',\r\n    diameter: 1.19,\r\n    linearMassDensity: 0.00809,\r\n  },\r\n  {\r\n    name: 'd’Addario PB049 1.24mm',\r\n    diameter: 1.24,\r\n    linearMassDensity: 0.00878,\r\n  },\r\n  {\r\n    name: 'd’Addario PB052 1.32mm',\r\n    diameter: 1.32,\r\n    linearMassDensity: 0.00986,\r\n  },\r\n  {\r\n    name: 'd’Addario PB053 1.35mm',\r\n    diameter: 1.35,\r\n    linearMassDensity: 0.01017,\r\n  },\r\n  {\r\n    name: 'd’Addario PB056 1.42mm',\r\n    diameter: 1.42,\r\n    linearMassDensity: 0.01134,\r\n  },\r\n  {\r\n    name: 'd’Addario PB059 1.50mm',\r\n    diameter: 1.5,\r\n    linearMassDensity: 0.0126,\r\n  },\r\n  {\r\n    name: 'd’Addario PB060 1.52mm',\r\n    diameter: 1.52,\r\n    linearMassDensity: 0.01304,\r\n  },\r\n  {\r\n    name: 'd’Addario PB062 1.57mm',\r\n    diameter: 1.57,\r\n    linearMassDensity: 0.01387,\r\n  },\r\n  {\r\n    name: 'd’Addario PB064 1.63mm',\r\n    diameter: 1.63,\r\n    linearMassDensity: 0.01478,\r\n  },\r\n  {\r\n    name: 'd’Addario PB066 1.68mm',\r\n    diameter: 1.68,\r\n    linearMassDensity: 0.01566,\r\n  },\r\n  {\r\n    name: 'd’Addario PB070 1.78mm',\r\n    diameter: 1.78,\r\n    linearMassDensity: 0.01729,\r\n  },\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, InputGroup, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { updateString } from '../actions/stringActions';\r\nimport { calculateTension, calculateFrequency, calculateLength, calculateDiameter } from '../utils';\r\nimport { stringGaugeData } from '../stringGaugeData';\r\n\r\nconst StringOptions = () => {\r\n  const dispatch = useDispatch();\r\n  const { selectedString } = useSelector((state) => state.string);\r\n\r\n  const [frequency, setFrequency] = useState(0);\r\n  const [length, setLength] = useState(0);\r\n  const [diameter, setDiameter] = useState(0);\r\n  const [tension, setTension] = useState(0);\r\n  const [material, setMaterial] = useState(0);\r\n  const [lmd, setLmd] = useState(0);\r\n  const [stringGauge, setStringGauge] = useState(0.00145);\r\n  const [selectedField, setSelectField] = useState('tension');\r\n\r\n  useEffect(() => {\r\n    if (selectedString) {\r\n      setFrequency(selectedString.frequency);\r\n      setLength(selectedString.length);\r\n      setDiameter(selectedString.diameter);\r\n      setTension(selectedString.tension);\r\n      setMaterial(selectedString.materialDensity);\r\n      setLmd(selectedString.linearMassDensity);\r\n    }\r\n  }, [selectedString]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let newFrequency = parseFloat(frequency),\r\n      newLength = parseFloat(length),\r\n      newDiameter = parseFloat(diameter),\r\n      newTension = parseFloat(tension);\r\n\r\n    switch (selectedField) {\r\n      case 'frequency':\r\n        newFrequency = calculateFrequency(\r\n          length / 1000,\r\n          tension,\r\n          diameter / 1000,\r\n          material,\r\n          material === 0 ? lmd : material === -1 ? stringGauge : 0\r\n        );\r\n        break;\r\n      case 'length':\r\n        newLength =\r\n          calculateLength(\r\n            frequency,\r\n            tension,\r\n            diameter / 1000,\r\n            material,\r\n            material === 0 ? lmd : material === -1 ? stringGauge : 0\r\n          ) * 1000;\r\n        break;\r\n      case 'diameter':\r\n        newDiameter = calculateDiameter(frequency, length / 1000, tension, material) * 1000;\r\n        break;\r\n      case 'tension':\r\n        newTension = calculateTension(\r\n          frequency,\r\n          length / 1000,\r\n          diameter / 1000,\r\n          material,\r\n          material === 0 ? lmd : material === -1 ? stringGauge : 0\r\n        );\r\n        break;\r\n      default:\r\n    }\r\n\r\n    let params = {\r\n      frequency: newFrequency,\r\n      length: newLength,\r\n      diameter: newDiameter,\r\n      tension: newTension,\r\n      materialDensity: material,\r\n    };\r\n\r\n    if (material === 0) params = { ...params, linearMassDensity: parseFloat(lmd) };\r\n    if (material === -1) params = { ...params, linearMassDensity: stringGauge };\r\n\r\n    dispatch(updateString(selectedString.id, params));\r\n  };\r\n\r\n  if (!selectedString) return null;\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <h5>String ({selectedString.note})</h5>\r\n\r\n      <Form.Group className='mb-1'>\r\n        <Form.Label>Frequency</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={frequency}\r\n            onChange={(e) => setFrequency(e.target.value)}\r\n            disabled={selectedField === 'frequency'}\r\n          />\r\n          <InputGroupText>Hz</InputGroupText>\r\n          <RadioContainer>\r\n            <Form.Check\r\n              type='radio'\r\n              checked={selectedField === 'frequency'}\r\n              onChange={() => setSelectField('frequency')}\r\n              name='stringinput'\r\n            />\r\n          </RadioContainer>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group className='mb-1'>\r\n        <Form.Label>Length</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={length}\r\n            onChange={(e) => setLength(e.target.value)}\r\n            disabled={selectedField === 'length'}\r\n          />\r\n          <InputGroupText>mm</InputGroupText>\r\n          <RadioContainer>\r\n            <Form.Check\r\n              type='radio'\r\n              checked={selectedField === 'length'}\r\n              onChange={() => setSelectField('length')}\r\n              name='stringinput'\r\n            />\r\n          </RadioContainer>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {material > 0 && (\r\n        <Form.Group className='mb-1'>\r\n          <Form.Label>Diameter</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type='number'\r\n              value={diameter}\r\n              onChange={(e) => setDiameter(e.target.value)}\r\n              disabled={selectedField === 'diameter'}\r\n            />\r\n            <InputGroupText>mm</InputGroupText>\r\n            <RadioContainer>\r\n              <Form.Check\r\n                type='radio'\r\n                checked={selectedField === 'diameter'}\r\n                onChange={() => setSelectField('diameter')}\r\n                name='stringinput'\r\n              />\r\n            </RadioContainer>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group className='mb-1'>\r\n        <Form.Label>Tension</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={tension}\r\n            onChange={(e) => setTension(e.target.value)}\r\n            disabled={selectedField === 'tension'}\r\n          />\r\n          <InputGroupText>kg</InputGroupText>\r\n          <RadioContainer>\r\n            <Form.Check\r\n              type='radio'\r\n              checked={selectedField === 'tension'}\r\n              onChange={() => setSelectField('tension')}\r\n              name='stringinput'\r\n            />\r\n          </RadioContainer>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group className={material === 0 || material === -1 ? 'mb-1' : 'mb-3'}>\r\n        <Form.Label>Material</Form.Label>\r\n        <Form.Select\r\n          value={material}\r\n          onChange={(e) => {\r\n            if (\r\n              (e.target.value === '0' || e.target.value === '-1') &&\r\n              selectedField === 'diameter'\r\n            ) {\r\n              setSelectField('tension');\r\n            }\r\n            setMaterial(parseFloat(e.target.value));\r\n          }}\r\n        >\r\n          <option value={1.14}>Nylon</option>\r\n          <option value={8.77}>Brass</option>\r\n          <option value={7.8}>Steel</option>\r\n          <option value={8.94}>Copper</option>\r\n          <option value={8.85}>Phosphor Bronze</option>\r\n          <option value={-1}>Phosphor Bronze Wound</option>\r\n          <option value={0}>Other</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      {material === -1 && (\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label>String Gauge</Form.Label>\r\n          <Form.Select\r\n            value={stringGauge}\r\n            onChange={(e) => {\r\n              setStringGauge(parseFloat(e.target.value));\r\n            }}\r\n          >\r\n            {stringGaugeData.map((gauge) => {\r\n              return (\r\n                <option key={gauge.diameter} value={gauge.linearMassDensity}>\r\n                  {gauge.name}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Select>\r\n        </Form.Group>\r\n      )}\r\n\r\n      {material === 0 && (\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label>Linear Mass Density (mass/length)</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control type='number' value={lmd} onChange={(e) => setLmd(e.target.value)} />\r\n            <InputGroupText>kg/m</InputGroupText>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Button\r\n        className='btn-sm'\r\n        type='submit'\r\n        variant='secondary'\r\n        disabled={\r\n          !(\r\n            (frequency || selectedField === 'frequency') &&\r\n            (length || selectedField === 'length') &&\r\n            (diameter || selectedField === 'diameter') &&\r\n            (tension || selectedField === 'tension')\r\n          )\r\n        }\r\n      >\r\n        Apply\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default StringOptions;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n\r\nconst RadioContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 10px;\r\n`;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport Overview from './Overview';\r\nimport SoundboardOptions from './SoundboardOptions';\r\nimport PillarOptions from './PillarOptions';\r\nimport NeckOptions from './NeckOptions';\r\nimport TuningOptions from './TuningOptions';\r\nimport StringMaterialOptions from './StringMaterialOptions';\r\nimport StringOptions from './StringOptions';\r\n\r\nconst OptionsPanel = () => {\r\n  return (\r\n    <MainContainer>\r\n      <OptionsContainer>\r\n        <Overview />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <NeckOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <SoundboardOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <PillarOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <StringMaterialOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <TuningOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <StringOptions />\r\n      </OptionsContainer>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default OptionsPanel;\r\n\r\nconst MainContainer = styled(Container)`\r\n  max-height: 90vh;\r\n  overflow: auto;\r\n`;\r\n\r\nconst OptionsContainer = styled.div`\r\n  margin-bottom: 1.3rem;\r\n`;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport { Shape, Circle } from 'react-konva';\r\nimport { updateControlPosition, updateSoundboardLength } from '../actions/soundboardActions';\r\n\r\nconst Body = ({ start, end, dispatch }) => {\r\n  const control = useRef(null);\r\n  const [cachedEnd, setCachedEnd] = useState(end);\r\n\r\n  useEffect(() => {\r\n    dispatch(updateControlPosition({ x: control.current.x(), y: control.current.y() }));\r\n  }, [control, dispatch]);\r\n\r\n  useEffect(() => {\r\n    const length = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2) * 0.4;\r\n    dispatch(updateSoundboardLength(length));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (end.y !== cachedEnd.y) {\r\n      const length = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2) * 0.4;\r\n      dispatch(updateSoundboardLength(length));\r\n\r\n      dispatch(\r\n        updateControlPosition({\r\n          x: control.current.x(),\r\n          y: control.current.y(),\r\n        })\r\n      );\r\n\r\n      setCachedEnd(end);\r\n    }\r\n  }, [control, dispatch, end]);\r\n\r\n  return (\r\n    <>\r\n      <Shape\r\n        stroke='black'\r\n        strokeWidth={5}\r\n        lineJoin='round'\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          context.moveTo(start.x, start.y);\r\n          context.quadraticCurveTo(control.current?.x(), control.current?.y(), end.x, end.y);\r\n          context.lineTo(end.x, end.y + 30);\r\n          context.lineTo(start.x + 100, start.y);\r\n          context.closePath();\r\n          context.fillStrokeShape(shape);\r\n        }}\r\n      />\r\n\r\n      <Circle\r\n        ref={control}\r\n        x={(start.x + end.x) / 2}\r\n        y={(start.y + end.y) / 2}\r\n        radius={20}\r\n        stroke='#666'\r\n        fill='#ddd'\r\n        strokeWidth={2}\r\n        draggable\r\n        onMouseEnter={function () {\r\n          document.body.style.cursor = 'pointer';\r\n          this.strokeWidth(4);\r\n        }}\r\n        onMouseLeave={function () {\r\n          document.body.style.cursor = 'default';\r\n          this.strokeWidth(2);\r\n        }}\r\n        onDragMove={function () {\r\n          this.x((start.x + end.x) / 2);\r\n        }}\r\n        onDragEnd={function () {\r\n          dispatch(\r\n            updateControlPosition({\r\n              x: this.x(),\r\n              y: this.y(),\r\n            })\r\n          );\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Line, Shape } from 'react-konva';\r\n\r\nconst Pillar = ({ start, end, dStart, dEnd, width = 30 }) => {\r\n  const { shape } = useSelector((state) => state.pillar);\r\n\r\n  if (shape === 'D Shape') {\r\n    return (\r\n      <Shape\r\n        stroke='black'\r\n        strokeWidth={5}\r\n        lineCap='round'\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          context.moveTo(start.x, start.y);\r\n          context.quadraticCurveTo(\r\n            (start.x + end.x) / 2 - 100,\r\n            (start.y + end.y) / 2,\r\n            end.x,\r\n            end.y + 50\r\n          );\r\n          context.moveTo(dStart.x, dStart.y);\r\n          context.quadraticCurveTo(\r\n            (dStart.x + dEnd.x) / 2 - 100,\r\n            (dStart.y + dEnd.y) / 2,\r\n            dEnd.x,\r\n            dEnd.y + 15\r\n          );\r\n          context.fillStrokeShape(shape);\r\n        }}\r\n        className='Pillar'\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Line\r\n      x={0}\r\n      y={0}\r\n      points={[start.x, start.y, end.x, end.y, end.x - width, end.y, start.x - width, start.y]}\r\n      stroke='black'\r\n      strokeWidth={5}\r\n      closed\r\n      lineJoin='round'\r\n      lineCap='round'\r\n      className='Pillar'\r\n    />\r\n  );\r\n};\r\n\r\nexport default Pillar;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Line } from 'react-konva';\r\nimport { stringX, stringY, getQBezierValue } from '../utils';\r\n\r\nconst Neck = ({ start, end, yOffset, harpHeight }) => {\r\n  const { strings, defaultStringLengths, stringSpacing, stringNumber } = useSelector(\r\n    (state) => state.string\r\n  );\r\n  const { control } = useSelector((state) => state.soundboard);\r\n  const { shape } = useSelector((state) => state.pillar);\r\n\r\n  return (\r\n    <>\r\n      {control && (\r\n        <>\r\n          <Line\r\n            x={0}\r\n            y={0}\r\n            tension={0.3}\r\n            points={[\r\n              start.x,\r\n              shape === 'Straight' ? start.y : start.y + 50,\r\n              ...topNeckPoints(\r\n                strings,\r\n                defaultStringLengths,\r\n                stringY(-4, yOffset, harpHeight),\r\n                control.y,\r\n                end.y,\r\n                stringSpacing,\r\n                -40,\r\n                stringNumber\r\n              ),\r\n              end.x,\r\n              end.y - 30,\r\n              end.x + 20,\r\n              end.y,\r\n              end.x,\r\n              end.y + 30,\r\n              end.x,\r\n              end.y,\r\n              ...bottomNeckPoints(\r\n                strings,\r\n                defaultStringLengths,\r\n                stringY(-4, yOffset, harpHeight),\r\n                control.y,\r\n                end.y,\r\n                stringSpacing,\r\n                10,\r\n                stringNumber\r\n              ),\r\n              start.x,\r\n              start.y + 50,\r\n            ]}\r\n            stroke='black'\r\n            strokeWidth={5}\r\n            lineCap='round'\r\n            className='Neck'\r\n          />\r\n\r\n          {/* {strings.map((string, index) => {\r\n            const points = neckPoints(\r\n              strings.map((string) => string.length),\r\n              stringY(-4, yOffset),\r\n              control.y,\r\n              end.y,\r\n              stringSpacing,\r\n              10\r\n            );\r\n\r\n            if (string.length - defaultStringLengths[index] > 50) {\r\n              return (\r\n                <Shape\r\n                  key={string.id}\r\n                  stroke='black'\r\n                  strokeWidth={3}\r\n                  lineCap='round'\r\n                  sceneFunc={(context, shape) => {\r\n                    context.beginPath();\r\n                    context.moveTo(points[index - 1][0], points[index - 1][1]);\r\n                    context.lineTo(points[index][0], points[index][1]);\r\n                    context.moveTo(points[index + 1][0], points[index + 1][1]);\r\n                    context.fillStrokeShape(shape);\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n\r\n            if (string.length - defaultStringLengths[index] < -10) {\r\n              return (\r\n                <Shape\r\n                  key={string.id}\r\n                  stroke='black'\r\n                  strokeWidth={3}\r\n                  lineCap='round'\r\n                  lineJoin='round'\r\n                  sceneFunc={(context, shape) => {\r\n                    context.beginPath();\r\n                    context.moveTo(\r\n                      index !== 0 ? points[index - 1][0] : points[index + 1][0] - 20,\r\n                      index !== 0 ? points[index - 1][1] : points[index + 1][1]\r\n                    );\r\n                    context.lineTo(points[index][0] - 5, points[index][1]);\r\n                    context.lineTo(points[index][0] + 5, points[index][1]);\r\n                    context.lineTo(\r\n                      index !== defaultStringLengths.length - 1\r\n                        ? points[index + 1][0]\r\n                        : points[index - 1][0] + 20,\r\n                      index !== defaultStringLengths.length - 1\r\n                        ? points[index + 1][1]\r\n                        : points[index - 1][1]\r\n                    );\r\n                    context.fillStrokeShape(shape);\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })} */}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Neck;\r\n\r\nconst neckPoints = (stringLengths, start, control, end, stringSpacing, offset, stringNumber) => {\r\n  const points = stringLengths.map((length, index) => {\r\n    const yPos = getQBezierValue((index + 4) / (stringNumber + 7), start, control, end);\r\n    return [stringX(index, stringSpacing), yPos - length * 0.4 + offset];\r\n  });\r\n\r\n  return points;\r\n};\r\n\r\n// const samplePoints = (stringLengths, start, control, end, stringSpacing, offset) => {\r\n//   const points = neckPoints(stringLengths, start, control, end, stringSpacing, offset);\r\n//   const samples = [];\r\n\r\n//   points.forEach((point, index) => {\r\n//     if (index % 6 === 0) {\r\n//       samples.push(point);\r\n//     }\r\n//   });\r\n\r\n//   return samples.flat();\r\n// };\r\n\r\nconst bottomNeckPoints = (\r\n  strings,\r\n  stringLengths,\r\n  start,\r\n  control,\r\n  end,\r\n  stringSpacing,\r\n  offset,\r\n  stringNumber\r\n) => {\r\n  const points = neckPoints(\r\n    strings.map((string) => string.length),\r\n    start,\r\n    control,\r\n    end,\r\n    stringSpacing,\r\n    offset,\r\n    stringNumber\r\n  );\r\n  const defaultPoints = neckPoints(\r\n    stringLengths,\r\n    start,\r\n    control,\r\n    end,\r\n    stringSpacing,\r\n    offset,\r\n    stringNumber\r\n  );\r\n  const samples = [];\r\n\r\n  points.forEach((point, index) => {\r\n    const lengthDifference = strings[index].length - stringLengths[index];\r\n    if (index % 6 === 0 && lengthDifference > -10) {\r\n      samples.push(defaultPoints[index]);\r\n    } else if (index % 6 === 0 || lengthDifference < -10) {\r\n      samples.push(point);\r\n    }\r\n  });\r\n\r\n  return samples.reverse().flat();\r\n};\r\n\r\nconst topNeckPoints = (\r\n  strings,\r\n  stringLengths,\r\n  start,\r\n  control,\r\n  end,\r\n  stringSpacing,\r\n  offset,\r\n  stringNumber\r\n) => {\r\n  const points = neckPoints(\r\n    strings.map((string) => string.length),\r\n    start,\r\n    control,\r\n    end,\r\n    stringSpacing,\r\n    offset,\r\n    stringNumber\r\n  );\r\n  const defaultPoints = neckPoints(\r\n    stringLengths,\r\n    start,\r\n    control,\r\n    end,\r\n    stringSpacing,\r\n    offset,\r\n    stringNumber\r\n  );\r\n  const samples = [];\r\n\r\n  points.forEach((point, index) => {\r\n    const lengthDifference = strings[index].length - stringLengths[index];\r\n    if (index % 6 === 0 && lengthDifference < 50) {\r\n      samples.push(defaultPoints[index]);\r\n    } else if (index % 6 === 0 || lengthDifference > 50) {\r\n      samples.push(point);\r\n    }\r\n  });\r\n\r\n  return samples.flat();\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Shape, Circle } from 'react-konva';\r\n\r\nconst String = ({ start, end, string, stroke = 'white' }) => {\r\n  const { backgroundColor } = useSelector((state) => state.settings);\r\n\r\n  return (\r\n    <>\r\n      <Shape\r\n        stroke={backgroundColor === 'white' && stroke === 'white' ? 'silver' : stroke}\r\n        strokeWidth={3}\r\n        lineCap='round'\r\n        string={string}\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          context.moveTo(start.x, start.y);\r\n          context.lineTo(end.x, end.y - 20);\r\n          context.fillStrokeShape(shape);\r\n        }}\r\n      />\r\n      <Circle x={end.x} y={end.y || 0} stroke='gray' radius={2} listening={false} />\r\n      <Circle x={end.x} y={end.y - 20 || 0} stroke='gray' radius={3} listening={false} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default String;\r\n","import React, { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Arrow, Label, Tag, Text } from 'react-konva';\r\nimport { stringX, stringY, getQBezierValue } from '../utils';\r\n\r\nconst Measurements = ({ yOffset, width, height }) => {\r\n  const { strings, stringSpacing, stringNumber } = useSelector((state) => state.string);\r\n  const { control } = useSelector((state) => state.soundboard);\r\n\r\n  const highestStringY = useMemo(() => {\r\n    let yPos = 1000;\r\n\r\n    strings.forEach((string, index) => {\r\n      const yPosAtSoundboard = getQBezierValue(\r\n        (index + 4) / (stringNumber + 7),\r\n        stringY(-4, yOffset, height),\r\n        control?.y,\r\n        stringY(stringNumber + 3, yOffset, height)\r\n      );\r\n\r\n      const stringHeight = yPosAtSoundboard - string.length * 0.4;\r\n      if (stringHeight < yPos) yPos = stringHeight;\r\n    });\r\n\r\n    return yPos;\r\n  }, [strings, yOffset, control, stringNumber, height]);\r\n\r\n  return (\r\n    <>\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) - 90,\r\n          (highestStringY + stringY(-4, yOffset, height)) / 2 - 40,\r\n          stringX(-4, stringSpacing) - 90,\r\n          highestStringY - 50,\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) - 90,\r\n          (highestStringY + stringY(-4, yOffset, height)) / 2 + 20,\r\n          stringX(-4, stringSpacing) - 90,\r\n          stringY(-4, yOffset, height),\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Label\r\n        x={stringX(-4, stringSpacing) - 90}\r\n        y={(highestStringY + stringY(-4, yOffset, height)) / 2 - 25}\r\n        listening={false}\r\n      >\r\n        <Tag\r\n          fill='black'\r\n          pointerDirection='up'\r\n          pointerWidth={0}\r\n          pointerHeight={0}\r\n          lineJoin='round'\r\n        />\r\n        <Text\r\n          text={Math.round((height / 0.4) * 100) / 100 + ' mm'}\r\n          fontSize={18}\r\n          padding={5}\r\n          fill='white'\r\n        />\r\n      </Label>\r\n\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) +\r\n            (stringX(stringNumber + 3, stringSpacing) - stringX(-4, stringSpacing)) / 2 +\r\n            10,\r\n          highestStringY - 80,\r\n          stringX(stringNumber + 3, stringSpacing) + 20,\r\n          highestStringY - 80,\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) +\r\n            (stringX(stringNumber + 3, stringSpacing) - stringX(-4, stringSpacing)) / 2 -\r\n            100,\r\n          highestStringY - 80,\r\n          stringX(-4, stringSpacing) - 30,\r\n          highestStringY - 80,\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Label\r\n        x={\r\n          stringX(-4, stringSpacing) +\r\n          (stringX(stringNumber + 3, stringSpacing) - stringX(-4, stringSpacing)) / 2\r\n        }\r\n        y={highestStringY - 80}\r\n        listening={false}\r\n      >\r\n        <Tag\r\n          fill='black'\r\n          pointerDirection='right'\r\n          pointerWidth={0}\r\n          pointerHeight={0}\r\n          lineJoin='round'\r\n        />\r\n        <Text\r\n          text={Math.round((width / 0.4) * 100) / 100 + ' mm'}\r\n          fontSize={18}\r\n          padding={5}\r\n          fill='white'\r\n        />\r\n      </Label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Measurements;\r\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { useDispatch, useSelector, Provider } from 'react-redux';\r\nimport { Stage, Layer, Label, Tag, Text } from 'react-konva';\r\nimport Body from './Body';\r\nimport Pillar from './Pillar';\r\nimport Neck from './Neck';\r\nimport String from './String';\r\nimport Measurements from './Measurements';\r\nimport { selectString, updateYOffset } from '../actions/stringActions';\r\nimport {\r\n  stringX,\r\n  stringY,\r\n  getQBezierValue,\r\n  calculateTensileStress,\r\n  calculateStraightPillarCrossSectionArea,\r\n  calculateDPillarCrossSectionArea,\r\n  calculateYOffset,\r\n} from '../utils';\r\nimport store from '../store';\r\n\r\nconst Harp = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { strings, defaultStringLengths, stringSpacing, stringNumber, totalLoad, yOffset } =\r\n    useSelector((state) => state.string);\r\n  const { angle, control, stringBandThickness, length } = useSelector((state) => state.soundboard);\r\n  const { neckJointWidth, shape, pillarDiameter, pillarWidth, pillarThickness } = useSelector(\r\n    (state) => state.pillar\r\n  );\r\n  const {\r\n    neckStyle,\r\n    neckThickness,\r\n    tuningPinLength,\r\n    frontNeckThickness,\r\n    backNeckThickness,\r\n    frontNeckTuningPostLength,\r\n    backNeckTuningPostLength,\r\n  } = useSelector((state) => state.neck);\r\n\r\n  const [width, setWidth] = useState(\r\n    stringX(stringNumber + 3, stringSpacing) + 20 - (stringX(-4, stringSpacing) - 30)\r\n  );\r\n  const [height, setHeight] = useState(1214.57 * 0.48);\r\n\r\n  const tooltip = useRef(null);\r\n\r\n  const frontNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 0) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const backNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 1) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const torqueImbalance = useMemo(() => {\r\n    const imbalance =\r\n      (frontNeckTuningPostLength / 1000) * frontNeckLoad * 9.807 -\r\n      (backNeckTuningPostLength / 1000) * backNeckLoad * 9.807;\r\n\r\n    return imbalance;\r\n  }, [frontNeckTuningPostLength, backNeckTuningPostLength, frontNeckLoad, backNeckLoad]);\r\n\r\n  useEffect(() => {\r\n    dispatch(updateYOffset(calculateYOffset(angle, stringSpacing)));\r\n  }, [angle, stringSpacing, dispatch]);\r\n\r\n  useEffect(() => {\r\n    setWidth(stringX(stringNumber + 3, stringSpacing) + 20 - (stringX(-4, stringSpacing) - 30));\r\n  }, [stringNumber, stringSpacing]);\r\n\r\n  useEffect(() => {\r\n    setHeight(defaultStringLengths[0] * 0.48);\r\n  }, [defaultStringLengths]);\r\n\r\n  return (\r\n    <Stage width={width + 200} height={height + 100}>\r\n      <Provider store={store}>\r\n        <Layer\r\n          onClick={(e) => {\r\n            tooltip.current.position({\r\n              x: e.evt.layerX,\r\n              y: e.evt.layerY - 5,\r\n            });\r\n            if (e.target.attrs.className === 'Neck') {\r\n              if (neckStyle === 'Standard') {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Neck\\n\\nNeck Style: ${neckStyle}\\nTensile Stress: ${(\r\n                      calculateTensileStress(\r\n                        (stringX(stringNumber + 3, stringSpacing) +\r\n                          20 -\r\n                          (stringX(-4, stringSpacing) - 30)) /\r\n                          0.4 /\r\n                          1000,\r\n                        neckThickness / 1000,\r\n                        totalLoad * 9.807\r\n                      ) / 1000000\r\n                    ).toFixed(6)} MPa\\nTorque: ${(\r\n                      (tuningPinLength / 1000) *\r\n                      totalLoad *\r\n                      9.807\r\n                    ).toFixed(\r\n                      6\r\n                    )} N m\\nNeck Thickness: ${neckThickness} mm\\nTuning Pin Length: ${tuningPinLength} mm`\r\n                  );\r\n              } else {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Neck\\n\\nNeck Style: ${neckStyle}\\nTorque Imbalance: ${torqueImbalance.toFixed(\r\n                      6\r\n                    )} N m\\n\\nFront Neck\\nTensile Stress: ${(\r\n                      calculateTensileStress(\r\n                        (stringX(stringNumber + 3, stringSpacing) +\r\n                          20 -\r\n                          (stringX(-4, stringSpacing) - 30)) /\r\n                          0.4 /\r\n                          1000,\r\n                        frontNeckThickness / 1000,\r\n                        (frontNeckLoad / 2) * 9.807\r\n                      ) / 1000000\r\n                    ).toFixed(\r\n                      6\r\n                    )} MPa\\nNeck Thickness: ${frontNeckThickness} mm\\nTuning Post Length: ${frontNeckTuningPostLength} mm\\n\\nBack Neck\\nTensile Stress: ${(\r\n                      calculateTensileStress(\r\n                        (stringX(stringNumber + 3, stringSpacing) +\r\n                          20 -\r\n                          (stringX(-4, stringSpacing) - 30)) /\r\n                          0.4 /\r\n                          1000,\r\n                        backNeckThickness / 1000,\r\n                        (backNeckLoad / 2) * 9.807\r\n                      ) / 1000000\r\n                    ).toFixed(\r\n                      6\r\n                    )} MPa\\nNeck Thickness: ${backNeckThickness} mm\\nTuning Post Length: ${backNeckTuningPostLength} mm`\r\n                  );\r\n              }\r\n            } else if (e.target.attrs.className === 'Pillar') {\r\n              if (shape === 'Straight') {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Pillar\\n\\nCompresive Stress: ${(\r\n                      (totalLoad * 0.6 * 9.807) /\r\n                      calculateStraightPillarCrossSectionArea(pillarDiameter) /\r\n                      1000000\r\n                    ).toFixed(6)} MPa\\nPillar Diameter: ${pillarDiameter} mm`\r\n                  );\r\n              } else {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Pillar\\n\\nCompresive Stress: ${(\r\n                      (totalLoad * 0.6 * 9.807) /\r\n                      calculateDPillarCrossSectionArea(pillarWidth, pillarThickness) /\r\n                      1000000\r\n                    ).toFixed(\r\n                      6\r\n                    )} MPa\\nPillar Width: ${pillarWidth} mm\\nPillar Thickness: ${pillarThickness} mm`\r\n                  );\r\n              }\r\n            }\r\n\r\n            tooltip.current.show();\r\n          }}\r\n          onMouseOver={(e) => {\r\n            document.body.style.cursor = 'pointer';\r\n            e.target.strokeWidth(7);\r\n          }}\r\n          onMouseOut={(e) => {\r\n            document.body.style.cursor = 'default';\r\n            e.target.strokeWidth(5);\r\n            tooltip.current.hide();\r\n          }}\r\n        >\r\n          <Pillar\r\n            start={{ x: stringX(-4, stringSpacing), y: stringY(-4, yOffset, height) }}\r\n            end={{\r\n              x: stringX(-4, stringSpacing),\r\n              y: stringY(-4, yOffset, height) - defaultStringLengths[0] * 0.48,\r\n            }}\r\n            dStart={{\r\n              x: stringX(-2, stringSpacing),\r\n              y: getQBezierValue(\r\n                2 / (stringNumber + 7),\r\n                stringY(-4, yOffset, height),\r\n                control?.y,\r\n                stringY(stringNumber + 3, yOffset, height)\r\n              ),\r\n            }}\r\n            dEnd={{\r\n              x: stringX(neckJointWidth, stringSpacing),\r\n              y:\r\n                getQBezierValue(\r\n                  (4 + neckJointWidth) / (stringNumber + 7),\r\n                  stringY(-4, yOffset, height),\r\n                  control?.y,\r\n                  stringY(stringNumber + 3, yOffset, height)\r\n                ) -\r\n                strings[neckJointWidth].length * 0.4,\r\n            }}\r\n          />\r\n\r\n          <Neck\r\n            start={{\r\n              x: stringX(-4, stringSpacing),\r\n              y: stringY(-4, yOffset, height) - defaultStringLengths[0] * 0.48,\r\n            }}\r\n            end={{\r\n              x: stringX(stringNumber + 3, stringSpacing),\r\n              y: stringY(stringNumber + 3, yOffset, height),\r\n            }}\r\n            yOffset={yOffset}\r\n            harpHeight={height}\r\n          />\r\n        </Layer>\r\n\r\n        <Layer\r\n          onClick={(e) => {\r\n            dispatch(selectString(e.target.attrs.string.id));\r\n          }}\r\n          onMouseOver={(e) => {\r\n            const string = e.target.attrs.string;\r\n            document.body.style.cursor = 'pointer';\r\n            e.target.strokeWidth(5);\r\n            tooltip.current\r\n              .getText()\r\n              .text(\r\n                `Frequency: ${string.frequency} Hz, Length: ${string.length} mm, Diameter: ${Number(\r\n                  string.diameter\r\n                ).toFixed(2)} mm, Tension: ${string.tension.toFixed(2)} kg`\r\n              );\r\n            tooltip.current.position({\r\n              x: e.evt.layerX,\r\n              y: e.evt.layerY - 5,\r\n            });\r\n            tooltip.current.show();\r\n          }}\r\n          onMouseOut={(e) => {\r\n            document.body.style.cursor = 'default';\r\n            e.target.strokeWidth(3);\r\n            tooltip.current.hide();\r\n          }}\r\n        >\r\n          {strings.map((string, index) => {\r\n            const yPos = getQBezierValue(\r\n              (index + 4) / (stringNumber + 7),\r\n              stringY(-4, yOffset, height),\r\n              control?.y,\r\n              stringY(stringNumber + 3, yOffset, height)\r\n            );\r\n\r\n            return (\r\n              <String\r\n                key={string.id}\r\n                start={{\r\n                  x: stringX(index, stringSpacing),\r\n                  y: yPos,\r\n                }}\r\n                end={{\r\n                  x: stringX(index, stringSpacing),\r\n                  y: yPos - string.length * 0.4,\r\n                }}\r\n                string={string}\r\n                stroke={\r\n                  string.note.charAt(0) === 'C' && string.note.length === 2\r\n                    ? 'red'\r\n                    : string.note.charAt(0) === 'F' && string.note.length === 2\r\n                    ? 'blue'\r\n                    : 'white'\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </Layer>\r\n\r\n        <Layer\r\n          onClick={(e) => {\r\n            tooltip.current.position({\r\n              x: e.evt.layerX,\r\n              y: e.evt.layerY - 5,\r\n            });\r\n            tooltip.current\r\n              .getText()\r\n              .text(\r\n                `Body\\n\\nSoundboard Angle: ${angle} degrees\\nSoundboard Tensile Stress: ${(\r\n                  calculateTensileStress(\r\n                    length / 1000,\r\n                    stringBandThickness / 1000,\r\n                    totalLoad * 0.5 * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)} MPa\\nString Band Thickness: ${stringBandThickness} mm`\r\n              );\r\n            tooltip.current.show();\r\n          }}\r\n          onMouseOver={(e) => {\r\n            document.body.style.cursor = 'pointer';\r\n            e.target.strokeWidth(7);\r\n          }}\r\n          onMouseOut={(e) => {\r\n            document.body.style.cursor = 'default';\r\n            e.target.strokeWidth(5);\r\n            tooltip.current.hide();\r\n          }}\r\n        >\r\n          <Body\r\n            start={{ x: stringX(-4, stringSpacing), y: stringY(-4, yOffset, height) }}\r\n            end={{\r\n              x: stringX(stringNumber + 3, stringSpacing),\r\n              y: stringY(stringNumber + 3, yOffset, height),\r\n            }}\r\n            dispatch={dispatch}\r\n          />\r\n        </Layer>\r\n\r\n        <Layer>\r\n          <Measurements yOffset={yOffset} width={width} height={height} />\r\n\r\n          <Label opacity={0.8} visible={false} listening={false} ref={tooltip} offsetY={250}>\r\n            <Tag\r\n              fill='black'\r\n              pointerDirection='down'\r\n              pointerWidth={10}\r\n              pointerHeight={10}\r\n              lineJoin='round'\r\n            />\r\n            <Text text='' fontSize={18} padding={5} fill='white' />\r\n          </Label>\r\n        </Layer>\r\n      </Provider>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default Harp;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updateBackgroundColor = (color) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_BACKGROUND_COLOR')({ color }));\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navbar, NavDropdown, Container, Row, Col } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport OptionsPanel from './components/OptionsPanel';\r\nimport Harp from './components/Harp';\r\nimport { updateBackgroundColor } from './actions/settingsActions';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { backgroundColor } = useSelector((state) => state.settings);\r\n\r\n  return (\r\n    <AppContainer className='App' backgroundColor={backgroundColor}>\r\n      <Navbar className='mb-3' bg='dark' variant='dark'>\r\n        <Container>\r\n          <Navbar.Brand>Harp Designer</Navbar.Brand>\r\n          <NavDropdown title={<DropdownTitle>Background Color</DropdownTitle>}>\r\n            <NavItemContainer onClick={() => dispatch(updateBackgroundColor('burlywood'))}>\r\n              <ColorIndicator color='burlywood' />\r\n            </NavItemContainer>\r\n            <NavItemContainer onClick={() => dispatch(updateBackgroundColor('white'))}>\r\n              <ColorIndicator color='white' />\r\n            </NavItemContainer>\r\n          </NavDropdown>\r\n        </Container>\r\n      </Navbar>\r\n      <Row>\r\n        <Col md={3}>\r\n          <OptionsPanel />\r\n        </Col>\r\n        <CanvasContainer md={9}>\r\n          <Harp />\r\n        </CanvasContainer>\r\n      </Row>\r\n    </AppContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: ${(props) => props.backgroundColor};\r\n`;\r\n\r\nconst DropdownTitle = styled.span`\r\n  color: white;\r\n`;\r\n\r\nconst NavItemContainer = styled(NavDropdown.Item)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst ColorIndicator = styled.div`\r\n  width: 22px;\r\n  height: 22px;\r\n  border: 2px solid;\r\n  border-radius: 3px;\r\n  background-color: ${(props) => props.color};\r\n`;\r\n\r\nconst CanvasContainer = styled(Col)`\r\n  overflow: scroll;\r\n`;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}