{"version":3,"sources":["utils.js","reducers/stringReducer.js","data.js","reducers/soundboardReducer.js","reducers/pillarReducer.js","reducers/neckReducer.js","reducers/settingsReducer.js","store.js","components/Overview.js","actions/stringActions.js","actions/soundboardActions.js","components/SoundboardOptions.js","components/PillarOptions.js","actions/pillarActions.js","actions/neckActions.js","components/NeckOptions.js","components/TuningOptions.js","components/StringMaterialOptions.js","stringGaugeData.js","components/StringOptions.js","components/OptionsPanel.js","components/Body.js","components/Pillar.js","components/Neck.js","components/String.js","components/Measurements.js","components/Harp.js","actions/settingsActions.js","App.js","reportWebVitals.js","index.js"],"names":["stringX","index","stringSpacing","stringY","scale","height","getQBezierValue","t","p1","p2","p3","iT","calculateTension","frequency","length","diameter","p","linearMassDensity","mu","Math","PI","inchToMeter","value","getFrequency","note","octave","keyNumber","charAt","indexOf","slice","pow","getNoteNamesInScale","addNoteName","strings","lowestNote","tuning","notes","lowestNoteName","lowestNoteNumber","parseInt","offset","charCodeAt","stringsWithNoteName","map","string","noteIndex","calculateTensileStress","width","tension","calculateStraightPillarCrossSectionArea","calculateDPillarCrossSectionArea","thickness","id","reverse","array","x","materialDensity","initialState","defaultStringLengths","selectedString","yOffset","stringNumber","totalLoad","reduce","acc","stringReducer","createReducer","SELECT_STRING","state","payload","find","stringId","UPDATE_STRING","stringToUpdate","Object","keys","params","forEach","key","UPDATE_STRING_MATERIAL_DENSITY","density","UPDATE_TUNING","UPDATE_STRING_NUMBER","updatedStrings","updatedDefaultStringLengths","difference","newStrings","i","newString","push","abs","UPDATE_LOWEST_NOTE","UPDATE_Y_OFFSET","UPDATE_STRING_SPACING","spacing","UPDATE_STRING_STATE","soundboardReducer","angle","control","stringBandThickness","UPDATE_SOUNDBOARD_ANGLE","UPDATE_CONTROL_POSITION","position","UPDATE_STRING_BAND_THICKNESS","UPDATE_SOUNDBOARD_LENGTH","UPDATE_SOUNDBOARD_STATE","pillarReducer","shape","pillarDiameter","pillarWidth","pillarThickness","neckJointWidth","UPDATE_PILLAR_SHAPE","UPDATE_PILLAR_DIAMETER","UPDATE_PILLAR_WIDTH","UPDATE_PILLAR_THICKNESS","UPDATE_NECK_JOINT_WIDTH","UPDATE_PILLAR_STATE","neckReducer","neckThickness","tuningPinLength","frontNeckThickness","backNeckThickness","frontNeckTuningPostLength","backNeckTuningPostLength","neckStyle","UPDATE_NECK_THICKNESS","UPDATE_TUNING_PIN_LENGTH","UPDATE_PARAGUAYAN_PARAMS","UPDATE_NECK_STYLE","style","UPDATE_NECK_STATE","settingsReducer","backgroundColor","UPDATE_BACKGROUND_COLOR","color","reducers","combineReducers","soundboard","pillar","neck","settings","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Overview","dispatch","useDispatch","useSelector","totalTension","useState","numberOfStrings","setNumberOfStrings","setNote","setSpacing","errorMessage","setErrorMessage","useEffect","toFixed","Form","onSubmit","e","preventDefault","noteNames","noteName","substring","includes","a","createAction","updateLowestNote","updateStringNumber","parseFloat","updateStringSpacing","FormContainer","InputContainer","className","Label","Control","type","onChange","target","max","min","InputGroup","hasValidation","required","isInvalid","Feedback","Button","variant","styled","div","Group","updateControlPosition","updateSoundboardLength","SoundboardOptions","soundboardAngle","setSoundboardAngle","bandThickness","setBandThickness","updateSoundboardAngle","InputGroupText","Text","PillarOptions","setDiameter","setWidth","setThickness","neckJoint","setNeckJoint","updateShape","updatePillarShape","StyledButton","onClick","updatePillarDiameter","disabled","updatePillarWidth","updatePillarThickness","updateNeckJointWidth","Range","updateNeckStyle","NeckOptions","tuningPinLen","setTuningPinLen","frontThickness","setFrontThickness","frontTuningPostLength","setFrontTuningPostLength","backThickness","setBackThickness","backTuningPostLength","setBackTuningPostLength","frontNeckLoad","useMemo","load","backNeckLoad","torqueImbalance","updateNeckThickness","OverlayTrigger","placement","overlay","Tooltip","BlockSpan","span","TuningOptions","updateStringTuning","updateTuning","StringMaterialOptions","setDensity","updateMaterial","updateStringMaterialDensity","ApplyButton","stringGaugeData","name","StringOptions","setFrequency","setLength","setTension","material","setMaterial","lmd","setLmd","stringGauge","setStringGauge","selectedField","setSelectField","newFrequency","newLength","newDiameter","newTension","sqrt","calculateFrequency","calculateLength","calculateDiameter","updateString","RadioContainer","Check","checked","Select","gauge","OptionsPanel","MainContainer","OptionsContainer","Container","Body","start","end","useRef","cachedEnd","setCachedEnd","dragOffset","setDragOffset","current","y","stroke","strokeWidth","lineJoin","sceneFunc","context","beginPath","moveTo","quadraticCurveTo","lineTo","closePath","fillStrokeShape","ref","radius","fill","draggable","onMouseEnter","document","body","cursor","this","onMouseLeave","onDragMove","onDragEnd","Pillar","dStart","dEnd","lineCap","points","closed","Neck","harpHeight","topNeckPoints","bottomNeckPoints","neckPoints","stringLengths","yPos","samples","point","lengthDifference","flat","String","listening","Measurements","pointerDirection","pointerWidth","pointerHeight","text","round","fontSize","padding","Harp","setHeight","tooltip","updateYOffset","radians","tan","calculateYOffset","yPosAtSoundboard","stringHeight","evt","layerX","layerY","attrs","getText","show","onMouseOver","onMouseOut","hide","Number","opacity","visible","updateBackgroundColor","App","designData","_","omit","showSettings","setShowSettings","designName","setDesignName","selectedDesign","setSelectedDesign","savedDesigns","setSavedDesigns","designs","JSON","parse","localStorage","getItem","saveDesign","setItem","stringify","saveCurrentDesign","loadDesign","design","loadSavedDesign","AppContainer","Navbar","bg","Brand","NavButton","SettingsPanel","onHide","Offcanvas","Header","closeButton","Title","SettingContainer","ColorIndicator","FormControl","placeholder","Row","Col","md","CanvasContainer","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ed395845.chunk.js","sourcesContent":["export const stringX = (index, stringSpacing) => {\r\n  return index * stringSpacing + 200;\r\n};\r\n\r\nexport const stringY = (index, scale, height = 600) => {\r\n  return height + 100 - index * scale;\r\n};\r\n\r\nexport function getQBezierValue(t, p1, p2, p3) {\r\n  var iT = 1 - t;\r\n  return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;\r\n}\r\n\r\nexport const calculateTension = (frequency, length, diameter, p = 1.14, linearMassDensity = 0) => {\r\n  const mu = linearMassDensity ? linearMassDensity : (diameter / 2) ** 2 * Math.PI * p * 1000;\r\n  return ((2 * length * frequency) ** 2 * mu) / 9.807;\r\n};\r\n\r\nexport const calculateFrequency = (length, tension, diameter, p = 1.14, linearMassDensity = 0) => {\r\n  const mu = linearMassDensity ? linearMassDensity : (diameter / 2) ** 2 * Math.PI * p * 1000;\r\n  return Math.sqrt((tension * 9.807) / mu) / (2 * length);\r\n};\r\n\r\nexport const calculateLength = (frequency, tension, diameter, p = 1.14, linearMassDensity = 0) => {\r\n  const mu = linearMassDensity ? linearMassDensity : (diameter / 2) ** 2 * Math.PI * p * 1000;\r\n\r\n  return Math.sqrt((tension * 9.807) / mu) / (2 * frequency);\r\n};\r\n\r\nexport const calculateDiameter = (frequency, length, tension, p = 1.14) => {\r\n  return Math.sqrt((tension * 9.807) / ((2 * length * frequency) ** 2 * (Math.PI * p * 1000))) * 2;\r\n};\r\n\r\nexport const inchToMeter = (value) => {\r\n  return (value * 2.54) / 100;\r\n};\r\n\r\nexport const getFrequency = function (note) {\r\n  const notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'];\r\n  let octave, keyNumber;\r\n\r\n  if (note.length === 3) {\r\n    octave = note.charAt(2);\r\n  } else {\r\n    octave = note.charAt(1);\r\n  }\r\n\r\n  keyNumber = notes.indexOf(note.slice(0, -1));\r\n\r\n  if (keyNumber < 3) {\r\n    keyNumber = keyNumber + 12 + (octave - 1) * 12 + 1;\r\n  } else {\r\n    keyNumber = keyNumber + (octave - 1) * 12 + 1;\r\n  }\r\n\r\n  // Return frequency of note\r\n  return 440 * Math.pow(2, (keyNumber - 49) / 12);\r\n};\r\n\r\nexport const getNoteNamesInScale = (scale) => {\r\n  const cMajorNotes = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];\r\n  const eFlatMajorNotes = ['C', 'D', 'D#', 'F', 'G', 'G#', 'A#'];\r\n  const aFlatMajorNotes = ['C', 'C#', 'D#', 'F', 'G', 'G#', 'A#'];\r\n\r\n  return scale === 'C Major'\r\n    ? cMajorNotes\r\n    : scale === 'E Flat Major'\r\n    ? eFlatMajorNotes\r\n    : aFlatMajorNotes;\r\n};\r\n\r\nexport const addNoteName = (strings, lowestNote = 'C2', tuning = 'C Major') => {\r\n  const notes = getNoteNamesInScale(tuning);\r\n\r\n  const lowestNoteName = lowestNote.charAt(0);\r\n  let lowestNoteNumber = parseInt(lowestNote.charAt(lowestNote.length - 1));\r\n  let offset = lowestNoteName.charCodeAt(0) - 'C'.charCodeAt(0);\r\n\r\n  const stringsWithNoteName = strings.map((string, index) => {\r\n    let noteIndex = index + offset;\r\n    if (noteIndex < 0) {\r\n      noteIndex += 7;\r\n      offset += 7;\r\n    }\r\n    if (noteIndex !== 0 && noteIndex % 7 === 0) lowestNoteNumber++;\r\n    const note = notes[noteIndex % 7] + lowestNoteNumber;\r\n    return { ...string, note, frequency: getFrequency(note) };\r\n  });\r\n\r\n  return stringsWithNoteName;\r\n};\r\n\r\nexport const calculateTensileStress = (length, width, tension) => {\r\n  return tension / (length * width);\r\n};\r\n\r\nexport const calculateStraightPillarCrossSectionArea = (diameter) => {\r\n  return (diameter / 1000 / 2) ** 2 * Math.PI;\r\n};\r\n\r\nexport const calculateDPillarCrossSectionArea = (width, thickness) => {\r\n  return (width / 1000) * (thickness / 1000);\r\n};\r\n\r\n// Takes angle in degrees\r\nexport const calculateYOffset = (angle, stringSpacing) => {\r\n  const radians = (angle * Math.PI) / 180;\r\n  return stringSpacing * Math.tan(radians);\r\n};\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { stringData } from '../data';\r\nimport { inchToMeter, calculateTension, addNoteName } from '../utils';\r\n\r\nconst strings = addNoteName(stringData.reverse()).map((string, index, array) => {\r\n  const x = array.length - index - 1;\r\n  const length = 0.71 * x ** 2 + 7 * x + 100;\r\n\r\n  return {\r\n    ...string,\r\n    length,\r\n    diameter: inchToMeter(string.diameter) * 1000,\r\n    tension: calculateTension(length / 1000, string.frequency, inchToMeter(string.diameter)),\r\n    materialDensity: 1.14,\r\n    linearMassDensity: 0,\r\n  };\r\n});\r\n\r\nconst initialState = {\r\n  strings,\r\n  defaultStringLengths: strings.map((string) => string.length),\r\n  selectedString: null,\r\n  stringSpacing: 10,\r\n  yOffset: 0,\r\n  materialDensity: 1.14,\r\n  tuning: 'C Major',\r\n  stringNumber: 36,\r\n  lowestNote: 'C2',\r\n  totalLoad: strings.reduce((acc, string) => acc + string.tension, 0),\r\n};\r\n\r\nconst stringReducer = createReducer(initialState, {\r\n  SELECT_STRING: (state, { payload }) => {\r\n    const selectedString = state.strings.find((string) => string.id === payload.stringId);\r\n    return { ...state, selectedString };\r\n  },\r\n\r\n  UPDATE_STRING: (state, { payload }) => {\r\n    const stringToUpdate = state.strings.find((string) => string.id === payload.stringId);\r\n\r\n    Object.keys(payload.params).forEach((key) => {\r\n      stringToUpdate[key] = payload.params[key];\r\n    });\r\n\r\n    state.selectedString = stringToUpdate;\r\n    state.totalLoad = state.strings.reduce((acc, string) => acc + string.tension, 0);\r\n  },\r\n\r\n  UPDATE_STRING_MATERIAL_DENSITY: (state, { payload }) => {\r\n    state.strings.forEach((string) => {\r\n      string.tension = calculateTension(\r\n        string.length / 1000,\r\n        string.frequency,\r\n        string.diameter / 1000,\r\n        payload.density\r\n      );\r\n\r\n      string.materialDensity = payload.density;\r\n    });\r\n\r\n    state.materialDensity = payload.density;\r\n    if (state.selectedString)\r\n      state.selectedString = state.strings.find((string) => string.id === state.selectedString.id);\r\n\r\n    state.totalLoad = state.strings.reduce((acc, string) => acc + string.tension, 0);\r\n  },\r\n\r\n  UPDATE_TUNING: (state, { payload }) => {\r\n    state.strings = addNoteName(state.strings, state.lowestNote, payload.tuning);\r\n    state.strings.forEach((string) => {\r\n      string.tension = calculateTension(\r\n        string.length / 1000,\r\n        string.frequency,\r\n        string.diameter / 1000,\r\n        string.materialDensity,\r\n        string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n      );\r\n    });\r\n    state.tuning = payload.tuning;\r\n    if (state.selectedString)\r\n      state.selectedString = state.strings.find((string) => string.id === state.selectedString.id);\r\n\r\n    state.totalLoad = state.strings.reduce((acc, string) => acc + string.tension, 0);\r\n  },\r\n\r\n  UPDATE_STRING_NUMBER: (state, { payload }) => {\r\n    let updatedStrings = state.strings;\r\n    let updatedDefaultStringLengths = [];\r\n\r\n    const difference = payload.stringNumber - state.stringNumber;\r\n    if (difference > 0) {\r\n      const newStrings = [];\r\n\r\n      for (let i = 0; i < difference; i++) {\r\n        const x = state.strings.length + i;\r\n        const newString = {\r\n          id: x + 1 + '',\r\n          length: 0.71 * x ** 2 + 7 * x + 100,\r\n          diameter: state.strings[0].diameter,\r\n          materialDensity: state.materialDensity,\r\n        };\r\n        newStrings.push(newString);\r\n      }\r\n\r\n      updatedStrings = addNoteName(\r\n        [...newStrings.reverse(), ...state.strings],\r\n        state.lowestNote,\r\n        state.tuning\r\n      );\r\n\r\n      updatedStrings = updatedStrings.map((string) => {\r\n        const tension = calculateTension(\r\n          string.length / 1000,\r\n          string.frequency,\r\n          string.diameter / 1000,\r\n          string.materialDensity,\r\n          string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n        );\r\n\r\n        return { ...string, tension };\r\n      });\r\n\r\n      updatedDefaultStringLengths = [\r\n        ...newStrings.map((string) => string.length),\r\n        ...state.defaultStringLengths,\r\n      ];\r\n    } else if (difference < 0) {\r\n      updatedStrings = addNoteName(\r\n        state.strings.slice(Math.abs(difference)),\r\n        state.lowestNote,\r\n        state.tuning\r\n      ).map((string) => {\r\n        const tension = calculateTension(\r\n          string.length / 1000,\r\n          string.frequency,\r\n          string.diameter / 1000,\r\n          string.materialDensity,\r\n          string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n        );\r\n\r\n        return { ...string, tension };\r\n      });\r\n\r\n      updatedDefaultStringLengths = state.defaultStringLengths.slice(Math.abs(difference));\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      stringNumber: payload.stringNumber,\r\n      strings: updatedStrings,\r\n      defaultStringLengths: updatedDefaultStringLengths,\r\n      totalLoad: state.strings.reduce((acc, string) => acc + string.tension, 0),\r\n      selectedString: null,\r\n    };\r\n  },\r\n\r\n  UPDATE_LOWEST_NOTE: (state, { payload }) => {\r\n    let updatedStrings = addNoteName(state.strings, payload.lowestNote, state.tuning);\r\n    updatedStrings = updatedStrings.map((string) => {\r\n      const tension = calculateTension(\r\n        string.length / 1000,\r\n        string.frequency,\r\n        string.diameter / 1000,\r\n        string.materialDensity,\r\n        string.materialDensity <= 0 ? 0 : string.linearMassDensity\r\n      );\r\n\r\n      return { ...string, tension };\r\n    });\r\n\r\n    return {\r\n      ...state,\r\n      lowestNote: payload.lowestNote,\r\n      strings: updatedStrings,\r\n      totalLoad: updatedStrings.reduce((acc, string) => acc + string.tension, 0),\r\n      selectedString:\r\n        state.selectedString &&\r\n        updatedStrings.find((string) => string.id === state.selectedString.id),\r\n    };\r\n  },\r\n\r\n  UPDATE_Y_OFFSET: (state, { payload }) => {\r\n    return { ...state, yOffset: payload.yOffset };\r\n  },\r\n\r\n  UPDATE_STRING_SPACING: (state, { payload }) => {\r\n    return { ...state, stringSpacing: payload.spacing };\r\n  },\r\n\r\n  UPDATE_STRING_STATE: (state, { payload }) => {\r\n    return { ...payload.state };\r\n  },\r\n});\r\n\r\nexport default stringReducer;\r\n","export const stringData = [\r\n  {\r\n    id: '1',\r\n    frequency: 1864.655,\r\n    length: 80.0,\r\n    tension: 6.661,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '2',\r\n    frequency: 1760.0,\r\n    length: 100.0,\r\n    tension: 9.272,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '3',\r\n    frequency: 1567.982,\r\n    length: 123.0,\r\n    tension: 11.134,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '4',\r\n    frequency: 1396.913,\r\n    length: 145.0,\r\n    tension: 12.281,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '5',\r\n    frequency: 1318.51,\r\n    length: 165.0,\r\n    tension: 14.168,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '6',\r\n    frequency: 1174.659,\r\n    length: 175.0,\r\n    tension: 12.649,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '7',\r\n    frequency: 1046.502,\r\n    length: 190.0,\r\n    tension: 11.835,\r\n    diameter: 0.025,\r\n  },\r\n  {\r\n    id: '8',\r\n    frequency: 932.328,\r\n    length: 225.0,\r\n    tension: 16.524,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '9',\r\n    frequency: 880.0,\r\n    length: 240.0,\r\n    tension: 16.749,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '10',\r\n    frequency: 783.991,\r\n    length: 260.0,\r\n    tension: 15.602,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '11',\r\n    frequency: 698.456,\r\n    length: 275.0,\r\n    tension: 13.853,\r\n    diameter: 0.028,\r\n  },\r\n  {\r\n    id: '12',\r\n    frequency: 659.255,\r\n    length: 295.0,\r\n    tension: 18.55,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '13',\r\n    frequency: 587.33,\r\n    length: 315.0,\r\n    tension: 16.787,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '14',\r\n    frequency: 523.251,\r\n    length: 330.0,\r\n    tension: 14.623,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '15',\r\n    frequency: 466.164,\r\n    length: 348.0,\r\n    tension: 12.907,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '16',\r\n    frequency: 440.0,\r\n    length: 370.0,\r\n    tension: 12.999,\r\n    diameter: 0.032,\r\n  },\r\n  {\r\n    id: '17',\r\n    frequency: 391.995,\r\n    length: 390.0,\r\n    tension: 14.507,\r\n    diameter: 0.036,\r\n  },\r\n  {\r\n    id: '18',\r\n    frequency: 349.228,\r\n    length: 415.0,\r\n    tension: 13.038,\r\n    diameter: 0.036,\r\n  },\r\n  {\r\n    id: '19',\r\n    frequency: 329.628,\r\n    length: 445.0,\r\n    tension: 13.355,\r\n    diameter: 0.036,\r\n  },\r\n  {\r\n    id: '20',\r\n    frequency: 293.665,\r\n    length: 477.0,\r\n    tension: 15.036,\r\n    diameter: 0.04,\r\n  },\r\n  {\r\n    id: '21',\r\n    frequency: 261.626,\r\n    length: 510.0,\r\n    tension: 23.057,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '22',\r\n    frequency: 233.082,\r\n    length: 545.0,\r\n    tension: 20.898,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '23',\r\n    frequency: 220.0,\r\n    length: 585.0,\r\n    tension: 21.451,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '24',\r\n    frequency: 195.998,\r\n    length: 628.0,\r\n    tension: 19.621,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '25',\r\n    frequency: 174.614,\r\n    length: 675.0,\r\n    tension: 17.991,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '26',\r\n    frequency: 164.814,\r\n    length: 728.0,\r\n    tension: 18.644,\r\n    diameter: 0.052,\r\n  },\r\n  {\r\n    id: '27',\r\n    frequency: 146.832,\r\n    length: 785.0,\r\n    tension: 19.955,\r\n    diameter: 0.056,\r\n  },\r\n  {\r\n    id: '28',\r\n    frequency: 130.813,\r\n    length: 850.0,\r\n    tension: 21.317,\r\n    diameter: 0.06,\r\n  },\r\n  {\r\n    id: '29',\r\n    frequency: 116.541,\r\n    length: 900.0,\r\n    tension: 22.262,\r\n    diameter: 0.065,\r\n  },\r\n  {\r\n    id: '30',\r\n    frequency: 110.0,\r\n    length: 950.0,\r\n    tension: 30.21,\r\n    diameter: 0.076,\r\n  },\r\n  {\r\n    id: '31',\r\n    frequency: 97.999,\r\n    length: 1000.0,\r\n    tension: 29.438,\r\n    diameter: 0.08,\r\n  },\r\n  {\r\n    id: '32',\r\n    frequency: 87.307,\r\n    length: 1045.0,\r\n    tension: 28.804,\r\n    diameter: 0.085,\r\n  },\r\n  {\r\n    id: '33',\r\n    frequency: 82.407,\r\n    length: 1090.0,\r\n    tension: 32.0,\r\n    diameter: 0.091,\r\n  },\r\n  {\r\n    id: '34',\r\n    frequency: 73.416,\r\n    length: 1130.0,\r\n    tension: 30.378,\r\n    diameter: 0.096,\r\n  },\r\n  {\r\n    id: '35',\r\n    frequency: 65.406,\r\n    length: 1168.0,\r\n    tension: 27.952,\r\n    diameter: 0.1,\r\n  },\r\n  {\r\n    id: '36',\r\n    frequency: 58.27,\r\n    length: 1205.0,\r\n    tension: 23.613,\r\n    diameter: 0.1,\r\n  },\r\n];\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = { angle: 45, control: null, stringBandThickness: 20, length: 0 };\r\n\r\nconst soundboardReducer = createReducer(initialState, {\r\n  UPDATE_SOUNDBOARD_ANGLE: (state, { payload }) => {\r\n    return { ...state, angle: payload.angle };\r\n  },\r\n\r\n  UPDATE_CONTROL_POSITION: (state, { payload }) => {\r\n    return { ...state, control: payload.position };\r\n  },\r\n\r\n  UPDATE_STRING_BAND_THICKNESS: (state, { payload }) => {\r\n    return { ...state, stringBandThickness: payload.thickness };\r\n  },\r\n\r\n  UPDATE_SOUNDBOARD_LENGTH: (state, { payload }) => {\r\n    return { ...state, length: payload.length };\r\n  },\r\n\r\n  UPDATE_SOUNDBOARD_STATE: (state, { payload }) => {\r\n    return { ...payload.state };\r\n  },\r\n});\r\n\r\nexport default soundboardReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  shape: 'Straight',\r\n  pillarDiameter: 30,\r\n  pillarWidth: 40,\r\n  pillarThickness: 20,\r\n  neckJointWidth: 2,\r\n};\r\n\r\nconst pillarReducer = createReducer(initialState, {\r\n  UPDATE_PILLAR_SHAPE: (state, { payload }) => {\r\n    return { ...state, shape: payload.shape };\r\n  },\r\n\r\n  UPDATE_PILLAR_DIAMETER: (state, { payload }) => {\r\n    return { ...state, pillarDiameter: payload.diameter };\r\n  },\r\n\r\n  UPDATE_PILLAR_WIDTH: (state, { payload }) => {\r\n    return { ...state, pillarWidth: payload.width };\r\n  },\r\n\r\n  UPDATE_PILLAR_THICKNESS: (state, { payload }) => {\r\n    return { ...state, pillarThickness: payload.thickness };\r\n  },\r\n\r\n  UPDATE_NECK_JOINT_WIDTH: (state, { payload }) => {\r\n    return { ...state, neckJointWidth: payload.width };\r\n  },\r\n\r\n  UPDATE_PILLAR_STATE: (state, { payload }) => {\r\n    return { ...payload.state };\r\n  },\r\n});\r\n\r\nexport default pillarReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  neckThickness: 40,\r\n  tuningPinLength: 20,\r\n  frontNeckThickness: 15,\r\n  backNeckThickness: 15,\r\n  frontNeckTuningPostLength: 10,\r\n  backNeckTuningPostLength: 10,\r\n  neckStyle: 'Standard',\r\n};\r\n\r\nconst neckReducer = createReducer(initialState, {\r\n  UPDATE_NECK_THICKNESS: (state, { payload }) => {\r\n    return { ...state, neckThickness: payload.thickness };\r\n  },\r\n\r\n  UPDATE_TUNING_PIN_LENGTH: (state, { payload }) => {\r\n    return { ...state, tuningPinLength: payload.length };\r\n  },\r\n\r\n  UPDATE_PARAGUAYAN_PARAMS: (state, { payload }) => {\r\n    Object.keys(payload.params).forEach((key) => {\r\n      state[key] = payload.params[key];\r\n    });\r\n  },\r\n\r\n  UPDATE_NECK_STYLE: (state, { payload }) => {\r\n    return { ...state, neckStyle: payload.style };\r\n  },\r\n\r\n  UPDATE_NECK_STATE: (state, { payload }) => {\r\n    return { ...payload.state };\r\n  },\r\n});\r\n\r\nexport default neckReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = { backgroundColor: 'burlywood' };\r\n\r\nconst settingsReducer = createReducer(initialState, {\r\n  UPDATE_BACKGROUND_COLOR: (state, { payload }) => {\r\n    return { ...state, backgroundColor: payload.color };\r\n  },\r\n});\r\n\r\nexport default settingsReducer;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport stringReducer from './reducers/stringReducer';\r\nimport soundboardReducer from './reducers/soundboardReducer';\r\nimport pillarReducer from './reducers/pillarReducer';\r\nimport neckReducer from './reducers/neckReducer';\r\nimport settingsReducer from './reducers/settingsReducer';\r\n\r\nconst reducers = combineReducers({\r\n  string: stringReducer,\r\n  soundboard: soundboardReducer,\r\n  pillar: pillarReducer,\r\n  neck: neckReducer,\r\n  settings: settingsReducer,\r\n});\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Button, InputGroup } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {\r\n  updateLowestNote,\r\n  updateStringNumber,\r\n  updateStringSpacing,\r\n} from '../actions/stringActions';\r\nimport { getNoteNamesInScale } from '../utils';\r\n\r\nconst Overview = () => {\r\n  const dispatch = useDispatch();\r\n  const { strings, stringNumber, lowestNote, tuning, stringSpacing } = useSelector(\r\n    (state) => state.string\r\n  );\r\n  let totalTension = 0;\r\n  strings.forEach((string) => {\r\n    totalTension += string.tension;\r\n  });\r\n\r\n  const [numberOfStrings, setNumberOfStrings] = useState(stringNumber);\r\n  const [note, setNote] = useState(lowestNote);\r\n  const [spacing, setSpacing] = useState(stringSpacing);\r\n  const [errorMessage, setErrorMessage] = useState();\r\n\r\n  useEffect(() => {\r\n    setNumberOfStrings(stringNumber);\r\n    setNote(lowestNote);\r\n    setSpacing(stringSpacing);\r\n  }, [stringNumber, lowestNote, stringSpacing]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setErrorMessage(null);\r\n\r\n    if (note !== lowestNote) {\r\n      const noteNames = getNoteNamesInScale(tuning);\r\n\r\n      const noteName = note.length === 3 ? note.substring(0, 2) : note.substring(0, 1);\r\n      if (noteNames.includes(noteName)) {\r\n        dispatch(updateLowestNote(note));\r\n      } else {\r\n        setErrorMessage('Invalid note, the valid notes are: ' + noteNames);\r\n      }\r\n    }\r\n    if (parseInt(numberOfStrings) !== stringNumber) {\r\n      dispatch(updateStringNumber(parseInt(numberOfStrings)));\r\n    }\r\n    if (parseFloat(spacing) !== stringSpacing) {\r\n      dispatch(updateStringSpacing(parseFloat(spacing)));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Overview</h5>\r\n\r\n      <span>\r\n        Total Tension: <b>{totalTension.toFixed(2)}</b> kg\r\n      </span>\r\n      <p></p>\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormContainer>\r\n          <InputContainer className='mb-3'>\r\n            <Form.Label>Number of Strings</Form.Label>\r\n\r\n            <Form.Control\r\n              type='number'\r\n              value={numberOfStrings}\r\n              onChange={(e) => setNumberOfStrings(e.target.value)}\r\n            ></Form.Control>\r\n          </InputContainer>\r\n\r\n          <InputContainer className='mb-3'>\r\n            <Form.Label>String Spacing</Form.Label>\r\n\r\n            <Form.Control\r\n              type='number'\r\n              value={spacing}\r\n              max={20}\r\n              min={5}\r\n              onChange={(e) => setSpacing(e.target.value)}\r\n            ></Form.Control>\r\n          </InputContainer>\r\n\r\n          <InputContainer className='mb-3'>\r\n            <Form.Label>Lowest Note</Form.Label>\r\n\r\n            <InputGroup hasValidation>\r\n              <Form.Control\r\n                type='text'\r\n                value={note}\r\n                onChange={(e) => setNote(e.target.value)}\r\n                required\r\n                isInvalid={errorMessage}\r\n              />\r\n              <Form.Control.Feedback type='invalid'>{errorMessage}</Form.Control.Feedback>\r\n            </InputGroup>\r\n          </InputContainer>\r\n        </FormContainer>\r\n        <Button className='btn-sm' type='submit' variant='secondary'>\r\n          Apply\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Overview;\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst InputContainer = styled(Form.Group)`\r\n  flex: 1;\r\n`;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const selectString = (stringId) => async (dispatch) => {\r\n  dispatch(createAction('SELECT_STRING')({ stringId }));\r\n};\r\n\r\nexport const updateString = (stringId, params) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING')({ stringId, params }));\r\n};\r\n\r\nexport const updateStringMaterialDensity = (density) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING_MATERIAL_DENSITY')({ density }));\r\n};\r\n\r\nexport const updateTuning = (tuning) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_TUNING')({ tuning }));\r\n};\r\n\r\nexport const updateStringNumber = (stringNumber) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING_NUMBER')({ stringNumber }));\r\n};\r\n\r\nexport const updateLowestNote = (lowestNote) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_LOWEST_NOTE')({ lowestNote }));\r\n};\r\n\r\nexport const updateYOffset = (yOffset) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_Y_OFFSET')({ yOffset }));\r\n};\r\n\r\nexport const updateStringSpacing = (spacing) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING_SPACING')({ spacing }));\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updateSoundboardAngle = (angle) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_SOUNDBOARD_ANGLE')({ angle }));\r\n};\r\n\r\nexport const updateControlPosition = (position) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_CONTROL_POSITION')({ position }));\r\n};\r\n\r\nexport const updateStringBandThickness = (thickness) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_STRING_BAND_THICKNESS')({ thickness }));\r\n};\r\n\r\nexport const updateSoundboardLength = (length) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_SOUNDBOARD_LENGTH')({ length }));\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, InputGroup, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { updateSoundboardAngle, updateStringBandThickness } from '../actions/soundboardActions';\r\nimport { calculateTensileStress } from '../utils';\r\n\r\nconst SoundboardOptions = () => {\r\n  const dispatch = useDispatch();\r\n  const { totalLoad } = useSelector((state) => state.string);\r\n  const { angle, stringBandThickness, length } = useSelector((state) => state.soundboard);\r\n\r\n  const [soundboardAngle, setSoundboardAngle] = useState(angle);\r\n  const [bandThickness, setBandThickness] = useState(stringBandThickness);\r\n\r\n  useEffect(() => {\r\n    setSoundboardAngle(angle);\r\n    setBandThickness(stringBandThickness);\r\n  }, [angle, stringBandThickness]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (soundboardAngle && soundboardAngle !== angle)\r\n      dispatch(updateSoundboardAngle(parseInt(soundboardAngle)));\r\n    if (bandThickness && bandThickness !== stringBandThickness)\r\n      dispatch(updateStringBandThickness(bandThickness));\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <h5>Soundboard</h5>\r\n\r\n      <Form.Group className='mb-3'>\r\n        <Form.Label>Soundboard Angle</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={soundboardAngle}\r\n            onChange={(e) => setSoundboardAngle(e.target.value)}\r\n          ></Form.Control>\r\n          <InputGroupText>&#176;</InputGroupText>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <p>\r\n        Tensile Stress:{' '}\r\n        <b>\r\n          {(\r\n            calculateTensileStress(\r\n              length / 1000,\r\n              stringBandThickness / 1000,\r\n              totalLoad * 0.5 * 9.807\r\n            ) / 1000000\r\n          ).toFixed(6)}\r\n        </b>{' '}\r\n        MPa\r\n      </p>\r\n\r\n      <Form.Group className='mb-3'>\r\n        <Form.Label>String Band Thickness</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={bandThickness}\r\n            onChange={(e) => setBandThickness(e.target.value)}\r\n          ></Form.Control>\r\n          <InputGroupText>mm</InputGroupText>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Button className='btn-sm' type='submit' variant='secondary'>\r\n        Apply\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SoundboardOptions;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Button, Form, InputGroup } from 'react-bootstrap';\r\nimport {\r\n  updatePillarShape,\r\n  updatePillarDiameter,\r\n  updatePillarWidth,\r\n  updatePillarThickness,\r\n  updateNeckJointWidth,\r\n} from '../actions/pillarActions';\r\nimport {\r\n  calculateStraightPillarCrossSectionArea,\r\n  calculateDPillarCrossSectionArea,\r\n} from '../utils';\r\n\r\nconst PillarOptions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { totalLoad } = useSelector((state) => state.string);\r\n  const { shape, pillarDiameter, pillarWidth, pillarThickness, neckJointWidth } = useSelector(\r\n    (state) => state.pillar\r\n  );\r\n\r\n  const [diameter, setDiameter] = useState(pillarDiameter);\r\n  const [width, setWidth] = useState(pillarWidth);\r\n  const [thickness, setThickness] = useState(pillarThickness);\r\n  const [neckJoint, setNeckJoint] = useState(neckJointWidth);\r\n\r\n  const updateShape = (shape) => {\r\n    dispatch(updatePillarShape(shape));\r\n  };\r\n\r\n  const updateDiameter = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updatePillarDiameter(diameter));\r\n  };\r\n\r\n  const updateWidthAndThickness = (e) => {\r\n    e.preventDefault();\r\n    if (width && width !== pillarWidth) dispatch(updatePillarWidth(width));\r\n    if (thickness && thickness !== pillarThickness) dispatch(updatePillarThickness(thickness));\r\n    if (neckJoint && neckJoint !== neckJointWidth)\r\n      dispatch(updateNeckJointWidth(parseInt(neckJoint)));\r\n  };\r\n\r\n  const calculateCrossSectionArea = () => {\r\n    if (shape === 'Straight') {\r\n      return calculateStraightPillarCrossSectionArea(pillarDiameter);\r\n    } else {\r\n      return calculateDPillarCrossSectionArea(pillarWidth, pillarThickness);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Pillar</h5>\r\n\r\n      <StyledButton\r\n        variant={shape === 'Straight' ? 'primary' : 'secondary'}\r\n        onClick={() => updateShape('Straight')}\r\n      >\r\n        Straight\r\n      </StyledButton>\r\n      <StyledButton\r\n        variant={shape === 'D Shape' ? 'primary' : 'secondary'}\r\n        onClick={() => updateShape('D Shape')}\r\n      >\r\n        D Shape\r\n      </StyledButton>\r\n\r\n      <p>\r\n        Compresive Stress:{' '}\r\n        <b>{((totalLoad * 0.6 * 9.807) / calculateCrossSectionArea() / 1000000).toFixed(6)}</b> MPa\r\n      </p>\r\n\r\n      {shape === 'Straight' ? (\r\n        <Form onSubmit={updateDiameter}>\r\n          <Form.Group className='mb-3'>\r\n            <Form.Label>Pillar Diameter</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type='number'\r\n                value={diameter}\r\n                onChange={(e) => setDiameter(e.target.value)}\r\n              ></Form.Control>\r\n              <InputGroupText>mm</InputGroupText>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <Button className='btn-sm' type='submit' variant='secondary' disabled={!diameter}>\r\n            Apply\r\n          </Button>\r\n        </Form>\r\n      ) : (\r\n        <Form onSubmit={updateWidthAndThickness}>\r\n          <Form.Group className='mb-1'>\r\n            <Form.Label>Pillar Width</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type='number'\r\n                value={width}\r\n                onChange={(e) => setWidth(e.target.value)}\r\n              ></Form.Control>\r\n              <InputGroupText>mm</InputGroupText>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <Form.Group className='mb-1'>\r\n            <Form.Label>Pillar Thickness</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type='number'\r\n                value={thickness}\r\n                onChange={(e) => setThickness(e.target.value)}\r\n              ></Form.Control>\r\n              <InputGroupText>mm</InputGroupText>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <Form.Group className='mb-3'>\r\n            <Form.Label>Neck Joint Width</Form.Label>\r\n            <Form.Range\r\n              max={5}\r\n              min={1}\r\n              value={neckJoint}\r\n              onChange={(e) => setNeckJoint(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Button className='btn-sm' type='submit' variant='secondary'>\r\n            Apply\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PillarOptions;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin: 0 1rem 1rem 0;\r\n`;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updatePillarShape = (shape) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_SHAPE')({ shape }));\r\n};\r\n\r\nexport const updatePillarDiameter = (diameter) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_DIAMETER')({ diameter }));\r\n};\r\n\r\nexport const updatePillarWidth = (width) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_WIDTH')({ width }));\r\n};\r\n\r\nexport const updatePillarThickness = (thickness) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PILLAR_THICKNESS')({ thickness }));\r\n};\r\n\r\nexport const updateNeckJointWidth = (width) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_NECK_JOINT_WIDTH')({ width }));\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updateNeckThickness = (thickness) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_NECK_THICKNESS')({ thickness }));\r\n};\r\n\r\nexport const updateTuningPinLength = (length) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_TUNING_PIN_LENGTH')({ length }));\r\n};\r\n\r\nexport const updateParaguayanParams = (params) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_PARAGUAYAN_PARAMS')({ params }));\r\n};\r\n\r\nexport const updateNeckStyle = (style) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_NECK_STYLE')({ style }));\r\n};\r\n","import React, { useState, useMemo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, InputGroup, Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport {\r\n  updateTuningPinLength,\r\n  updateNeckThickness,\r\n  updateParaguayanParams,\r\n  updateNeckStyle,\r\n} from '../actions/neckActions';\r\nimport { stringX, calculateTensileStress } from '../utils';\r\n\r\nconst NeckOptions = () => {\r\n  const dispatch = useDispatch();\r\n  const { strings, stringSpacing, stringNumber, totalLoad } = useSelector((state) => state.string);\r\n  const {\r\n    neckThickness,\r\n    tuningPinLength,\r\n    frontNeckThickness,\r\n    frontNeckTuningPostLength,\r\n    backNeckThickness,\r\n    backNeckTuningPostLength,\r\n    neckStyle,\r\n  } = useSelector((state) => state.neck);\r\n\r\n  const [thickness, setThickness] = useState(neckThickness);\r\n  const [tuningPinLen, setTuningPinLen] = useState(tuningPinLength);\r\n  const [frontThickness, setFrontThickness] = useState(frontNeckThickness);\r\n  const [frontTuningPostLength, setFrontTuningPostLength] = useState(frontNeckTuningPostLength);\r\n  const [backThickness, setBackThickness] = useState(backNeckThickness);\r\n  const [backTuningPostLength, setBackTuningPostLength] = useState(backNeckTuningPostLength);\r\n\r\n  useEffect(() => {\r\n    setThickness(neckThickness);\r\n    setTuningPinLen(tuningPinLength);\r\n    setFrontThickness(frontNeckThickness);\r\n    setFrontTuningPostLength(frontNeckTuningPostLength);\r\n    setBackThickness(backNeckThickness);\r\n    setBackTuningPostLength(backNeckTuningPostLength);\r\n  }, [\r\n    neckThickness,\r\n    tuningPinLength,\r\n    frontNeckThickness,\r\n    frontNeckTuningPostLength,\r\n    backNeckThickness,\r\n    backNeckTuningPostLength,\r\n  ]);\r\n\r\n  const frontNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 0) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const backNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 1) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const torqueImbalance = useMemo(() => {\r\n    const imbalance =\r\n      (frontNeckTuningPostLength / 1000) * frontNeckLoad * 9.807 -\r\n      (backNeckTuningPostLength / 1000) * backNeckLoad * 9.807;\r\n\r\n    return imbalance;\r\n  }, [frontNeckTuningPostLength, backNeckTuningPostLength, frontNeckLoad, backNeckLoad]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (neckStyle === 'Standard') {\r\n      dispatch(updateNeckThickness(parseFloat(thickness)));\r\n      dispatch(updateTuningPinLength(parseFloat(tuningPinLen)));\r\n    } else if (neckStyle === 'Paraguayan') {\r\n      dispatch(\r\n        updateParaguayanParams({\r\n          frontNeckThickness: frontThickness,\r\n          frontNeckTuningPostLength: frontTuningPostLength,\r\n          backNeckThickness: backThickness,\r\n          backNeckTuningPostLength: backTuningPostLength,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Neck</h5>\r\n\r\n      <StyledButton\r\n        variant={neckStyle === 'Standard' ? 'primary' : 'secondary'}\r\n        onClick={() => neckStyle !== 'Standard' && dispatch(updateNeckStyle('Standard'))}\r\n      >\r\n        Standard\r\n      </StyledButton>\r\n      <StyledButton\r\n        variant={neckStyle === 'Paraguayan' ? 'primary' : 'secondary'}\r\n        onClick={() => neckStyle !== 'Paraguayan' && dispatch(updateNeckStyle('Paraguayan'))}\r\n      >\r\n        Paraguayan\r\n      </StyledButton>\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        {neckStyle === 'Standard' && (\r\n          <>\r\n            <p>\r\n              Tensile Stress:{' '}\r\n              <b>\r\n                {(\r\n                  calculateTensileStress(\r\n                    (stringX(stringNumber + 3, stringSpacing) +\r\n                      20 -\r\n                      (stringX(-4, stringSpacing) - 30)) /\r\n                      0.4 /\r\n                      1000,\r\n                    neckThickness / 1000,\r\n                    totalLoad * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)}\r\n              </b>{' '}\r\n              MPa\r\n            </p>\r\n\r\n            <p>\r\n              Torque: <b>{((tuningPinLength / 1000) * totalLoad * 9.807).toFixed(6)}</b> N m\r\n            </p>\r\n\r\n            <Form.Group className='mb-1'>\r\n              <Form.Label>Neck Thickness</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={thickness}\r\n                  onChange={(e) => setThickness(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group className='mb-3'>\r\n              <Form.Label>Tuning Pin Length</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={tuningPinLen}\r\n                  onChange={(e) => setTuningPinLen(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n          </>\r\n        )}\r\n\r\n        {neckStyle === 'Paraguayan' && (\r\n          <>\r\n            <OverlayTrigger\r\n              placement='right'\r\n              overlay={\r\n                <Tooltip id='torque-imbalance-tooltip'>\r\n                  Front neck torque is {Math.abs(torqueImbalance).toFixed(6)} Nm{' '}\r\n                  {torqueImbalance > 0 ? 'greater' : 'less'} than back neck torque\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <BlockSpan>\r\n                Torque Imbalance <b>{torqueImbalance.toFixed(6)}</b> N m\r\n              </BlockSpan>\r\n            </OverlayTrigger>\r\n\r\n            <p>\r\n              <b>Front Neck</b>\r\n            </p>\r\n\r\n            <p>\r\n              Tensile Stress:{' '}\r\n              <b>\r\n                {(\r\n                  calculateTensileStress(\r\n                    (stringX(stringNumber + 3, stringSpacing) +\r\n                      20 -\r\n                      (stringX(-4, stringSpacing) - 30)) /\r\n                      0.4 /\r\n                      1000,\r\n                    frontNeckThickness / 1000,\r\n                    (frontNeckLoad / 2) * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)}\r\n              </b>{' '}\r\n              MPa\r\n            </p>\r\n\r\n            <Form.Group className='mb-1'>\r\n              <Form.Label>Neck Thickness</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={frontThickness}\r\n                  onChange={(e) => setFrontThickness(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group className='mb-3'>\r\n              <Form.Label>Tuning Post Length</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={frontTuningPostLength}\r\n                  onChange={(e) => setFrontTuningPostLength(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <p>\r\n              <b>Back Neck</b>\r\n            </p>\r\n\r\n            <p>\r\n              Tensile Stress:{' '}\r\n              <b>\r\n                {(\r\n                  calculateTensileStress(\r\n                    (stringX(stringNumber + 3, stringSpacing) +\r\n                      20 -\r\n                      (stringX(-4, stringSpacing) - 30)) /\r\n                      0.4 /\r\n                      1000,\r\n                    backNeckThickness / 1000,\r\n                    (backNeckLoad / 2) * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)}\r\n              </b>{' '}\r\n              MPa\r\n            </p>\r\n\r\n            <Form.Group className='mb-1'>\r\n              <Form.Label>Neck Thickness</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={backThickness}\r\n                  onChange={(e) => setBackThickness(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group className='mb-3'>\r\n              <Form.Label>Tuning Post Length</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type='number'\r\n                  value={backTuningPostLength}\r\n                  onChange={(e) => setBackTuningPostLength(e.target.value)}\r\n                ></Form.Control>\r\n                <InputGroupText>mm</InputGroupText>\r\n              </InputGroup>\r\n            </Form.Group>\r\n          </>\r\n        )}\r\n\r\n        <Button className='btn-sm' type='submit' variant='secondary'>\r\n          Apply\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NeckOptions;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin: 0 1rem 1rem 0;\r\n`;\r\n\r\nconst BlockSpan = styled.span`\r\n  display: inline-block;\r\n  margin-bottom: 1rem;\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { updateTuning } from \"../actions/stringActions\";\r\n\r\nconst TuningOptions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { tuning } = useSelector((state) => state.string);\r\n\r\n  const updateStringTuning = (tuning) => {\r\n    dispatch(updateTuning(tuning));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>Tuning</h5>\r\n\r\n      <StyledButton\r\n        variant={tuning === \"C Major\" ? \"primary\" : \"secondary\"}\r\n        onClick={() => updateStringTuning(\"C Major\")}\r\n      >\r\n        C Major\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={tuning === \"E Flat Major\" ? \"primary\" : \"secondary\"}\r\n        onClick={() => updateStringTuning(\"E Flat Major\")}\r\n      >\r\n        E &#9837; Major\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={tuning === \"A Flat Major\" ? \"primary\" : \"secondary\"}\r\n        onClick={() => updateStringTuning(\"A Flat Major\")}\r\n      >\r\n        A &#9837; Major\r\n      </StyledButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TuningOptions;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin-right: 1rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { updateStringMaterialDensity } from '../actions/stringActions';\r\n\r\nconst StringMaterialOptions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { materialDensity } = useSelector((state) => state.string);\r\n\r\n  const [density, setDensity] = useState(materialDensity);\r\n\r\n  useEffect(() => {\r\n    setDensity(materialDensity);\r\n  }, [materialDensity]);\r\n\r\n  const updateMaterial = (density) => {\r\n    dispatch(updateStringMaterialDensity(density));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5>\r\n        <OverlayTrigger\r\n          placement='right'\r\n          overlay={<Tooltip>This setting applies to all strings</Tooltip>}\r\n        >\r\n          <span>String Material (global)</span>\r\n        </OverlayTrigger>\r\n      </h5>\r\n\r\n      <StyledButton\r\n        variant={density === 1.14 ? 'primary' : materialDensity === 1.14 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(1.14)}\r\n      >\r\n        Nylon\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 8.77 ? 'primary' : materialDensity === 8.77 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(8.77)}\r\n      >\r\n        Brass\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 7.8 ? 'primary' : materialDensity === 7.8 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(7.8)}\r\n      >\r\n        Steel\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 8.94 ? 'primary' : materialDensity === 8.94 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(8.94)}\r\n      >\r\n        Copper\r\n      </StyledButton>\r\n\r\n      <StyledButton\r\n        variant={density === 8.85 ? 'primary' : materialDensity === 8.85 ? 'dark' : 'secondary'}\r\n        onClick={() => setDensity(8.85)}\r\n      >\r\n        Phosphor Bronze\r\n      </StyledButton>\r\n\r\n      <ApplyButton\r\n        className='btn-sm mt-2'\r\n        variant='secondary'\r\n        onClick={() => updateMaterial(density)}\r\n        disabled={materialDensity === density}\r\n      >\r\n        Apply\r\n      </ApplyButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StringMaterialOptions;\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin-right: 1rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst ApplyButton = styled(Button)`\r\n  display: block;\r\n`;\r\n","export const stringGaugeData = [\r\n  {\r\n    name: 'd’Addario PB020 0.51mm',\r\n    diameter: 0.51,\r\n    linearMassDensity: 0.00145,\r\n  },\r\n  {\r\n    name: 'd’Addario PB021 0.53mm',\r\n    diameter: 0.53,\r\n    linearMassDensity: 0.0016,\r\n  },\r\n  {\r\n    name: 'd’Addario PB022 0.56mm',\r\n    diameter: 0.56,\r\n    linearMassDensity: 0.00176,\r\n  },\r\n  {\r\n    name: 'd’Addario PB023 0.58mm',\r\n    diameter: 0.58,\r\n    linearMassDensity: 0.00193,\r\n  },\r\n  {\r\n    name: 'd’Addario PB024 0.61mm',\r\n    diameter: 0.61,\r\n    linearMassDensity: 0.00209,\r\n  },\r\n  {\r\n    name: 'd’Addario PB025 0.64mm',\r\n    diameter: 0.64,\r\n    linearMassDensity: 0.00227,\r\n  },\r\n  {\r\n    name: 'd’Addario PB026 0.66mm',\r\n    diameter: 0.66,\r\n    linearMassDensity: 0.00244,\r\n  },\r\n  {\r\n    name: 'd’Addario PB027 0.69mm',\r\n    diameter: 0.69,\r\n    linearMassDensity: 0.00265,\r\n  },\r\n  {\r\n    name: 'd’Addario PB029 0.74mm',\r\n    diameter: 0.74,\r\n    linearMassDensity: 0.0031,\r\n  },\r\n  {\r\n    name: 'd’Addario PB030 0.76mm',\r\n    diameter: 0.76,\r\n    linearMassDensity: 0.00333,\r\n  },\r\n  {\r\n    name: 'd’Addario PB032 0.81mm',\r\n    diameter: 0.81,\r\n    linearMassDensity: 0.00375,\r\n  },\r\n  {\r\n    name: 'd’Addario PB034 0.86mm',\r\n    diameter: 0.86,\r\n    linearMassDensity: 0.00427,\r\n  },\r\n  {\r\n    name: 'd’Addario PB035 0.89mm',\r\n    diameter: 0.89,\r\n    linearMassDensity: 0.00453,\r\n  },\r\n  {\r\n    name: 'd’Addario PB036 0.91mm',\r\n    diameter: 0.91,\r\n    linearMassDensity: 0.00479,\r\n  },\r\n  {\r\n    name: 'd’Addario PB039 0.99mm',\r\n    diameter: 0.99,\r\n    linearMassDensity: 0.00556,\r\n  },\r\n  {\r\n    name: 'd’Addario PB042 1.07mm',\r\n    diameter: 1.07,\r\n    linearMassDensity: 0.00656,\r\n  },\r\n  {\r\n    name: 'd’Addario PB045 1.14mm',\r\n    diameter: 1.14,\r\n    linearMassDensity: 0.00746,\r\n  },\r\n  {\r\n    name: 'd’Addario PB047 1.19mm',\r\n    diameter: 1.19,\r\n    linearMassDensity: 0.00809,\r\n  },\r\n  {\r\n    name: 'd’Addario PB049 1.24mm',\r\n    diameter: 1.24,\r\n    linearMassDensity: 0.00878,\r\n  },\r\n  {\r\n    name: 'd’Addario PB052 1.32mm',\r\n    diameter: 1.32,\r\n    linearMassDensity: 0.00986,\r\n  },\r\n  {\r\n    name: 'd’Addario PB053 1.35mm',\r\n    diameter: 1.35,\r\n    linearMassDensity: 0.01017,\r\n  },\r\n  {\r\n    name: 'd’Addario PB056 1.42mm',\r\n    diameter: 1.42,\r\n    linearMassDensity: 0.01134,\r\n  },\r\n  {\r\n    name: 'd’Addario PB059 1.50mm',\r\n    diameter: 1.5,\r\n    linearMassDensity: 0.0126,\r\n  },\r\n  {\r\n    name: 'd’Addario PB060 1.52mm',\r\n    diameter: 1.52,\r\n    linearMassDensity: 0.01304,\r\n  },\r\n  {\r\n    name: 'd’Addario PB062 1.57mm',\r\n    diameter: 1.57,\r\n    linearMassDensity: 0.01387,\r\n  },\r\n  {\r\n    name: 'd’Addario PB064 1.63mm',\r\n    diameter: 1.63,\r\n    linearMassDensity: 0.01478,\r\n  },\r\n  {\r\n    name: 'd’Addario PB066 1.68mm',\r\n    diameter: 1.68,\r\n    linearMassDensity: 0.01566,\r\n  },\r\n  {\r\n    name: 'd’Addario PB070 1.78mm',\r\n    diameter: 1.78,\r\n    linearMassDensity: 0.01729,\r\n  },\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, InputGroup, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { updateString } from '../actions/stringActions';\r\nimport { calculateTension, calculateFrequency, calculateLength, calculateDiameter } from '../utils';\r\nimport { stringGaugeData } from '../stringGaugeData';\r\n\r\nconst StringOptions = () => {\r\n  const dispatch = useDispatch();\r\n  const { selectedString } = useSelector((state) => state.string);\r\n\r\n  const [frequency, setFrequency] = useState(0);\r\n  const [length, setLength] = useState(0);\r\n  const [diameter, setDiameter] = useState(0);\r\n  const [tension, setTension] = useState(0);\r\n  const [material, setMaterial] = useState(0);\r\n  const [lmd, setLmd] = useState(0);\r\n  const [stringGauge, setStringGauge] = useState(0.00145);\r\n  const [selectedField, setSelectField] = useState('tension');\r\n\r\n  useEffect(() => {\r\n    if (selectedString) {\r\n      setFrequency(selectedString.frequency);\r\n      setLength(selectedString.length);\r\n      setDiameter(selectedString.diameter);\r\n      setTension(selectedString.tension);\r\n      setMaterial(selectedString.materialDensity);\r\n      setLmd(selectedString.linearMassDensity);\r\n    }\r\n  }, [selectedString]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let newFrequency = parseFloat(frequency),\r\n      newLength = parseFloat(length),\r\n      newDiameter = parseFloat(diameter),\r\n      newTension = parseFloat(tension);\r\n\r\n    switch (selectedField) {\r\n      case 'frequency':\r\n        newFrequency = calculateFrequency(\r\n          length / 1000,\r\n          tension,\r\n          diameter / 1000,\r\n          material,\r\n          material === 0 ? lmd : material === -1 ? stringGauge : 0\r\n        );\r\n        break;\r\n      case 'length':\r\n        newLength =\r\n          calculateLength(\r\n            frequency,\r\n            tension,\r\n            diameter / 1000,\r\n            material,\r\n            material === 0 ? lmd : material === -1 ? stringGauge : 0\r\n          ) * 1000;\r\n        break;\r\n      case 'diameter':\r\n        newDiameter = calculateDiameter(frequency, length / 1000, tension, material) * 1000;\r\n        break;\r\n      case 'tension':\r\n        newTension = calculateTension(\r\n          frequency,\r\n          length / 1000,\r\n          diameter / 1000,\r\n          material,\r\n          material === 0 ? lmd : material === -1 ? stringGauge : 0\r\n        );\r\n        break;\r\n      default:\r\n    }\r\n\r\n    let params = {\r\n      frequency: newFrequency,\r\n      length: newLength,\r\n      diameter: newDiameter,\r\n      tension: newTension,\r\n      materialDensity: material,\r\n    };\r\n\r\n    if (material === 0) params = { ...params, linearMassDensity: parseFloat(lmd) };\r\n    if (material === -1) params = { ...params, linearMassDensity: stringGauge };\r\n\r\n    dispatch(updateString(selectedString.id, params));\r\n  };\r\n\r\n  if (!selectedString) return null;\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <h5>String ({selectedString.note})</h5>\r\n\r\n      <Form.Group className='mb-1'>\r\n        <Form.Label>Frequency</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={frequency}\r\n            onChange={(e) => setFrequency(e.target.value)}\r\n            disabled={selectedField === 'frequency'}\r\n          />\r\n          <InputGroupText>Hz</InputGroupText>\r\n          <RadioContainer>\r\n            <Form.Check\r\n              type='radio'\r\n              checked={selectedField === 'frequency'}\r\n              onChange={() => setSelectField('frequency')}\r\n              name='stringinput'\r\n            />\r\n          </RadioContainer>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group className='mb-1'>\r\n        <Form.Label>Length</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={length}\r\n            onChange={(e) => setLength(e.target.value)}\r\n            disabled={selectedField === 'length'}\r\n          />\r\n          <InputGroupText>mm</InputGroupText>\r\n          <RadioContainer>\r\n            <Form.Check\r\n              type='radio'\r\n              checked={selectedField === 'length'}\r\n              onChange={() => setSelectField('length')}\r\n              name='stringinput'\r\n            />\r\n          </RadioContainer>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {material > 0 && (\r\n        <Form.Group className='mb-1'>\r\n          <Form.Label>Diameter</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type='number'\r\n              value={diameter}\r\n              onChange={(e) => setDiameter(e.target.value)}\r\n              disabled={selectedField === 'diameter'}\r\n            />\r\n            <InputGroupText>mm</InputGroupText>\r\n            <RadioContainer>\r\n              <Form.Check\r\n                type='radio'\r\n                checked={selectedField === 'diameter'}\r\n                onChange={() => setSelectField('diameter')}\r\n                name='stringinput'\r\n              />\r\n            </RadioContainer>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group className='mb-1'>\r\n        <Form.Label>Tension</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type='number'\r\n            value={tension}\r\n            onChange={(e) => setTension(e.target.value)}\r\n            disabled={selectedField === 'tension'}\r\n          />\r\n          <InputGroupText>kg</InputGroupText>\r\n          <RadioContainer>\r\n            <Form.Check\r\n              type='radio'\r\n              checked={selectedField === 'tension'}\r\n              onChange={() => setSelectField('tension')}\r\n              name='stringinput'\r\n            />\r\n          </RadioContainer>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group className={material === 0 || material === -1 ? 'mb-1' : 'mb-3'}>\r\n        <Form.Label>Material</Form.Label>\r\n        <Form.Select\r\n          value={material}\r\n          onChange={(e) => {\r\n            if (\r\n              (e.target.value === '0' || e.target.value === '-1') &&\r\n              selectedField === 'diameter'\r\n            ) {\r\n              setSelectField('tension');\r\n            }\r\n            setMaterial(parseFloat(e.target.value));\r\n          }}\r\n        >\r\n          <option value={1.14}>Nylon</option>\r\n          <option value={8.77}>Brass</option>\r\n          <option value={7.8}>Steel</option>\r\n          <option value={8.94}>Copper</option>\r\n          <option value={8.85}>Phosphor Bronze</option>\r\n          <option value={-1}>Phosphor Bronze Wound</option>\r\n          <option value={0}>Other</option>\r\n        </Form.Select>\r\n      </Form.Group>\r\n\r\n      {material === -1 && (\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label>String Gauge</Form.Label>\r\n          <Form.Select\r\n            value={stringGauge}\r\n            onChange={(e) => {\r\n              setStringGauge(parseFloat(e.target.value));\r\n            }}\r\n          >\r\n            {stringGaugeData.map((gauge) => {\r\n              return (\r\n                <option key={gauge.diameter} value={gauge.linearMassDensity}>\r\n                  {gauge.name}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Select>\r\n        </Form.Group>\r\n      )}\r\n\r\n      {material === 0 && (\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label>Linear Mass Density (mass/length)</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control type='number' value={lmd} onChange={(e) => setLmd(e.target.value)} />\r\n            <InputGroupText>kg/m</InputGroupText>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Button\r\n        className='btn-sm'\r\n        type='submit'\r\n        variant='secondary'\r\n        disabled={\r\n          !(\r\n            (frequency || selectedField === 'frequency') &&\r\n            (length || selectedField === 'length') &&\r\n            (diameter || selectedField === 'diameter') &&\r\n            (tension || selectedField === 'tension')\r\n          )\r\n        }\r\n      >\r\n        Apply\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default StringOptions;\r\n\r\nconst InputGroupText = styled(InputGroup.Text)`\r\n  min-width: 70px;\r\n  display: inline-block;\r\n  text-align: center;\r\n`;\r\n\r\nconst RadioContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 10px;\r\n`;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport Overview from './Overview';\r\nimport SoundboardOptions from './SoundboardOptions';\r\nimport PillarOptions from './PillarOptions';\r\nimport NeckOptions from './NeckOptions';\r\nimport TuningOptions from './TuningOptions';\r\nimport StringMaterialOptions from './StringMaterialOptions';\r\nimport StringOptions from './StringOptions';\r\n\r\nconst OptionsPanel = () => {\r\n  return (\r\n    <MainContainer>\r\n      <OptionsContainer>\r\n        <Overview />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <NeckOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <SoundboardOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <PillarOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <StringMaterialOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <TuningOptions />\r\n      </OptionsContainer>\r\n\r\n      <OptionsContainer>\r\n        <StringOptions />\r\n      </OptionsContainer>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default OptionsPanel;\r\n\r\nconst MainContainer = styled(Container)`\r\n  max-height: 90vh;\r\n  overflow: auto;\r\n`;\r\n\r\nconst OptionsContainer = styled.div`\r\n  margin-bottom: 1.3rem;\r\n`;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport { Shape, Circle } from 'react-konva';\r\nimport { updateControlPosition, updateSoundboardLength } from '../actions/soundboardActions';\r\n\r\nconst Body = ({ start, end, dispatch }) => {\r\n  const control = useRef(null);\r\n  const [cachedEnd, setCachedEnd] = useState(end);\r\n  const [dragOffset, setDragOffset] = useState(0);\r\n\r\n  useEffect(() => {\r\n    dispatch(updateControlPosition({ x: control.current.x(), y: control.current.y() }));\r\n  }, [control, dispatch]);\r\n\r\n  useEffect(() => {\r\n    const length = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2) * 0.4;\r\n    dispatch(updateSoundboardLength(length));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (end.y !== cachedEnd.y) {\r\n      const length = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2) * 0.4;\r\n      dispatch(updateSoundboardLength(length));\r\n\r\n      dispatch(\r\n        updateControlPosition({\r\n          x: control.current.x(),\r\n          y: control.current.y(),\r\n        })\r\n      );\r\n\r\n      setCachedEnd(end);\r\n    }\r\n  }, [dispatch, end]);\r\n\r\n  return (\r\n    <>\r\n      <Shape\r\n        stroke='black'\r\n        strokeWidth={5}\r\n        lineJoin='round'\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          context.moveTo(start.x, start.y);\r\n          context.quadraticCurveTo(control.current?.x(), control.current?.y(), end.x, end.y);\r\n          context.lineTo(end.x + 20, end.y);\r\n          context.lineTo(start.x + 100, start.y);\r\n          context.closePath();\r\n          context.fillStrokeShape(shape);\r\n        }}\r\n      />\r\n\r\n      <Circle\r\n        ref={control}\r\n        x={(start.x + end.x) / 2}\r\n        y={(start.y + end.y) / 2 - dragOffset}\r\n        radius={20}\r\n        stroke='#666'\r\n        fill='#ddd'\r\n        strokeWidth={2}\r\n        draggable\r\n        onMouseEnter={function () {\r\n          document.body.style.cursor = 'pointer';\r\n          this.strokeWidth(4);\r\n        }}\r\n        onMouseLeave={function () {\r\n          document.body.style.cursor = 'default';\r\n          this.strokeWidth(2);\r\n        }}\r\n        onDragMove={function () {\r\n          this.x((start.x + end.x) / 2);\r\n        }}\r\n        onDragEnd={function (e) {\r\n          dispatch(\r\n            updateControlPosition({\r\n              x: this.x(),\r\n              y: this.y(),\r\n            })\r\n          );\r\n          setDragOffset((start.y + end.y) / 2 - e.target.y());\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Line, Shape } from 'react-konva';\r\n\r\nconst Pillar = ({ start, end, dStart, dEnd, width = 30 }) => {\r\n  const { shape } = useSelector((state) => state.pillar);\r\n\r\n  if (shape === 'D Shape') {\r\n    return (\r\n      <Shape\r\n        stroke='black'\r\n        strokeWidth={5}\r\n        lineCap='round'\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          context.moveTo(start.x, start.y);\r\n          context.quadraticCurveTo(\r\n            (start.x + end.x) / 2 - 100,\r\n            (start.y + end.y) / 2,\r\n            end.x,\r\n            end.y + 50\r\n          );\r\n          context.moveTo(dStart.x, dStart.y);\r\n          context.quadraticCurveTo(\r\n            (dStart.x + dEnd.x) / 2 - 100,\r\n            (dStart.y + dEnd.y) / 2,\r\n            dEnd.x,\r\n            dEnd.y + 15\r\n          );\r\n          context.fillStrokeShape(shape);\r\n        }}\r\n        className='Pillar'\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Line\r\n      x={0}\r\n      y={0}\r\n      points={[start.x, start.y, end.x, end.y, end.x - width, end.y, start.x - width, start.y]}\r\n      stroke='black'\r\n      strokeWidth={5}\r\n      closed\r\n      lineJoin='round'\r\n      lineCap='round'\r\n      className='Pillar'\r\n    />\r\n  );\r\n};\r\n\r\nexport default Pillar;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Line } from 'react-konva';\r\nimport { stringX, stringY, getQBezierValue } from '../utils';\r\n\r\nconst Neck = ({ start, end, yOffset, harpHeight }) => {\r\n  const { strings, defaultStringLengths, stringSpacing, stringNumber } = useSelector(\r\n    (state) => state.string\r\n  );\r\n  const { control } = useSelector((state) => state.soundboard);\r\n  const { shape } = useSelector((state) => state.pillar);\r\n\r\n  return (\r\n    <>\r\n      {control && (\r\n        <>\r\n          <Line\r\n            x={0}\r\n            y={0}\r\n            tension={0.3}\r\n            points={[\r\n              start.x,\r\n              shape === 'Straight' ? start.y : start.y + 50,\r\n              ...topNeckPoints(\r\n                strings,\r\n                defaultStringLengths,\r\n                stringY(-4, yOffset, harpHeight),\r\n                control.y,\r\n                end.y,\r\n                stringSpacing,\r\n                -40,\r\n                stringNumber\r\n              ),\r\n              end.x,\r\n              end.y - 30,\r\n              end.x + 20,\r\n              end.y,\r\n              end.x,\r\n              end.y,\r\n              ...bottomNeckPoints(\r\n                strings,\r\n                defaultStringLengths,\r\n                stringY(-4, yOffset, harpHeight),\r\n                control.y,\r\n                end.y,\r\n                stringSpacing,\r\n                10,\r\n                stringNumber\r\n              ),\r\n              start.x,\r\n              start.y + 50,\r\n            ]}\r\n            stroke='black'\r\n            strokeWidth={5}\r\n            lineCap='round'\r\n            className='Neck'\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Neck;\r\n\r\nconst neckPoints = (stringLengths, start, control, end, stringSpacing, offset, stringNumber) => {\r\n  const points = stringLengths.map((length, index) => {\r\n    const yPos = getQBezierValue((index + 4) / (stringNumber + 7), start, control, end);\r\n    return [stringX(index, stringSpacing), yPos - length * 0.4 + offset];\r\n  });\r\n\r\n  return points;\r\n};\r\n\r\nconst bottomNeckPoints = (\r\n  strings,\r\n  stringLengths,\r\n  start,\r\n  control,\r\n  end,\r\n  stringSpacing,\r\n  offset,\r\n  stringNumber\r\n) => {\r\n  const points = neckPoints(\r\n    strings.map((string) => string.length),\r\n    start,\r\n    control,\r\n    end,\r\n    stringSpacing,\r\n    offset,\r\n    stringNumber\r\n  );\r\n  const samples = [];\r\n\r\n  points.forEach((point, index) => {\r\n    const lengthDifference = strings[index].length - stringLengths[index];\r\n    if (index % 6 === 0 || lengthDifference < -10) {\r\n      samples.push(point);\r\n    }\r\n  });\r\n\r\n  return samples.reverse().flat();\r\n};\r\n\r\nconst topNeckPoints = (\r\n  strings,\r\n  stringLengths,\r\n  start,\r\n  control,\r\n  end,\r\n  stringSpacing,\r\n  offset,\r\n  stringNumber\r\n) => {\r\n  const points = neckPoints(\r\n    strings.map((string) => string.length),\r\n    start,\r\n    control,\r\n    end,\r\n    stringSpacing,\r\n    offset,\r\n    stringNumber\r\n  );\r\n  const samples = [];\r\n\r\n  points.forEach((point, index) => {\r\n    const lengthDifference = strings[index].length - stringLengths[index];\r\n    if (index % 6 === 0 || lengthDifference > 50) {\r\n      samples.push(point);\r\n    }\r\n  });\r\n\r\n  return samples.flat();\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Shape, Circle } from 'react-konva';\r\n\r\nconst String = ({ start, end, string, stroke = 'white' }) => {\r\n  const { backgroundColor } = useSelector((state) => state.settings);\r\n\r\n  return (\r\n    <>\r\n      <Shape\r\n        stroke={backgroundColor === 'white' && stroke === 'white' ? 'silver' : stroke}\r\n        strokeWidth={3}\r\n        lineCap='round'\r\n        string={string}\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          context.moveTo(start.x, start.y);\r\n          context.lineTo(end.x, end.y - 20);\r\n          context.fillStrokeShape(shape);\r\n        }}\r\n      />\r\n      <Circle x={end.x} y={end.y || 0} stroke='gray' radius={2} listening={false} />\r\n      <Circle x={end.x} y={end.y - 20 || 0} stroke='gray' radius={3} listening={false} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default String;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Arrow, Label, Tag, Text } from 'react-konva';\r\nimport { stringX, stringY } from '../utils';\r\n\r\nconst Measurements = ({ yOffset, width, height }) => {\r\n  const { stringSpacing, stringNumber } = useSelector((state) => state.string);\r\n\r\n  return (\r\n    <>\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) - 90,\r\n          height / 2 - 10,\r\n          stringX(-4, stringSpacing) - 90,\r\n          stringY(-4, yOffset, height) - height,\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) - 90,\r\n          height / 2 + 40,\r\n          stringX(-4, stringSpacing) - 90,\r\n          stringY(-4, yOffset, height),\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Label x={stringX(-4, stringSpacing) - 90} y={height / 2} listening={false}>\r\n        <Tag\r\n          fill='black'\r\n          pointerDirection='up'\r\n          pointerWidth={0}\r\n          pointerHeight={0}\r\n          lineJoin='round'\r\n        />\r\n        <Text text={Math.round(height / 0.4) + ' mm'} fontSize={18} padding={5} fill='white' />\r\n      </Label>\r\n\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) +\r\n            (stringX(stringNumber + 3, stringSpacing) - stringX(-4, stringSpacing)) / 2 +\r\n            10,\r\n          stringY(-4, yOffset, height) - height - 30,\r\n          stringX(stringNumber + 3, stringSpacing) + 20,\r\n          stringY(-4, yOffset, height) - height - 30,\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Arrow\r\n        points={[\r\n          stringX(-4, stringSpacing) +\r\n            (stringX(stringNumber + 3, stringSpacing) - stringX(-4, stringSpacing)) / 2 -\r\n            100,\r\n          stringY(-4, yOffset, height) - height - 30,\r\n          stringX(-4, stringSpacing) - 30,\r\n          stringY(-4, yOffset, height) - height - 30,\r\n        ]}\r\n        stroke='blue'\r\n      />\r\n\r\n      <Label\r\n        x={\r\n          stringX(-4, stringSpacing) +\r\n          (stringX(stringNumber + 3, stringSpacing) - stringX(-4, stringSpacing)) / 2\r\n        }\r\n        y={stringY(-4, yOffset, height) - height - 30}\r\n        listening={false}\r\n      >\r\n        <Tag\r\n          fill='black'\r\n          pointerDirection='right'\r\n          pointerWidth={0}\r\n          pointerHeight={0}\r\n          lineJoin='round'\r\n        />\r\n        <Text text={Math.round(width / 0.4) + ' mm'} fontSize={18} padding={5} fill='white' />\r\n      </Label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Measurements;\r\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { useDispatch, useSelector, Provider } from 'react-redux';\r\nimport { Stage, Layer, Label, Tag, Text } from 'react-konva';\r\nimport Body from './Body';\r\nimport Pillar from './Pillar';\r\nimport Neck from './Neck';\r\nimport String from './String';\r\nimport Measurements from './Measurements';\r\nimport { selectString, updateYOffset } from '../actions/stringActions';\r\nimport {\r\n  stringX,\r\n  stringY,\r\n  getQBezierValue,\r\n  calculateTensileStress,\r\n  calculateStraightPillarCrossSectionArea,\r\n  calculateDPillarCrossSectionArea,\r\n  calculateYOffset,\r\n} from '../utils';\r\nimport store from '../store';\r\n\r\nconst Harp = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { strings, defaultStringLengths, stringSpacing, stringNumber, totalLoad, yOffset } =\r\n    useSelector((state) => state.string);\r\n  const { angle, control, stringBandThickness, length } = useSelector((state) => state.soundboard);\r\n  const { neckJointWidth, shape, pillarDiameter, pillarWidth, pillarThickness } = useSelector(\r\n    (state) => state.pillar\r\n  );\r\n  const {\r\n    neckStyle,\r\n    neckThickness,\r\n    tuningPinLength,\r\n    frontNeckThickness,\r\n    backNeckThickness,\r\n    frontNeckTuningPostLength,\r\n    backNeckTuningPostLength,\r\n  } = useSelector((state) => state.neck);\r\n\r\n  const [width, setWidth] = useState(\r\n    stringX(stringNumber + 3, stringSpacing) + 20 - (stringX(-4, stringSpacing) - 30)\r\n  );\r\n  const [height, setHeight] = useState(1214.57 * 0.48);\r\n\r\n  const tooltip = useRef(null);\r\n\r\n  const frontNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 0) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const backNeckLoad = useMemo(() => {\r\n    let load = 0;\r\n    [...strings].reverse().forEach((string, index) => {\r\n      if (index % 2 === 1) load += string.tension;\r\n    });\r\n\r\n    return load;\r\n  }, [strings]);\r\n\r\n  const torqueImbalance = useMemo(() => {\r\n    const imbalance =\r\n      (frontNeckTuningPostLength / 1000) * frontNeckLoad * 9.807 -\r\n      (backNeckTuningPostLength / 1000) * backNeckLoad * 9.807;\r\n\r\n    return imbalance;\r\n  }, [frontNeckTuningPostLength, backNeckTuningPostLength, frontNeckLoad, backNeckLoad]);\r\n\r\n  useEffect(() => {\r\n    dispatch(updateYOffset(calculateYOffset(angle, stringSpacing)));\r\n  }, [angle, stringSpacing, dispatch]);\r\n\r\n  useEffect(() => {\r\n    setWidth(stringX(stringNumber + 3, stringSpacing) + 20 - (stringX(-4, stringSpacing) - 30));\r\n  }, [stringNumber, stringSpacing]);\r\n\r\n  useEffect(() => {\r\n    let yPos = 0;\r\n\r\n    strings.forEach((string, index) => {\r\n      const yPosAtSoundboard = getQBezierValue(\r\n        (index + 4) / (stringNumber + 7),\r\n        stringY(-4, yOffset, height),\r\n        control?.y,\r\n        stringY(stringNumber + 3, yOffset, height)\r\n      );\r\n\r\n      const stringHeight =\r\n        stringY(-4, yOffset, height) - yPosAtSoundboard + string.length * 0.4 + 50;\r\n      if (stringHeight > yPos) yPos = stringHeight;\r\n    });\r\n\r\n    setHeight(yPos > strings[0].length * 0.48 ? Math.round(yPos) : strings[0].length * 0.48);\r\n  }, [defaultStringLengths, control, stringNumber, strings, yOffset]);\r\n\r\n  return (\r\n    <Stage width={width + 300} height={height + 300}>\r\n      <Provider store={store}>\r\n        <Layer\r\n          onClick={(e) => {\r\n            tooltip.current.position({\r\n              x: e.evt.layerX,\r\n              y: e.evt.layerY - 5,\r\n            });\r\n            if (e.target.attrs.className === 'Neck') {\r\n              if (neckStyle === 'Standard') {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Neck\\n\\nNeck Style: ${neckStyle}\\nTensile Stress: ${(\r\n                      calculateTensileStress(\r\n                        (stringX(stringNumber + 3, stringSpacing) +\r\n                          20 -\r\n                          (stringX(-4, stringSpacing) - 30)) /\r\n                          0.4 /\r\n                          1000,\r\n                        neckThickness / 1000,\r\n                        totalLoad * 9.807\r\n                      ) / 1000000\r\n                    ).toFixed(6)} MPa\\nTorque: ${(\r\n                      (tuningPinLength / 1000) *\r\n                      totalLoad *\r\n                      9.807\r\n                    ).toFixed(\r\n                      6\r\n                    )} N m\\nNeck Thickness: ${neckThickness} mm\\nTuning Pin Length: ${tuningPinLength} mm`\r\n                  );\r\n              } else {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Neck\\n\\nNeck Style: ${neckStyle}\\nTorque Imbalance: ${torqueImbalance.toFixed(\r\n                      6\r\n                    )} N m\\n\\nFront Neck\\nTensile Stress: ${(\r\n                      calculateTensileStress(\r\n                        (stringX(stringNumber + 3, stringSpacing) +\r\n                          20 -\r\n                          (stringX(-4, stringSpacing) - 30)) /\r\n                          0.4 /\r\n                          1000,\r\n                        frontNeckThickness / 1000,\r\n                        (frontNeckLoad / 2) * 9.807\r\n                      ) / 1000000\r\n                    ).toFixed(\r\n                      6\r\n                    )} MPa\\nNeck Thickness: ${frontNeckThickness} mm\\nTuning Post Length: ${frontNeckTuningPostLength} mm\\n\\nBack Neck\\nTensile Stress: ${(\r\n                      calculateTensileStress(\r\n                        (stringX(stringNumber + 3, stringSpacing) +\r\n                          20 -\r\n                          (stringX(-4, stringSpacing) - 30)) /\r\n                          0.4 /\r\n                          1000,\r\n                        backNeckThickness / 1000,\r\n                        (backNeckLoad / 2) * 9.807\r\n                      ) / 1000000\r\n                    ).toFixed(\r\n                      6\r\n                    )} MPa\\nNeck Thickness: ${backNeckThickness} mm\\nTuning Post Length: ${backNeckTuningPostLength} mm`\r\n                  );\r\n              }\r\n            } else if (e.target.attrs.className === 'Pillar') {\r\n              if (shape === 'Straight') {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Pillar\\n\\nCompresive Stress: ${(\r\n                      (totalLoad * 0.6 * 9.807) /\r\n                      calculateStraightPillarCrossSectionArea(pillarDiameter) /\r\n                      1000000\r\n                    ).toFixed(6)} MPa\\nPillar Diameter: ${pillarDiameter} mm`\r\n                  );\r\n              } else {\r\n                tooltip.current\r\n                  .getText()\r\n                  .text(\r\n                    `Pillar\\n\\nCompresive Stress: ${(\r\n                      (totalLoad * 0.6 * 9.807) /\r\n                      calculateDPillarCrossSectionArea(pillarWidth, pillarThickness) /\r\n                      1000000\r\n                    ).toFixed(\r\n                      6\r\n                    )} MPa\\nPillar Width: ${pillarWidth} mm\\nPillar Thickness: ${pillarThickness} mm`\r\n                  );\r\n              }\r\n            }\r\n\r\n            tooltip.current.show();\r\n          }}\r\n          onMouseOver={(e) => {\r\n            document.body.style.cursor = 'pointer';\r\n            e.target.strokeWidth(7);\r\n          }}\r\n          onMouseOut={(e) => {\r\n            document.body.style.cursor = 'default';\r\n            e.target.strokeWidth(5);\r\n            tooltip.current.hide();\r\n          }}\r\n        >\r\n          <Pillar\r\n            start={{ x: stringX(-4, stringSpacing), y: stringY(-4, yOffset, height) }}\r\n            end={{\r\n              x: stringX(-4, stringSpacing),\r\n              y: stringY(-4, yOffset, height) - height,\r\n            }}\r\n            dStart={{\r\n              x: stringX(-2, stringSpacing),\r\n              y: getQBezierValue(\r\n                2 / (stringNumber + 7),\r\n                stringY(-4, yOffset, height),\r\n                control?.y,\r\n                stringY(stringNumber + 3, yOffset, height)\r\n              ),\r\n            }}\r\n            dEnd={{\r\n              x: stringX(neckJointWidth, stringSpacing),\r\n              y:\r\n                getQBezierValue(\r\n                  (4 + neckJointWidth) / (stringNumber + 7),\r\n                  stringY(-4, yOffset, height),\r\n                  control?.y,\r\n                  stringY(stringNumber + 3, yOffset, height)\r\n                ) -\r\n                strings[neckJointWidth].length * 0.4,\r\n            }}\r\n          />\r\n\r\n          <Neck\r\n            start={{\r\n              x: stringX(-4, stringSpacing),\r\n              y: stringY(-4, yOffset, height) - height,\r\n            }}\r\n            end={{\r\n              x: stringX(stringNumber + 3, stringSpacing),\r\n              y: stringY(stringNumber + 3, yOffset, height),\r\n            }}\r\n            yOffset={yOffset}\r\n            harpHeight={height}\r\n          />\r\n        </Layer>\r\n\r\n        <Layer\r\n          onClick={(e) => {\r\n            dispatch(selectString(e.target.attrs.string.id));\r\n          }}\r\n          onMouseOver={(e) => {\r\n            const string = e.target.attrs.string;\r\n            document.body.style.cursor = 'pointer';\r\n            e.target.strokeWidth(5);\r\n            tooltip.current\r\n              .getText()\r\n              .text(\r\n                `${string.note}\\n\\nFrequency: ${string.frequency} Hz\\nLength: ${\r\n                  string.length\r\n                } mm\\nDiameter: ${Number(string.diameter).toFixed(\r\n                  2\r\n                )} mm\\nTension: ${string.tension.toFixed(2)} kg`\r\n              );\r\n            tooltip.current.position({\r\n              x: e.evt.layerX,\r\n              y: e.evt.layerY - 5,\r\n            });\r\n            tooltip.current.show();\r\n          }}\r\n          onMouseOut={(e) => {\r\n            document.body.style.cursor = 'default';\r\n            e.target.strokeWidth(3);\r\n            tooltip.current.hide();\r\n          }}\r\n        >\r\n          {strings.map((string, index) => {\r\n            const yPos = getQBezierValue(\r\n              (index + 4) / (stringNumber + 7),\r\n              stringY(-4, yOffset, height),\r\n              control?.y,\r\n              stringY(stringNumber + 3, yOffset, height)\r\n            );\r\n\r\n            return (\r\n              <String\r\n                key={string.id}\r\n                start={{\r\n                  x: stringX(index, stringSpacing),\r\n                  y: yPos,\r\n                }}\r\n                end={{\r\n                  x: stringX(index, stringSpacing),\r\n                  y: yPos - string.length * 0.4,\r\n                }}\r\n                string={string}\r\n                stroke={\r\n                  string.note.charAt(0) === 'C' && string.note.length === 2\r\n                    ? 'red'\r\n                    : string.note.charAt(0) === 'F' && string.note.length === 2\r\n                    ? 'blue'\r\n                    : 'white'\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </Layer>\r\n\r\n        <Layer\r\n          onClick={(e) => {\r\n            tooltip.current.position({\r\n              x: e.evt.layerX,\r\n              y: e.evt.layerY - 5,\r\n            });\r\n            tooltip.current\r\n              .getText()\r\n              .text(\r\n                `Body\\n\\nSoundboard Angle: ${angle} degrees\\nSoundboard Tensile Stress: ${(\r\n                  calculateTensileStress(\r\n                    length / 1000,\r\n                    stringBandThickness / 1000,\r\n                    totalLoad * 0.5 * 9.807\r\n                  ) / 1000000\r\n                ).toFixed(6)} MPa\\nString Band Thickness: ${stringBandThickness} mm`\r\n              );\r\n            tooltip.current.show();\r\n          }}\r\n          onMouseOver={(e) => {\r\n            document.body.style.cursor = 'pointer';\r\n            e.target.strokeWidth(7);\r\n          }}\r\n          onMouseOut={(e) => {\r\n            document.body.style.cursor = 'default';\r\n            e.target.strokeWidth(5);\r\n            tooltip.current.hide();\r\n          }}\r\n        >\r\n          <Body\r\n            start={{ x: stringX(-4, stringSpacing), y: stringY(-4, yOffset, height) }}\r\n            end={{\r\n              x: stringX(stringNumber + 3, stringSpacing),\r\n              y: stringY(stringNumber + 3, yOffset, height),\r\n            }}\r\n            dispatch={dispatch}\r\n          />\r\n        </Layer>\r\n\r\n        <Layer>\r\n          <Measurements yOffset={yOffset} width={width} height={height} />\r\n\r\n          <Label opacity={0.8} visible={false} listening={false} ref={tooltip}>\r\n            <Tag\r\n              fill='black'\r\n              pointerDirection='down'\r\n              pointerWidth={10}\r\n              pointerHeight={10}\r\n              lineJoin='round'\r\n            />\r\n            <Text text='' fontSize={18} padding={5} fill='white' />\r\n          </Label>\r\n        </Layer>\r\n      </Provider>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default Harp;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const updateBackgroundColor = (color) => async (dispatch) => {\r\n  dispatch(createAction('UPDATE_BACKGROUND_COLOR')({ color }));\r\n};\r\n\r\nexport const saveCurrentDesign = (designName, designData) => async () => {\r\n  const savedDesigns = JSON.parse(localStorage.getItem('savedDesigns'));\r\n  localStorage.setItem(\r\n    'savedDesigns',\r\n    JSON.stringify({ ...savedDesigns, [designName]: designData })\r\n  );\r\n};\r\n\r\nexport const loadSavedDesign = (designName) => async (dispatch) => {\r\n  const design = JSON.parse(localStorage.getItem('savedDesigns'))[designName];\r\n  dispatch(createAction('UPDATE_STRING_STATE')({ state: design.string }));\r\n  dispatch(createAction('UPDATE_NECK_STATE')({ state: design.neck }));\r\n  dispatch(createAction('UPDATE_PILLAR_STATE')({ state: design.pillar }));\r\n  dispatch(createAction('UPDATE_SOUNDBOARD_STATE')({ state: design.soundboard }));\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport _ from 'lodash';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  Navbar,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Offcanvas,\r\n  Form,\r\n  InputGroup,\r\n  FormControl,\r\n} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { GiHamburgerMenu } from 'react-icons/gi';\r\nimport OptionsPanel from './components/OptionsPanel';\r\nimport Harp from './components/Harp';\r\nimport {\r\n  updateBackgroundColor,\r\n  saveCurrentDesign,\r\n  loadSavedDesign,\r\n} from './actions/settingsActions';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { backgroundColor } = useSelector((state) => state.settings);\r\n  const designData = _.omit(\r\n    useSelector((state) => state),\r\n    'settings'\r\n  );\r\n\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [designName, setDesignName] = useState('');\r\n  const [selectedDesign, setSelectedDesign] = useState('');\r\n  const [savedDesigns, setSavedDesigns] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const designs = JSON.parse(localStorage.getItem('savedDesigns'));\r\n    if (designs) {\r\n      setSavedDesigns(Object.keys(designs));\r\n      setSelectedDesign(Object.keys(designs)[0]);\r\n    }\r\n  }, []);\r\n\r\n  const saveDesign = () => {\r\n    if (designName !== '') {\r\n      dispatch(saveCurrentDesign(designName, designData));\r\n\r\n      const designs = JSON.parse(localStorage.getItem('savedDesigns'));\r\n      setSavedDesigns(Object.keys(designs));\r\n      setDesignName('');\r\n    }\r\n  };\r\n\r\n  const loadDesign = () => {\r\n    if (savedDesigns.includes(selectedDesign)) {\r\n      dispatch(loadSavedDesign(selectedDesign));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainer className='App' backgroundColor={backgroundColor}>\r\n      <Navbar className='mb-3' bg='dark' variant='dark'>\r\n        <Container>\r\n          <Navbar.Brand>Harp Designer</Navbar.Brand>\r\n\r\n          <NavButton variant='dark' onClick={() => setShowSettings(true)}>\r\n            <GiHamburgerMenu />\r\n          </NavButton>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      <SettingsPanel show={showSettings} onHide={() => setShowSettings(false)} placement='end'>\r\n        <Offcanvas.Header closeButton>\r\n          <Offcanvas.Title>Settings</Offcanvas.Title>\r\n        </Offcanvas.Header>\r\n        <Offcanvas.Body>\r\n          <SettingContainer>\r\n            <h5>Background Color</h5>\r\n            <ColorIndicator\r\n              color='burlywood'\r\n              onClick={() => dispatch(updateBackgroundColor('burlywood'))}\r\n            />\r\n            <ColorIndicator\r\n              color='white'\r\n              onClick={() => dispatch(updateBackgroundColor('white'))}\r\n            />\r\n          </SettingContainer>\r\n          <SettingContainer>\r\n            <h5>Manage Designs</h5>\r\n\r\n            <Form.Label>Save Current Design</Form.Label>\r\n            <InputGroup className='mb-3'>\r\n              <FormControl\r\n                placeholder='Please enter a name ...'\r\n                value={designName}\r\n                onChange={(e) => setDesignName(e.target.value)}\r\n              />\r\n              <Button onClick={() => saveDesign()}>Save</Button>\r\n            </InputGroup>\r\n\r\n            <Form.Label>Load Design</Form.Label>\r\n            <InputGroup className='mb-3'>\r\n              <Form.Select\r\n                value={selectedDesign}\r\n                onChange={(e) => setSelectedDesign(e.target.value)}\r\n              >\r\n                {savedDesigns.map((design) => {\r\n                  return (\r\n                    <option value={design} key={design}>\r\n                      {design}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n              <Button onClick={() => loadDesign()}>Load</Button>\r\n            </InputGroup>\r\n          </SettingContainer>\r\n        </Offcanvas.Body>\r\n      </SettingsPanel>\r\n\r\n      <Row>\r\n        <Col md={3}>\r\n          <OptionsPanel />\r\n        </Col>\r\n        <CanvasContainer md={9}>\r\n          <Harp />\r\n        </CanvasContainer>\r\n      </Row>\r\n    </AppContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: ${(props) => props.backgroundColor};\r\n`;\r\n\r\nconst ColorIndicator = styled.div`\r\n  display: inline-block;\r\n  width: 2rem;\r\n  height: 2rem;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin: 0.5rem 1rem;\r\n  background-color: ${(props) => props.color};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CanvasContainer = styled(Col)`\r\n  overflow: scroll;\r\n`;\r\n\r\nconst NavButton = styled(Button)`\r\n  border: none;\r\n`;\r\n\r\nconst SettingsPanel = styled(Offcanvas)`\r\n  background-color: #212529;\r\n  color: white;\r\n`;\r\n\r\nconst SettingContainer = styled.div`\r\n  margin-bottom: 1rem;\r\n`;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}